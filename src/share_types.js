//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');


var ttypes = module.exports = {};
ttypes.ShareType = {
  'CAMPAIGN_UPDATE' : 1,
  'TOPIC_COMPARE' : 2,
  'JOIN_GROUP' : 3,
  'SIGN_PETITION' : 4,
  'REP_PETITION' : 5,
  'REP_PETITION_CALL' : 6,
  'CAMPAIGN_POLL' : 7
};
ttypes.Channel = {
  'UNKNOWN' : 1,
  'COPY_LINK' : 2,
  'FACEBOOK' : 3,
  'TWITTER' : 4,
  'SMS' : 5,
  'PHONE' : 6,
  'FACEBOOK_MESSENGER' : 7
};
var ShareTargetUid = module.exports.ShareTargetUid = function(args) {
  this.petition_uid = null;
  this.campaign_update_uid = null;
  this.topic_uid = null;
  this.group_uid = null;
  this.petition_target_uid = null;
  this.campaign_poll_uid = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.campaign_update_uid !== undefined && args.campaign_update_uid !== null) {
      this.campaign_update_uid = args.campaign_update_uid;
    }
    if (args.topic_uid !== undefined && args.topic_uid !== null) {
      this.topic_uid = args.topic_uid;
    }
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.petition_target_uid !== undefined && args.petition_target_uid !== null) {
      this.petition_target_uid = args.petition_target_uid;
    }
    if (args.campaign_poll_uid !== undefined && args.campaign_poll_uid !== null) {
      this.campaign_poll_uid = args.campaign_poll_uid;
    }
  }
};
ShareTargetUid.prototype = {};
ShareTargetUid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.campaign_update_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.topic_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.petition_target_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.campaign_poll_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareTargetUid.prototype.write = function(output) {
  output.writeStructBegin('ShareTargetUid');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.campaign_update_uid !== null && this.campaign_update_uid !== undefined) {
    output.writeFieldBegin('campaign_update_uid', Thrift.Type.STRING, 2);
    output.writeString(this.campaign_update_uid);
    output.writeFieldEnd();
  }
  if (this.topic_uid !== null && this.topic_uid !== undefined) {
    output.writeFieldBegin('topic_uid', Thrift.Type.STRING, 3);
    output.writeString(this.topic_uid);
    output.writeFieldEnd();
  }
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 4);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.petition_target_uid !== null && this.petition_target_uid !== undefined) {
    output.writeFieldBegin('petition_target_uid', Thrift.Type.STRING, 5);
    output.writeString(this.petition_target_uid);
    output.writeFieldEnd();
  }
  if (this.campaign_poll_uid !== null && this.campaign_poll_uid !== undefined) {
    output.writeFieldBegin('campaign_poll_uid', Thrift.Type.STRING, 6);
    output.writeString(this.campaign_poll_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Share = module.exports.Share = function(args) {
  this.uid = null;
  this.channel = null;
  this.share_type = null;
  this.share_target_uid = null;
  this.created_at = null;
  this.updated_at = null;
  this.click_count = null;
  this.sharer_entity_uuid = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.channel !== undefined && args.channel !== null) {
      this.channel = args.channel;
    }
    if (args.share_type !== undefined && args.share_type !== null) {
      this.share_type = args.share_type;
    }
    if (args.share_target_uid !== undefined && args.share_target_uid !== null) {
      this.share_target_uid = new ttypes.ShareTargetUid(args.share_target_uid);
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    }
    if (args.updated_at !== undefined && args.updated_at !== null) {
      this.updated_at = args.updated_at;
    }
    if (args.click_count !== undefined && args.click_count !== null) {
      this.click_count = args.click_count;
    }
    if (args.sharer_entity_uuid !== undefined && args.sharer_entity_uuid !== null) {
      this.sharer_entity_uuid = args.sharer_entity_uuid;
    }
  }
};
Share.prototype = {};
Share.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.channel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.share_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.share_target_uid = new ttypes.ShareTargetUid();
        this.share_target_uid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.updated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.click_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.sharer_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Share.prototype.write = function(output) {
  output.writeStructBegin('Share');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.I32, 2);
    output.writeI32(this.channel);
    output.writeFieldEnd();
  }
  if (this.share_type !== null && this.share_type !== undefined) {
    output.writeFieldBegin('share_type', Thrift.Type.I32, 3);
    output.writeI32(this.share_type);
    output.writeFieldEnd();
  }
  if (this.share_target_uid !== null && this.share_target_uid !== undefined) {
    output.writeFieldBegin('share_target_uid', Thrift.Type.STRUCT, 4);
    this.share_target_uid.write(output);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 5);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.updated_at !== null && this.updated_at !== undefined) {
    output.writeFieldBegin('updated_at', Thrift.Type.STRING, 6);
    output.writeString(this.updated_at);
    output.writeFieldEnd();
  }
  if (this.click_count !== null && this.click_count !== undefined) {
    output.writeFieldBegin('click_count', Thrift.Type.I32, 7);
    output.writeI32(this.click_count);
    output.writeFieldEnd();
  }
  if (this.sharer_entity_uuid !== null && this.sharer_entity_uuid !== undefined) {
    output.writeFieldBegin('sharer_entity_uuid', Thrift.Type.STRING, 8);
    output.writeString(this.sharer_entity_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShareConversion = module.exports.ShareConversion = function(args) {
  this.uid = null;
  this.share_uid = null;
  this.converter_entity_uuid = null;
  this.created_at = null;
  this.updated_at = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.share_uid !== undefined && args.share_uid !== null) {
      this.share_uid = args.share_uid;
    }
    if (args.converter_entity_uuid !== undefined && args.converter_entity_uuid !== null) {
      this.converter_entity_uuid = args.converter_entity_uuid;
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    }
    if (args.updated_at !== undefined && args.updated_at !== null) {
      this.updated_at = args.updated_at;
    }
  }
};
ShareConversion.prototype = {};
ShareConversion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.share_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.converter_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.updated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareConversion.prototype.write = function(output) {
  output.writeStructBegin('ShareConversion');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.share_uid !== null && this.share_uid !== undefined) {
    output.writeFieldBegin('share_uid', Thrift.Type.STRING, 2);
    output.writeString(this.share_uid);
    output.writeFieldEnd();
  }
  if (this.converter_entity_uuid !== null && this.converter_entity_uuid !== undefined) {
    output.writeFieldBegin('converter_entity_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.converter_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 4);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.updated_at !== null && this.updated_at !== undefined) {
    output.writeFieldBegin('updated_at', Thrift.Type.STRING, 5);
    output.writeString(this.updated_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


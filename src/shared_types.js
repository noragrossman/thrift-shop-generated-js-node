//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ExceptionClass = {
  'CLIENT' : 0,
  'SERVER' : 1,
  'UPSTREAM' : 2
};
ttypes.ArgumentExceptionCode = {
  'PRESENCE' : 0,
  'INVALID' : 1,
  'RESOURCE_NOT_FOUND' : 2,
  'INVALID_LENGTH' : 3,
  'NOT_IN_SET' : 4
};
ttypes.StateExceptionCode = {
  'ALREADY_EXISTS' : 1,
  'LIMIT_REACHED' : 2,
  'RESOURCE_NOT_FOUND' : 3
};
ttypes.Service = {
  'ACTION' : 0,
  'AUTH' : 1,
  'BRIGADE' : 2,
  'CAMPAIGN' : 3,
  'EVENT_BUS' : 4,
  'INFLUENCE' : 5,
  'CONTACT' : 6,
  'CAMPAIGN_RECOMMENDATION' : 7,
  'GROUP' : 8,
  'EXPERIMENT' : 9,
  'ALIGNMENT' : 10,
  'CIVIC_DATA' : 11,
  'VERIFIER' : 12
};
ttypes.EntityRole = {
  'ADMIN' : 0,
  'GUEST' : 1,
  'LOGGED_OUT' : 2,
  'USER' : 3
};
ttypes.BoundaryLimitPaginationDirection = {
  'AFTER' : 0,
  'BEFORE' : 1
};
ttypes.SortOrder = {
  'DESC' : 1,
  'ASC' : 2
};
ttypes.ClientPlatform = {
  'UNKNOWN' : 1,
  'ANDROID' : 2,
  'WEB' : 3,
  'IOS' : 4
};
ttypes.Pronoun = {
  'NEUTRAL' : 1,
  'FEMALE' : 2,
  'MALE' : 3
};
var Entity = module.exports.Entity = function(args) {
  this.uuid = null;
  this.role = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
  }
};
Entity.prototype = {};
Entity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Entity.prototype.write = function(output) {
  output.writeStructBegin('Entity');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 3);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 2);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Parameter = module.exports.Parameter = function(args) {
  this.uid_t = null;
  this.date_time_t = null;
  this.string_t = null;
  this.i32_t = null;
  this.i64_t = null;
  this.bool_t = null;
  this.double_t = null;
  this.null_t = null;
  if (args) {
    if (args.uid_t !== undefined && args.uid_t !== null) {
      this.uid_t = args.uid_t;
    }
    if (args.date_time_t !== undefined && args.date_time_t !== null) {
      this.date_time_t = args.date_time_t;
    }
    if (args.string_t !== undefined && args.string_t !== null) {
      this.string_t = args.string_t;
    }
    if (args.i32_t !== undefined && args.i32_t !== null) {
      this.i32_t = args.i32_t;
    }
    if (args.i64_t !== undefined && args.i64_t !== null) {
      this.i64_t = args.i64_t;
    }
    if (args.bool_t !== undefined && args.bool_t !== null) {
      this.bool_t = args.bool_t;
    }
    if (args.double_t !== undefined && args.double_t !== null) {
      this.double_t = args.double_t;
    }
    if (args.null_t !== undefined && args.null_t !== null) {
      this.null_t = args.null_t;
    }
  }
};
Parameter.prototype = {};
Parameter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid_t = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.date_time_t = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.string_t = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.i32_t = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.i64_t = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.bool_t = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.double_t = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.null_t = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Parameter.prototype.write = function(output) {
  output.writeStructBegin('Parameter');
  if (this.uid_t !== null && this.uid_t !== undefined) {
    output.writeFieldBegin('uid_t', Thrift.Type.STRING, 1);
    output.writeString(this.uid_t);
    output.writeFieldEnd();
  }
  if (this.date_time_t !== null && this.date_time_t !== undefined) {
    output.writeFieldBegin('date_time_t', Thrift.Type.STRING, 2);
    output.writeString(this.date_time_t);
    output.writeFieldEnd();
  }
  if (this.string_t !== null && this.string_t !== undefined) {
    output.writeFieldBegin('string_t', Thrift.Type.STRING, 3);
    output.writeString(this.string_t);
    output.writeFieldEnd();
  }
  if (this.i32_t !== null && this.i32_t !== undefined) {
    output.writeFieldBegin('i32_t', Thrift.Type.I32, 4);
    output.writeI32(this.i32_t);
    output.writeFieldEnd();
  }
  if (this.i64_t !== null && this.i64_t !== undefined) {
    output.writeFieldBegin('i64_t', Thrift.Type.I64, 5);
    output.writeI64(this.i64_t);
    output.writeFieldEnd();
  }
  if (this.bool_t !== null && this.bool_t !== undefined) {
    output.writeFieldBegin('bool_t', Thrift.Type.BOOL, 6);
    output.writeBool(this.bool_t);
    output.writeFieldEnd();
  }
  if (this.double_t !== null && this.double_t !== undefined) {
    output.writeFieldBegin('double_t', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.double_t);
    output.writeFieldEnd();
  }
  if (this.null_t !== null && this.null_t !== undefined) {
    output.writeFieldBegin('null_t', Thrift.Type.BOOL, 8);
    output.writeBool(this.null_t);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var JobExecutionParams = module.exports.JobExecutionParams = function(args) {
  this.job_class = null;
  this.job_params = null;
  if (args) {
    if (args.job_class !== undefined && args.job_class !== null) {
      this.job_class = args.job_class;
    }
    if (args.job_params !== undefined && args.job_params !== null) {
      this.job_params = Thrift.copyMap(args.job_params, [ttypes.Parameter]);
    }
  }
};
JobExecutionParams.prototype = {};
JobExecutionParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.job_class = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.job_params = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = new ttypes.Parameter();
          val7.read(input);
          this.job_params[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobExecutionParams.prototype.write = function(output) {
  output.writeStructBegin('JobExecutionParams');
  if (this.job_class !== null && this.job_class !== undefined) {
    output.writeFieldBegin('job_class', Thrift.Type.STRING, 1);
    output.writeString(this.job_class);
    output.writeFieldEnd();
  }
  if (this.job_params !== null && this.job_params !== undefined) {
    output.writeFieldBegin('job_params', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.job_params));
    for (var kiter8 in this.job_params)
    {
      if (this.job_params.hasOwnProperty(kiter8))
      {
        var viter9 = this.job_params[kiter8];
        output.writeString(kiter8);
        viter9.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BoundaryLimitPaginationParams = module.exports.BoundaryLimitPaginationParams = function(args) {
  this.direction = null;
  this.limit = null;
  this.boundary_uid = null;
  if (args) {
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.boundary_uid !== undefined && args.boundary_uid !== null) {
      this.boundary_uid = args.boundary_uid;
    }
  }
};
BoundaryLimitPaginationParams.prototype = {};
BoundaryLimitPaginationParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.boundary_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoundaryLimitPaginationParams.prototype.write = function(output) {
  output.writeStructBegin('BoundaryLimitPaginationParams');
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 1);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 2);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.boundary_uid !== null && this.boundary_uid !== undefined) {
    output.writeFieldBegin('boundary_uid', Thrift.Type.STRING, 3);
    output.writeString(this.boundary_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BoundaryLimitPageInfo = module.exports.BoundaryLimitPageInfo = function(args) {
  this.has_before = null;
  this.has_after = null;
  this.total_count = null;
  if (args) {
    if (args.has_before !== undefined && args.has_before !== null) {
      this.has_before = args.has_before;
    }
    if (args.has_after !== undefined && args.has_after !== null) {
      this.has_after = args.has_after;
    }
    if (args.total_count !== undefined && args.total_count !== null) {
      this.total_count = args.total_count;
    }
  }
};
BoundaryLimitPageInfo.prototype = {};
BoundaryLimitPageInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.has_before = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.has_after = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoundaryLimitPageInfo.prototype.write = function(output) {
  output.writeStructBegin('BoundaryLimitPageInfo');
  if (this.has_before !== null && this.has_before !== undefined) {
    output.writeFieldBegin('has_before', Thrift.Type.BOOL, 1);
    output.writeBool(this.has_before);
    output.writeFieldEnd();
  }
  if (this.has_after !== null && this.has_after !== undefined) {
    output.writeFieldBegin('has_after', Thrift.Type.BOOL, 2);
    output.writeBool(this.has_after);
    output.writeFieldEnd();
  }
  if (this.total_count !== null && this.total_count !== undefined) {
    output.writeFieldBegin('total_count', Thrift.Type.I32, 3);
    output.writeI32(this.total_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UtmParams = module.exports.UtmParams = function(args) {
  this.utm_source = null;
  this.utm_campaign = null;
  this.utm_content = null;
  this.utm_medium = null;
  if (args) {
    if (args.utm_source !== undefined && args.utm_source !== null) {
      this.utm_source = args.utm_source;
    }
    if (args.utm_campaign !== undefined && args.utm_campaign !== null) {
      this.utm_campaign = args.utm_campaign;
    }
    if (args.utm_content !== undefined && args.utm_content !== null) {
      this.utm_content = args.utm_content;
    }
    if (args.utm_medium !== undefined && args.utm_medium !== null) {
      this.utm_medium = args.utm_medium;
    }
  }
};
UtmParams.prototype = {};
UtmParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.utm_source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.utm_campaign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.utm_content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.utm_medium = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UtmParams.prototype.write = function(output) {
  output.writeStructBegin('UtmParams');
  if (this.utm_source !== null && this.utm_source !== undefined) {
    output.writeFieldBegin('utm_source', Thrift.Type.STRING, 1);
    output.writeString(this.utm_source);
    output.writeFieldEnd();
  }
  if (this.utm_campaign !== null && this.utm_campaign !== undefined) {
    output.writeFieldBegin('utm_campaign', Thrift.Type.STRING, 2);
    output.writeString(this.utm_campaign);
    output.writeFieldEnd();
  }
  if (this.utm_content !== null && this.utm_content !== undefined) {
    output.writeFieldBegin('utm_content', Thrift.Type.STRING, 3);
    output.writeString(this.utm_content);
    output.writeFieldEnd();
  }
  if (this.utm_medium !== null && this.utm_medium !== undefined) {
    output.writeFieldBegin('utm_medium', Thrift.Type.STRING, 4);
    output.writeString(this.utm_medium);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestContext = module.exports.RequestContext = function(args) {
  this.invitation_uid = null;
  this.share_uid = null;
  this.email_message_uid = null;
  this.install_deep_link = null;
  this.launched_url = null;
  this.utm_params = null;
  this.client_platform = null;
  this.client_ip_address = null;
  if (args) {
    if (args.invitation_uid !== undefined && args.invitation_uid !== null) {
      this.invitation_uid = args.invitation_uid;
    }
    if (args.share_uid !== undefined && args.share_uid !== null) {
      this.share_uid = args.share_uid;
    }
    if (args.email_message_uid !== undefined && args.email_message_uid !== null) {
      this.email_message_uid = args.email_message_uid;
    }
    if (args.install_deep_link !== undefined && args.install_deep_link !== null) {
      this.install_deep_link = args.install_deep_link;
    }
    if (args.launched_url !== undefined && args.launched_url !== null) {
      this.launched_url = args.launched_url;
    }
    if (args.utm_params !== undefined && args.utm_params !== null) {
      this.utm_params = new ttypes.UtmParams(args.utm_params);
    }
    if (args.client_platform !== undefined && args.client_platform !== null) {
      this.client_platform = args.client_platform;
    }
    if (args.client_ip_address !== undefined && args.client_ip_address !== null) {
      this.client_ip_address = args.client_ip_address;
    }
  }
};
RequestContext.prototype = {};
RequestContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.share_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email_message_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.install_deep_link = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.launched_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.utm_params = new ttypes.UtmParams();
        this.utm_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.client_platform = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.client_ip_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestContext.prototype.write = function(output) {
  output.writeStructBegin('RequestContext');
  if (this.invitation_uid !== null && this.invitation_uid !== undefined) {
    output.writeFieldBegin('invitation_uid', Thrift.Type.STRING, 1);
    output.writeString(this.invitation_uid);
    output.writeFieldEnd();
  }
  if (this.share_uid !== null && this.share_uid !== undefined) {
    output.writeFieldBegin('share_uid', Thrift.Type.STRING, 2);
    output.writeString(this.share_uid);
    output.writeFieldEnd();
  }
  if (this.email_message_uid !== null && this.email_message_uid !== undefined) {
    output.writeFieldBegin('email_message_uid', Thrift.Type.STRING, 3);
    output.writeString(this.email_message_uid);
    output.writeFieldEnd();
  }
  if (this.install_deep_link !== null && this.install_deep_link !== undefined) {
    output.writeFieldBegin('install_deep_link', Thrift.Type.STRING, 4);
    output.writeString(this.install_deep_link);
    output.writeFieldEnd();
  }
  if (this.launched_url !== null && this.launched_url !== undefined) {
    output.writeFieldBegin('launched_url', Thrift.Type.STRING, 5);
    output.writeString(this.launched_url);
    output.writeFieldEnd();
  }
  if (this.utm_params !== null && this.utm_params !== undefined) {
    output.writeFieldBegin('utm_params', Thrift.Type.STRUCT, 6);
    this.utm_params.write(output);
    output.writeFieldEnd();
  }
  if (this.client_platform !== null && this.client_platform !== undefined) {
    output.writeFieldBegin('client_platform', Thrift.Type.I32, 7);
    output.writeI32(this.client_platform);
    output.writeFieldEnd();
  }
  if (this.client_ip_address !== null && this.client_ip_address !== undefined) {
    output.writeFieldBegin('client_ip_address', Thrift.Type.STRING, 8);
    output.writeString(this.client_ip_address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestHeaders = module.exports.RequestHeaders = function(args) {
  this.entity = null;
  this.request_id = null;
  this.context = null;
  if (args) {
    if (args.entity !== undefined && args.entity !== null) {
      this.entity = new ttypes.Entity(args.entity);
    }
    if (args.request_id !== undefined && args.request_id !== null) {
      this.request_id = args.request_id;
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new ttypes.RequestContext(args.context);
    }
  }
};
RequestHeaders.prototype = {};
RequestHeaders.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.entity = new ttypes.Entity();
        this.entity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.request_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new ttypes.RequestContext();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestHeaders.prototype.write = function(output) {
  output.writeStructBegin('RequestHeaders');
  if (this.entity !== null && this.entity !== undefined) {
    output.writeFieldBegin('entity', Thrift.Type.STRUCT, 1);
    this.entity.write(output);
    output.writeFieldEnd();
  }
  if (this.request_id !== null && this.request_id !== undefined) {
    output.writeFieldBegin('request_id', Thrift.Type.STRING, 2);
    output.writeString(this.request_id);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 3);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ArgumentException = module.exports.ArgumentException = function(args) {
  Thrift.TException.call(this, "ArgumentException");
  this.name = "ArgumentException";
  this.message = null;
  this.path = null;
  this.code = null;
  this.exception_class = 0;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.exception_class !== undefined && args.exception_class !== null) {
      this.exception_class = args.exception_class;
    }
  }
};
Thrift.inherits(ArgumentException, Thrift.TException);
ArgumentException.prototype.name = 'ArgumentException';
ArgumentException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.exception_class = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArgumentException.prototype.write = function(output) {
  output.writeStructBegin('ArgumentException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 3);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.exception_class !== null && this.exception_class !== undefined) {
    output.writeFieldBegin('exception_class', Thrift.Type.I32, 4);
    output.writeI32(this.exception_class);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnauthorizedException = module.exports.UnauthorizedException = function(args) {
  Thrift.TException.call(this, "UnauthorizedException");
  this.name = "UnauthorizedException";
  this.message = null;
  this.exception_class = 0;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.exception_class !== undefined && args.exception_class !== null) {
      this.exception_class = args.exception_class;
    }
  }
};
Thrift.inherits(UnauthorizedException, Thrift.TException);
UnauthorizedException.prototype.name = 'UnauthorizedException';
UnauthorizedException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.exception_class = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnauthorizedException.prototype.write = function(output) {
  output.writeStructBegin('UnauthorizedException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.exception_class !== null && this.exception_class !== undefined) {
    output.writeFieldBegin('exception_class', Thrift.Type.I32, 2);
    output.writeI32(this.exception_class);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StateException = module.exports.StateException = function(args) {
  Thrift.TException.call(this, "StateException");
  this.name = "StateException";
  this.message = null;
  this.code = null;
  this.exception_class = 0;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.exception_class !== undefined && args.exception_class !== null) {
      this.exception_class = args.exception_class;
    }
  }
};
Thrift.inherits(StateException, Thrift.TException);
StateException.prototype.name = 'StateException';
StateException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.exception_class = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StateException.prototype.write = function(output) {
  output.writeStructBegin('StateException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.exception_class !== null && this.exception_class !== undefined) {
    output.writeFieldBegin('exception_class', Thrift.Type.I32, 3);
    output.writeI32(this.exception_class);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


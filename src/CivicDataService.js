//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var event_bus_ttypes = require('./event_bus_types');


var ttypes = require('./civic_data_types');
//HELPER FUNCTIONS AND STRUCTURES

var CivicDataService_get_bodies_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetBodiesRequest(args.request);
    }
  }
};
CivicDataService_get_bodies_args.prototype = {};
CivicDataService_get_bodies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetBodiesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_bodies_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_bodies_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_bodies_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedBodies(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_bodies_result.prototype = {};
CivicDataService_get_bodies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedBodies();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_bodies_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_bodies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_bodies_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetBodiesByIdentifiersRequest(args.request);
    }
  }
};
CivicDataService_get_bodies_by_identifiers_args.prototype = {};
CivicDataService_get_bodies_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetBodiesByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_bodies_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_bodies_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_bodies_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Bodies(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_bodies_by_identifiers_result.prototype = {};
CivicDataService_get_bodies_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Bodies();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_bodies_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_bodies_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_political_parties_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPoliticalPartiesRequest(args.request);
    }
  }
};
CivicDataService_get_political_parties_args.prototype = {};
CivicDataService_get_political_parties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPoliticalPartiesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_political_parties_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_political_parties_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_political_parties_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PoliticalParties(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_political_parties_result.prototype = {};
CivicDataService_get_political_parties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PoliticalParties();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_political_parties_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_political_parties_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_create_politician_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreatePoliticianRequest(args.request);
    }
  }
};
CivicDataService_create_politician_args.prototype = {};
CivicDataService_create_politician_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreatePoliticianRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_create_politician_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_create_politician_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_create_politician_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Politician(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
CivicDataService_create_politician_result.prototype = {};
CivicDataService_create_politician_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Politician();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_create_politician_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_create_politician_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_edit_politician_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.EditPoliticianRequest(args.request);
    }
  }
};
CivicDataService_edit_politician_args.prototype = {};
CivicDataService_edit_politician_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.EditPoliticianRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_edit_politician_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_edit_politician_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_edit_politician_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Politician(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
CivicDataService_edit_politician_result.prototype = {};
CivicDataService_edit_politician_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Politician();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_edit_politician_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_edit_politician_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_politicians_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPoliticiansRequest(args.request);
    }
  }
};
CivicDataService_get_politicians_args.prototype = {};
CivicDataService_get_politicians_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPoliticiansRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_politicians_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_politicians_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_politicians_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedPoliticians(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_politicians_result.prototype = {};
CivicDataService_get_politicians_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedPoliticians();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_politicians_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_politicians_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_politicians_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPoliticiansByIdentifiersRequest(args.request);
    }
  }
};
CivicDataService_get_politicians_by_identifiers_args.prototype = {};
CivicDataService_get_politicians_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPoliticiansByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_politicians_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_politicians_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_politicians_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Politicians(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_politicians_by_identifiers_result.prototype = {};
CivicDataService_get_politicians_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Politicians();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_politicians_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_politicians_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_create_politician_channel_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreatePoliticianChannelRequest(args.request);
    }
  }
};
CivicDataService_create_politician_channel_args.prototype = {};
CivicDataService_create_politician_channel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreatePoliticianChannelRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_create_politician_channel_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_create_politician_channel_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_create_politician_channel_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PoliticianChannel(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
CivicDataService_create_politician_channel_result.prototype = {};
CivicDataService_create_politician_channel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PoliticianChannel();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_create_politician_channel_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_create_politician_channel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_edit_politician_channel_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.EditPoliticianChannelRequest(args.request);
    }
  }
};
CivicDataService_edit_politician_channel_args.prototype = {};
CivicDataService_edit_politician_channel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.EditPoliticianChannelRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_edit_politician_channel_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_edit_politician_channel_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_edit_politician_channel_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PoliticianChannel(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
CivicDataService_edit_politician_channel_result.prototype = {};
CivicDataService_edit_politician_channel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PoliticianChannel();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_edit_politician_channel_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_edit_politician_channel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_delete_politician_channel_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.DeletePoliticianChannelRequest(args.request);
    }
  }
};
CivicDataService_delete_politician_channel_args.prototype = {};
CivicDataService_delete_politician_channel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DeletePoliticianChannelRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_delete_politician_channel_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_delete_politician_channel_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_delete_politician_channel_result = function(args) {
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
CivicDataService_delete_politician_channel_result.prototype = {};
CivicDataService_delete_politician_channel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_delete_politician_channel_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_delete_politician_channel_result');
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_politician_channels_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPoliticianChannelsRequest(args.request);
    }
  }
};
CivicDataService_get_politician_channels_args.prototype = {};
CivicDataService_get_politician_channels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPoliticianChannelsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_politician_channels_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_politician_channels_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_politician_channels_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PoliticianChannels(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_politician_channels_result.prototype = {};
CivicDataService_get_politician_channels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PoliticianChannels();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_politician_channels_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_politician_channels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_seats_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetSeatsByIdentifiersRequest(args.request);
    }
  }
};
CivicDataService_get_seats_by_identifiers_args.prototype = {};
CivicDataService_get_seats_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetSeatsByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_seats_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_seats_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_seats_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Seats(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_seats_by_identifiers_result.prototype = {};
CivicDataService_get_seats_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Seats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_seats_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_seats_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_seats_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetSeatsRequest(args.request);
    }
  }
};
CivicDataService_get_seats_args.prototype = {};
CivicDataService_get_seats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetSeatsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_seats_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_seats_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_seats_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedSeats(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_seats_result.prototype = {};
CivicDataService_get_seats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedSeats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_seats_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_seats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_district_entity_by_address_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.DistrictEntityByAddressRequest(args.request);
    }
  }
};
CivicDataService_district_entity_by_address_args.prototype = {};
CivicDataService_district_entity_by_address_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DistrictEntityByAddressRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_district_entity_by_address_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_district_entity_by_address_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_district_entity_by_address_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  this.civic_information_api_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args instanceof ttypes.CivicInformationApiException) {
    this.civic_information_api_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Districts(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
    if (args.civic_information_api_exception !== undefined && args.civic_information_api_exception !== null) {
      this.civic_information_api_exception = args.civic_information_api_exception;
    }
  }
};
CivicDataService_district_entity_by_address_result.prototype = {};
CivicDataService_district_entity_by_address_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Districts();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.civic_information_api_exception = new ttypes.CivicInformationApiException();
        this.civic_information_api_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_district_entity_by_address_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_district_entity_by_address_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.civic_information_api_exception !== null && this.civic_information_api_exception !== undefined) {
    output.writeFieldBegin('civic_information_api_exception', Thrift.Type.STRUCT, 3);
    this.civic_information_api_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_districts_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetDistrictsByIdentifiersRequest(args.request);
    }
  }
};
CivicDataService_get_districts_by_identifiers_args.prototype = {};
CivicDataService_get_districts_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetDistrictsByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_districts_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_districts_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_districts_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Districts(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_districts_by_identifiers_result.prototype = {};
CivicDataService_get_districts_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Districts();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_districts_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_districts_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_default_federal_district_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetDefaultFederalDistrictRequest(args.request);
    }
  }
};
CivicDataService_get_default_federal_district_args.prototype = {};
CivicDataService_get_default_federal_district_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetDefaultFederalDistrictRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_default_federal_district_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_default_federal_district_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_default_federal_district_result = function(args) {
  this.success = null;
  this.state_exception = null;
  if (args instanceof shared_ttypes.StateException) {
    this.state_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.District(args.success);
    }
    if (args.state_exception !== undefined && args.state_exception !== null) {
      this.state_exception = args.state_exception;
    }
  }
};
CivicDataService_get_default_federal_district_result.prototype = {};
CivicDataService_get_default_federal_district_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.District();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.state_exception = new shared_ttypes.StateException();
        this.state_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_default_federal_district_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_default_federal_district_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.state_exception !== null && this.state_exception !== undefined) {
    output.writeFieldBegin('state_exception', Thrift.Type.STRUCT, 1);
    this.state_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_candidacies_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetCandidaciesRequest(args.request);
    }
  }
};
CivicDataService_get_candidacies_args.prototype = {};
CivicDataService_get_candidacies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetCandidaciesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_candidacies_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_candidacies_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_candidacies_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedCandidacies(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_candidacies_result.prototype = {};
CivicDataService_get_candidacies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedCandidacies();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_candidacies_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_candidacies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_candidacies_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetCandidaciesByIdentifiersRequest(args.request);
    }
  }
};
CivicDataService_get_candidacies_by_identifiers_args.prototype = {};
CivicDataService_get_candidacies_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetCandidaciesByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_candidacies_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_candidacies_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_candidacies_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Candidacies(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_candidacies_by_identifiers_result.prototype = {};
CivicDataService_get_candidacies_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Candidacies();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_candidacies_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_candidacies_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_filter_candidacy_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.FilterCandidacyIdentifiersRequest(args.request);
    }
  }
};
CivicDataService_filter_candidacy_identifiers_args.prototype = {};
CivicDataService_filter_candidacy_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.FilterCandidacyIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_filter_candidacy_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_filter_candidacy_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_filter_candidacy_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CandidacyUniqueIdentifiers(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_filter_candidacy_identifiers_result.prototype = {};
CivicDataService_filter_candidacy_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CandidacyUniqueIdentifiers();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_filter_candidacy_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_filter_candidacy_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_served_terms_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetServedTermsByIdentifiersRequest(args.request);
    }
  }
};
CivicDataService_get_served_terms_by_identifiers_args.prototype = {};
CivicDataService_get_served_terms_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetServedTermsByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_served_terms_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_served_terms_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_served_terms_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ServedTerms(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_served_terms_by_identifiers_result.prototype = {};
CivicDataService_get_served_terms_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ServedTerms();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_served_terms_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_served_terms_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_served_terms_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetServedTermsRequest(args.request);
    }
  }
};
CivicDataService_get_served_terms_args.prototype = {};
CivicDataService_get_served_terms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetServedTermsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_served_terms_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_served_terms_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_served_terms_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedServedTerms(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_served_terms_result.prototype = {};
CivicDataService_get_served_terms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedServedTerms();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_served_terms_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_served_terms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_races_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetRacesByIdentifiersRequest(args.request);
    }
  }
};
CivicDataService_get_races_by_identifiers_args.prototype = {};
CivicDataService_get_races_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetRacesByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_races_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_races_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_races_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Races(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_races_by_identifiers_result.prototype = {};
CivicDataService_get_races_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Races();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_races_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_races_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_races_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetRacesRequest(args.request);
    }
  }
};
CivicDataService_get_races_args.prototype = {};
CivicDataService_get_races_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetRacesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_races_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_races_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_races_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedRaces(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_races_result.prototype = {};
CivicDataService_get_races_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedRaces();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_races_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_races_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_elections_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetElectionsByIdentifiersRequest(args.request);
    }
  }
};
CivicDataService_get_elections_by_identifiers_args.prototype = {};
CivicDataService_get_elections_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetElectionsByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_elections_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_elections_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_elections_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Elections(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_elections_by_identifiers_result.prototype = {};
CivicDataService_get_elections_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Elections();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_elections_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_elections_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_elections_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetElectionsRequest(args.request);
    }
  }
};
CivicDataService_get_elections_args.prototype = {};
CivicDataService_get_elections_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetElectionsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_elections_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_elections_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_elections_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedElections(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
CivicDataService_get_elections_result.prototype = {};
CivicDataService_get_elections_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedElections();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_elections_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_elections_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_districts_for_entity_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetDistrictsForEntityRequest(args.request);
    }
  }
};
CivicDataService_get_districts_for_entity_args.prototype = {};
CivicDataService_get_districts_for_entity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetDistrictsForEntityRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_districts_for_entity_args.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_districts_for_entity_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataService_get_districts_for_entity_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Districts(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
CivicDataService_get_districts_for_entity_result.prototype = {};
CivicDataService_get_districts_for_entity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Districts();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicDataService_get_districts_for_entity_result.prototype.write = function(output) {
  output.writeStructBegin('CivicDataService_get_districts_for_entity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicDataServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CivicDataServiceClient.prototype = {};
CivicDataServiceClient.prototype.seqid = function() { return this._seqid; };
CivicDataServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
CivicDataServiceClient.prototype.get_bodies = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_bodies(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_bodies(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_bodies = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_bodies', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_bodies_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_bodies = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_bodies_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_bodies failed: unknown result');
};
CivicDataServiceClient.prototype.get_bodies_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_bodies_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_bodies_by_identifiers(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_bodies_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_bodies_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_bodies_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_bodies_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_bodies_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_bodies_by_identifiers failed: unknown result');
};
CivicDataServiceClient.prototype.get_political_parties = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_political_parties(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_political_parties(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_political_parties = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_political_parties', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_political_parties_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_political_parties = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_political_parties_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_political_parties failed: unknown result');
};
CivicDataServiceClient.prototype.create_politician = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_politician(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_politician(headers, request);
  }
};

CivicDataServiceClient.prototype.send_create_politician = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_politician', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_create_politician_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_create_politician = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_create_politician_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_politician failed: unknown result');
};
CivicDataServiceClient.prototype.edit_politician = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_edit_politician(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_edit_politician(headers, request);
  }
};

CivicDataServiceClient.prototype.send_edit_politician = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('edit_politician', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_edit_politician_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_edit_politician = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_edit_politician_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('edit_politician failed: unknown result');
};
CivicDataServiceClient.prototype.get_politicians = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_politicians(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_politicians(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_politicians = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_politicians', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_politicians_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_politicians = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_politicians_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_politicians failed: unknown result');
};
CivicDataServiceClient.prototype.get_politicians_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_politicians_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_politicians_by_identifiers(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_politicians_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_politicians_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_politicians_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_politicians_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_politicians_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_politicians_by_identifiers failed: unknown result');
};
CivicDataServiceClient.prototype.create_politician_channel = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_politician_channel(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_politician_channel(headers, request);
  }
};

CivicDataServiceClient.prototype.send_create_politician_channel = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_politician_channel', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_create_politician_channel_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_create_politician_channel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_create_politician_channel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_politician_channel failed: unknown result');
};
CivicDataServiceClient.prototype.edit_politician_channel = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_edit_politician_channel(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_edit_politician_channel(headers, request);
  }
};

CivicDataServiceClient.prototype.send_edit_politician_channel = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('edit_politician_channel', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_edit_politician_channel_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_edit_politician_channel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_edit_politician_channel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('edit_politician_channel failed: unknown result');
};
CivicDataServiceClient.prototype.delete_politician_channel = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_politician_channel(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_politician_channel(headers, request);
  }
};

CivicDataServiceClient.prototype.send_delete_politician_channel = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_politician_channel', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_delete_politician_channel_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_delete_politician_channel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_delete_politician_channel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  callback(null);
};
CivicDataServiceClient.prototype.get_politician_channels = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_politician_channels(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_politician_channels(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_politician_channels = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_politician_channels', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_politician_channels_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_politician_channels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_politician_channels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_politician_channels failed: unknown result');
};
CivicDataServiceClient.prototype.get_seats_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_seats_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_seats_by_identifiers(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_seats_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_seats_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_seats_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_seats_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_seats_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_seats_by_identifiers failed: unknown result');
};
CivicDataServiceClient.prototype.get_seats = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_seats(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_seats(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_seats = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_seats', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_seats_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_seats = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_seats_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_seats failed: unknown result');
};
CivicDataServiceClient.prototype.district_entity_by_address = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_district_entity_by_address(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_district_entity_by_address(headers, request);
  }
};

CivicDataServiceClient.prototype.send_district_entity_by_address = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('district_entity_by_address', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_district_entity_by_address_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_district_entity_by_address = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_district_entity_by_address_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.civic_information_api_exception) {
    return callback(result.civic_information_api_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('district_entity_by_address failed: unknown result');
};
CivicDataServiceClient.prototype.get_districts_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_districts_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_districts_by_identifiers(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_districts_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_districts_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_districts_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_districts_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_districts_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_districts_by_identifiers failed: unknown result');
};
CivicDataServiceClient.prototype.get_default_federal_district = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_default_federal_district(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_default_federal_district(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_default_federal_district = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_default_federal_district', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_default_federal_district_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_default_federal_district = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_default_federal_district_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.state_exception) {
    return callback(result.state_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_default_federal_district failed: unknown result');
};
CivicDataServiceClient.prototype.get_candidacies = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_candidacies(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_candidacies(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_candidacies = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_candidacies', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_candidacies_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_candidacies = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_candidacies_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_candidacies failed: unknown result');
};
CivicDataServiceClient.prototype.get_candidacies_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_candidacies_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_candidacies_by_identifiers(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_candidacies_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_candidacies_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_candidacies_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_candidacies_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_candidacies_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_candidacies_by_identifiers failed: unknown result');
};
CivicDataServiceClient.prototype.filter_candidacy_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_filter_candidacy_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_filter_candidacy_identifiers(headers, request);
  }
};

CivicDataServiceClient.prototype.send_filter_candidacy_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('filter_candidacy_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_filter_candidacy_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_filter_candidacy_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_filter_candidacy_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('filter_candidacy_identifiers failed: unknown result');
};
CivicDataServiceClient.prototype.get_served_terms_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_served_terms_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_served_terms_by_identifiers(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_served_terms_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_served_terms_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_served_terms_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_served_terms_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_served_terms_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_served_terms_by_identifiers failed: unknown result');
};
CivicDataServiceClient.prototype.get_served_terms = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_served_terms(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_served_terms(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_served_terms = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_served_terms', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_served_terms_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_served_terms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_served_terms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_served_terms failed: unknown result');
};
CivicDataServiceClient.prototype.get_races_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_races_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_races_by_identifiers(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_races_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_races_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_races_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_races_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_races_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_races_by_identifiers failed: unknown result');
};
CivicDataServiceClient.prototype.get_races = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_races(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_races(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_races = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_races', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_races_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_races = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_races_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_races failed: unknown result');
};
CivicDataServiceClient.prototype.get_elections_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_elections_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_elections_by_identifiers(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_elections_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_elections_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_elections_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_elections_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_elections_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_elections_by_identifiers failed: unknown result');
};
CivicDataServiceClient.prototype.get_elections = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_elections(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_elections(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_elections = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_elections', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_elections_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_elections = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_elections_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_elections failed: unknown result');
};
CivicDataServiceClient.prototype.get_districts_for_entity = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_districts_for_entity(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_districts_for_entity(headers, request);
  }
};

CivicDataServiceClient.prototype.send_get_districts_for_entity = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_districts_for_entity', Thrift.MessageType.CALL, this.seqid());
  var args = new CivicDataService_get_districts_for_entity_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CivicDataServiceClient.prototype.recv_get_districts_for_entity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CivicDataService_get_districts_for_entity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_districts_for_entity failed: unknown result');
};
var CivicDataServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
CivicDataServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
CivicDataServiceProcessor.prototype.process_get_bodies = function(seqid, input, output) {
  var args = new CivicDataService_get_bodies_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_bodies.length === 2) {
    Q.fcall(this._handler.get_bodies, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_bodies_result({success: result});
        output.writeMessageBegin("get_bodies", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_bodies_result(err);
          output.writeMessageBegin("get_bodies", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_bodies", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_bodies(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_bodies_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_bodies", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_bodies", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_bodies_by_identifiers = function(seqid, input, output) {
  var args = new CivicDataService_get_bodies_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_bodies_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_bodies_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_bodies_by_identifiers_result({success: result});
        output.writeMessageBegin("get_bodies_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_bodies_by_identifiers_result(err);
          output.writeMessageBegin("get_bodies_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_bodies_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_bodies_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_bodies_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_bodies_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_bodies_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_political_parties = function(seqid, input, output) {
  var args = new CivicDataService_get_political_parties_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_political_parties.length === 2) {
    Q.fcall(this._handler.get_political_parties, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_political_parties_result({success: result});
        output.writeMessageBegin("get_political_parties", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_political_parties_result(err);
          output.writeMessageBegin("get_political_parties", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_political_parties", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_political_parties(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_political_parties_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_political_parties", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_political_parties", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_create_politician = function(seqid, input, output) {
  var args = new CivicDataService_create_politician_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_politician.length === 2) {
    Q.fcall(this._handler.create_politician, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_create_politician_result({success: result});
        output.writeMessageBegin("create_politician", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new CivicDataService_create_politician_result(err);
          output.writeMessageBegin("create_politician", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_politician", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_politician(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new CivicDataService_create_politician_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_politician", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_politician", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_edit_politician = function(seqid, input, output) {
  var args = new CivicDataService_edit_politician_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.edit_politician.length === 2) {
    Q.fcall(this._handler.edit_politician, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_edit_politician_result({success: result});
        output.writeMessageBegin("edit_politician", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new CivicDataService_edit_politician_result(err);
          output.writeMessageBegin("edit_politician", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("edit_politician", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.edit_politician(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new CivicDataService_edit_politician_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("edit_politician", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("edit_politician", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_politicians = function(seqid, input, output) {
  var args = new CivicDataService_get_politicians_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_politicians.length === 2) {
    Q.fcall(this._handler.get_politicians, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_politicians_result({success: result});
        output.writeMessageBegin("get_politicians", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_politicians_result(err);
          output.writeMessageBegin("get_politicians", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_politicians", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_politicians(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_politicians_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_politicians", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_politicians", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_politicians_by_identifiers = function(seqid, input, output) {
  var args = new CivicDataService_get_politicians_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_politicians_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_politicians_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_politicians_by_identifiers_result({success: result});
        output.writeMessageBegin("get_politicians_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_politicians_by_identifiers_result(err);
          output.writeMessageBegin("get_politicians_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_politicians_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_politicians_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_politicians_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_politicians_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_politicians_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_create_politician_channel = function(seqid, input, output) {
  var args = new CivicDataService_create_politician_channel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_politician_channel.length === 2) {
    Q.fcall(this._handler.create_politician_channel, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_create_politician_channel_result({success: result});
        output.writeMessageBegin("create_politician_channel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new CivicDataService_create_politician_channel_result(err);
          output.writeMessageBegin("create_politician_channel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_politician_channel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_politician_channel(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new CivicDataService_create_politician_channel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_politician_channel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_politician_channel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_edit_politician_channel = function(seqid, input, output) {
  var args = new CivicDataService_edit_politician_channel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.edit_politician_channel.length === 2) {
    Q.fcall(this._handler.edit_politician_channel, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_edit_politician_channel_result({success: result});
        output.writeMessageBegin("edit_politician_channel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new CivicDataService_edit_politician_channel_result(err);
          output.writeMessageBegin("edit_politician_channel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("edit_politician_channel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.edit_politician_channel(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new CivicDataService_edit_politician_channel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("edit_politician_channel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("edit_politician_channel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_delete_politician_channel = function(seqid, input, output) {
  var args = new CivicDataService_delete_politician_channel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_politician_channel.length === 2) {
    Q.fcall(this._handler.delete_politician_channel, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_delete_politician_channel_result({success: result});
        output.writeMessageBegin("delete_politician_channel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new CivicDataService_delete_politician_channel_result(err);
          output.writeMessageBegin("delete_politician_channel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_politician_channel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_politician_channel(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new CivicDataService_delete_politician_channel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_politician_channel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_politician_channel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_politician_channels = function(seqid, input, output) {
  var args = new CivicDataService_get_politician_channels_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_politician_channels.length === 2) {
    Q.fcall(this._handler.get_politician_channels, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_politician_channels_result({success: result});
        output.writeMessageBegin("get_politician_channels", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_politician_channels_result(err);
          output.writeMessageBegin("get_politician_channels", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_politician_channels", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_politician_channels(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_politician_channels_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_politician_channels", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_politician_channels", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_seats_by_identifiers = function(seqid, input, output) {
  var args = new CivicDataService_get_seats_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_seats_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_seats_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_seats_by_identifiers_result({success: result});
        output.writeMessageBegin("get_seats_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_seats_by_identifiers_result(err);
          output.writeMessageBegin("get_seats_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_seats_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_seats_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_seats_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_seats_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_seats_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_seats = function(seqid, input, output) {
  var args = new CivicDataService_get_seats_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_seats.length === 2) {
    Q.fcall(this._handler.get_seats, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_seats_result({success: result});
        output.writeMessageBegin("get_seats", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_seats_result(err);
          output.writeMessageBegin("get_seats", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_seats", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_seats(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_seats_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_seats", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_seats", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_district_entity_by_address = function(seqid, input, output) {
  var args = new CivicDataService_district_entity_by_address_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.district_entity_by_address.length === 2) {
    Q.fcall(this._handler.district_entity_by_address, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_district_entity_by_address_result({success: result});
        output.writeMessageBegin("district_entity_by_address", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException || err instanceof ttypes.CivicInformationApiException) {
          result = new CivicDataService_district_entity_by_address_result(err);
          output.writeMessageBegin("district_entity_by_address", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("district_entity_by_address", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.district_entity_by_address(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException || err instanceof ttypes.CivicInformationApiException) {
        result_obj = new CivicDataService_district_entity_by_address_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("district_entity_by_address", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("district_entity_by_address", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_districts_by_identifiers = function(seqid, input, output) {
  var args = new CivicDataService_get_districts_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_districts_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_districts_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_districts_by_identifiers_result({success: result});
        output.writeMessageBegin("get_districts_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_districts_by_identifiers_result(err);
          output.writeMessageBegin("get_districts_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_districts_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_districts_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_districts_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_districts_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_districts_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_default_federal_district = function(seqid, input, output) {
  var args = new CivicDataService_get_default_federal_district_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_default_federal_district.length === 2) {
    Q.fcall(this._handler.get_default_federal_district, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_default_federal_district_result({success: result});
        output.writeMessageBegin("get_default_federal_district", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.StateException) {
          result = new CivicDataService_get_default_federal_district_result(err);
          output.writeMessageBegin("get_default_federal_district", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_default_federal_district", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_default_federal_district(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.StateException) {
        result_obj = new CivicDataService_get_default_federal_district_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_default_federal_district", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_default_federal_district", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_candidacies = function(seqid, input, output) {
  var args = new CivicDataService_get_candidacies_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_candidacies.length === 2) {
    Q.fcall(this._handler.get_candidacies, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_candidacies_result({success: result});
        output.writeMessageBegin("get_candidacies", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_candidacies_result(err);
          output.writeMessageBegin("get_candidacies", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_candidacies", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_candidacies(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_candidacies_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_candidacies", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_candidacies", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_candidacies_by_identifiers = function(seqid, input, output) {
  var args = new CivicDataService_get_candidacies_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_candidacies_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_candidacies_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_candidacies_by_identifiers_result({success: result});
        output.writeMessageBegin("get_candidacies_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_candidacies_by_identifiers_result(err);
          output.writeMessageBegin("get_candidacies_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_candidacies_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_candidacies_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_candidacies_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_candidacies_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_candidacies_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_filter_candidacy_identifiers = function(seqid, input, output) {
  var args = new CivicDataService_filter_candidacy_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.filter_candidacy_identifiers.length === 2) {
    Q.fcall(this._handler.filter_candidacy_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_filter_candidacy_identifiers_result({success: result});
        output.writeMessageBegin("filter_candidacy_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_filter_candidacy_identifiers_result(err);
          output.writeMessageBegin("filter_candidacy_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("filter_candidacy_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.filter_candidacy_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_filter_candidacy_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("filter_candidacy_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("filter_candidacy_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_served_terms_by_identifiers = function(seqid, input, output) {
  var args = new CivicDataService_get_served_terms_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_served_terms_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_served_terms_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_served_terms_by_identifiers_result({success: result});
        output.writeMessageBegin("get_served_terms_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_served_terms_by_identifiers_result(err);
          output.writeMessageBegin("get_served_terms_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_served_terms_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_served_terms_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_served_terms_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_served_terms_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_served_terms_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_served_terms = function(seqid, input, output) {
  var args = new CivicDataService_get_served_terms_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_served_terms.length === 2) {
    Q.fcall(this._handler.get_served_terms, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_served_terms_result({success: result});
        output.writeMessageBegin("get_served_terms", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_served_terms_result(err);
          output.writeMessageBegin("get_served_terms", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_served_terms", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_served_terms(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_served_terms_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_served_terms", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_served_terms", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_races_by_identifiers = function(seqid, input, output) {
  var args = new CivicDataService_get_races_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_races_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_races_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_races_by_identifiers_result({success: result});
        output.writeMessageBegin("get_races_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_races_by_identifiers_result(err);
          output.writeMessageBegin("get_races_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_races_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_races_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_races_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_races_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_races_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_races = function(seqid, input, output) {
  var args = new CivicDataService_get_races_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_races.length === 2) {
    Q.fcall(this._handler.get_races, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_races_result({success: result});
        output.writeMessageBegin("get_races", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_races_result(err);
          output.writeMessageBegin("get_races", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_races", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_races(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_races_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_races", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_races", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_elections_by_identifiers = function(seqid, input, output) {
  var args = new CivicDataService_get_elections_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_elections_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_elections_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_elections_by_identifiers_result({success: result});
        output.writeMessageBegin("get_elections_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_elections_by_identifiers_result(err);
          output.writeMessageBegin("get_elections_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_elections_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_elections_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_elections_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_elections_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_elections_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_elections = function(seqid, input, output) {
  var args = new CivicDataService_get_elections_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_elections.length === 2) {
    Q.fcall(this._handler.get_elections, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_elections_result({success: result});
        output.writeMessageBegin("get_elections", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new CivicDataService_get_elections_result(err);
          output.writeMessageBegin("get_elections", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_elections", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_elections(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new CivicDataService_get_elections_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_elections", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_elections", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CivicDataServiceProcessor.prototype.process_get_districts_for_entity = function(seqid, input, output) {
  var args = new CivicDataService_get_districts_for_entity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_districts_for_entity.length === 2) {
    Q.fcall(this._handler.get_districts_for_entity, args.headers, args.request)
      .then(function(result) {
        var result_obj = new CivicDataService_get_districts_for_entity_result({success: result});
        output.writeMessageBegin("get_districts_for_entity", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new CivicDataService_get_districts_for_entity_result(err);
          output.writeMessageBegin("get_districts_for_entity", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_districts_for_entity", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_districts_for_entity(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new CivicDataService_get_districts_for_entity_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_districts_for_entity", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_districts_for_entity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

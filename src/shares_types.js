//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var share_ttypes = require('./share_types');
var eb_shared_ttypes = require('./eb_shared_types');


var ttypes = module.exports = {};
var ShareChanged = module.exports.ShareChanged = function(args) {
  this.change_type = null;
  this.changed_at = null;
  this.share = null;
  this.share_uid = null;
  if (args) {
    if (args.change_type !== undefined && args.change_type !== null) {
      this.change_type = args.change_type;
    }
    if (args.changed_at !== undefined && args.changed_at !== null) {
      this.changed_at = args.changed_at;
    }
    if (args.share !== undefined && args.share !== null) {
      this.share = new share_ttypes.Share(args.share);
    }
    if (args.share_uid !== undefined && args.share_uid !== null) {
      this.share_uid = args.share_uid;
    }
  }
};
ShareChanged.prototype = {};
ShareChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.change_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.changed_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.share = new share_ttypes.Share();
        this.share.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.share_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareChanged.prototype.write = function(output) {
  output.writeStructBegin('ShareChanged');
  if (this.change_type !== null && this.change_type !== undefined) {
    output.writeFieldBegin('change_type', Thrift.Type.I32, 1);
    output.writeI32(this.change_type);
    output.writeFieldEnd();
  }
  if (this.changed_at !== null && this.changed_at !== undefined) {
    output.writeFieldBegin('changed_at', Thrift.Type.STRING, 2);
    output.writeString(this.changed_at);
    output.writeFieldEnd();
  }
  if (this.share !== null && this.share !== undefined) {
    output.writeFieldBegin('share', Thrift.Type.STRUCT, 3);
    this.share.write(output);
    output.writeFieldEnd();
  }
  if (this.share_uid !== null && this.share_uid !== undefined) {
    output.writeFieldBegin('share_uid', Thrift.Type.STRING, 4);
    output.writeString(this.share_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShareConversionChanged = module.exports.ShareConversionChanged = function(args) {
  this.change_type = null;
  this.changed_at = null;
  this.share_conversion = null;
  this.share_conversion_uid = null;
  if (args) {
    if (args.change_type !== undefined && args.change_type !== null) {
      this.change_type = args.change_type;
    }
    if (args.changed_at !== undefined && args.changed_at !== null) {
      this.changed_at = args.changed_at;
    }
    if (args.share_conversion !== undefined && args.share_conversion !== null) {
      this.share_conversion = new share_ttypes.ShareConversion(args.share_conversion);
    }
    if (args.share_conversion_uid !== undefined && args.share_conversion_uid !== null) {
      this.share_conversion_uid = args.share_conversion_uid;
    }
  }
};
ShareConversionChanged.prototype = {};
ShareConversionChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.change_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.changed_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.share_conversion = new share_ttypes.ShareConversion();
        this.share_conversion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.share_conversion_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareConversionChanged.prototype.write = function(output) {
  output.writeStructBegin('ShareConversionChanged');
  if (this.change_type !== null && this.change_type !== undefined) {
    output.writeFieldBegin('change_type', Thrift.Type.I32, 1);
    output.writeI32(this.change_type);
    output.writeFieldEnd();
  }
  if (this.changed_at !== null && this.changed_at !== undefined) {
    output.writeFieldBegin('changed_at', Thrift.Type.STRING, 2);
    output.writeString(this.changed_at);
    output.writeFieldEnd();
  }
  if (this.share_conversion !== null && this.share_conversion !== undefined) {
    output.writeFieldBegin('share_conversion', Thrift.Type.STRUCT, 3);
    this.share_conversion.write(output);
    output.writeFieldEnd();
  }
  if (this.share_conversion_uid !== null && this.share_conversion_uid !== undefined) {
    output.writeFieldBegin('share_conversion_uid', Thrift.Type.STRING, 4);
    output.writeString(this.share_conversion_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


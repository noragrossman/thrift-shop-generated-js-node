//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var share_ttypes = require('./share_types');
var device_ttypes = require('./device_types');
var twilio_ttypes = require('./twilio_types');
var invitation_ttypes = require('./invitation_types');
var event_bus_ttypes = require('./event_bus_types');
var group_shared_ttypes = require('./group_shared_types');


var ttypes = module.exports = {};
ttypes.CreateGroupMembershipExceptionCode = {
  'INVITATION_ALREADY_DECLINED' : 1,
  'INVITATION_EXPIRED' : 2,
  'INVITATION_DEACTIVATED' : 3,
  'INVITATION_ALREADY_ACCEPTED' : 4,
  'GROUP_FULL' : 6
};
ttypes.DeleteGroupMembershipExceptionCode = {
  'LEADER_CANNOT_BE_DELETED' : 1
};
var GetTwilioChatAccessTokenRequest = module.exports.GetTwilioChatAccessTokenRequest = function(args) {
  this.entity_uuid = null;
  this.twilio_device_id = null;
  this.push_provider_type = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.twilio_device_id !== undefined && args.twilio_device_id !== null) {
      this.twilio_device_id = args.twilio_device_id;
    }
    if (args.push_provider_type !== undefined && args.push_provider_type !== null) {
      this.push_provider_type = args.push_provider_type;
    }
  }
};
GetTwilioChatAccessTokenRequest.prototype = {};
GetTwilioChatAccessTokenRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.twilio_device_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.push_provider_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTwilioChatAccessTokenRequest.prototype.write = function(output) {
  output.writeStructBegin('GetTwilioChatAccessTokenRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.twilio_device_id !== null && this.twilio_device_id !== undefined) {
    output.writeFieldBegin('twilio_device_id', Thrift.Type.STRING, 2);
    output.writeString(this.twilio_device_id);
    output.writeFieldEnd();
  }
  if (this.push_provider_type !== null && this.push_provider_type !== undefined) {
    output.writeFieldBegin('push_provider_type', Thrift.Type.I32, 3);
    output.writeI32(this.push_provider_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Group = module.exports.Group = function(args) {
  this.uid = null;
  this.name = null;
  this.mission = null;
  this.image = null;
  this.leader_entity_uuid = null;
  this.max_group_size = null;
  this.twilio_chat_channel_sid = null;
  this.invitation_prefill = null;
  this.created_at = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.mission !== undefined && args.mission !== null) {
      this.mission = args.mission;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.leader_entity_uuid !== undefined && args.leader_entity_uuid !== null) {
      this.leader_entity_uuid = args.leader_entity_uuid;
    }
    if (args.max_group_size !== undefined && args.max_group_size !== null) {
      this.max_group_size = args.max_group_size;
    }
    if (args.twilio_chat_channel_sid !== undefined && args.twilio_chat_channel_sid !== null) {
      this.twilio_chat_channel_sid = args.twilio_chat_channel_sid;
    }
    if (args.invitation_prefill !== undefined && args.invitation_prefill !== null) {
      this.invitation_prefill = args.invitation_prefill;
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    }
  }
};
Group.prototype = {};
Group.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mission = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.leader_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.max_group_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.twilio_chat_channel_sid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_prefill = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Group.prototype.write = function(output) {
  output.writeStructBegin('Group');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.mission !== null && this.mission !== undefined) {
    output.writeFieldBegin('mission', Thrift.Type.STRING, 3);
    output.writeString(this.mission);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 4);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.leader_entity_uuid !== null && this.leader_entity_uuid !== undefined) {
    output.writeFieldBegin('leader_entity_uuid', Thrift.Type.STRING, 5);
    output.writeString(this.leader_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.max_group_size !== null && this.max_group_size !== undefined) {
    output.writeFieldBegin('max_group_size', Thrift.Type.I32, 6);
    output.writeI32(this.max_group_size);
    output.writeFieldEnd();
  }
  if (this.twilio_chat_channel_sid !== null && this.twilio_chat_channel_sid !== undefined) {
    output.writeFieldBegin('twilio_chat_channel_sid', Thrift.Type.STRING, 7);
    output.writeString(this.twilio_chat_channel_sid);
    output.writeFieldEnd();
  }
  if (this.invitation_prefill !== null && this.invitation_prefill !== undefined) {
    output.writeFieldBegin('invitation_prefill', Thrift.Type.STRING, 8);
    output.writeString(this.invitation_prefill);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 9);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Groups = module.exports.Groups = function(args) {
  this.groups = null;
  if (args) {
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [ttypes.Group]);
    }
  }
};
Groups.prototype = {};
Groups.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.groups = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Group();
          elem6.read(input);
          this.groups.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Groups.prototype.write = function(output) {
  output.writeStructBegin('Groups');
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter7 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter7))
      {
        iter7 = this.groups[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateGroupRequest = module.exports.CreateGroupRequest = function(args) {
  this.name = null;
  this.mission = null;
  this.image = null;
  this.leader_entity_uuid = null;
  this.leader_first_name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.mission !== undefined && args.mission !== null) {
      this.mission = args.mission;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.leader_entity_uuid !== undefined && args.leader_entity_uuid !== null) {
      this.leader_entity_uuid = args.leader_entity_uuid;
    }
    if (args.leader_first_name !== undefined && args.leader_first_name !== null) {
      this.leader_first_name = args.leader_first_name;
    }
  }
};
CreateGroupRequest.prototype = {};
CreateGroupRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mission = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.leader_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.leader_first_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateGroupRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateGroupRequest');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.mission !== null && this.mission !== undefined) {
    output.writeFieldBegin('mission', Thrift.Type.STRING, 2);
    output.writeString(this.mission);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 3);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.leader_entity_uuid !== null && this.leader_entity_uuid !== undefined) {
    output.writeFieldBegin('leader_entity_uuid', Thrift.Type.STRING, 4);
    output.writeString(this.leader_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.leader_first_name !== null && this.leader_first_name !== undefined) {
    output.writeFieldBegin('leader_first_name', Thrift.Type.STRING, 5);
    output.writeString(this.leader_first_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EditGroupRequest = module.exports.EditGroupRequest = function(args) {
  this.uid = null;
  this.name = null;
  this.mission = null;
  this.image = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.mission !== undefined && args.mission !== null) {
      this.mission = args.mission;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
  }
};
EditGroupRequest.prototype = {};
EditGroupRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mission = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditGroupRequest.prototype.write = function(output) {
  output.writeStructBegin('EditGroupRequest');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.mission !== null && this.mission !== undefined) {
    output.writeFieldBegin('mission', Thrift.Type.STRING, 3);
    output.writeString(this.mission);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 4);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteGroupMembershipRequest = module.exports.DeleteGroupMembershipRequest = function(args) {
  this.group_membership_uid = null;
  if (args) {
    if (args.group_membership_uid !== undefined && args.group_membership_uid !== null) {
      this.group_membership_uid = args.group_membership_uid;
    }
  }
};
DeleteGroupMembershipRequest.prototype = {};
DeleteGroupMembershipRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_membership_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteGroupMembershipRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteGroupMembershipRequest');
  if (this.group_membership_uid !== null && this.group_membership_uid !== undefined) {
    output.writeFieldBegin('group_membership_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_membership_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupMembershipRecruitmentAttempt = module.exports.GroupMembershipRecruitmentAttempt = function(args) {
  this.invitation = null;
  this.share = null;
  if (args) {
    if (args.invitation !== undefined && args.invitation !== null) {
      this.invitation = new invitation_ttypes.Invitation(args.invitation);
    }
    if (args.share !== undefined && args.share !== null) {
      this.share = new share_ttypes.Share(args.share);
    }
  }
};
GroupMembershipRecruitmentAttempt.prototype = {};
GroupMembershipRecruitmentAttempt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitation = new invitation_ttypes.Invitation();
        this.invitation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.share = new share_ttypes.Share();
        this.share.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupMembershipRecruitmentAttempt.prototype.write = function(output) {
  output.writeStructBegin('GroupMembershipRecruitmentAttempt');
  if (this.invitation !== null && this.invitation !== undefined) {
    output.writeFieldBegin('invitation', Thrift.Type.STRUCT, 1);
    this.invitation.write(output);
    output.writeFieldEnd();
  }
  if (this.share !== null && this.share !== undefined) {
    output.writeFieldBegin('share', Thrift.Type.STRUCT, 2);
    this.share.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupMembership = module.exports.GroupMembership = function(args) {
  this.uid = null;
  this.group_uid = null;
  this.entity_uuid = null;
  this.enabled = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
  }
};
GroupMembership.prototype = {};
GroupMembership.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupMembership.prototype.write = function(output) {
  output.writeStructBegin('GroupMembership');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 2);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EnabledEntityGroupIdentifier = module.exports.EnabledEntityGroupIdentifier = function(args) {
  this.entity_uuid = null;
  this.group_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
  }
};
EnabledEntityGroupIdentifier.prototype = {};
EnabledEntityGroupIdentifier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnabledEntityGroupIdentifier.prototype.write = function(output) {
  output.writeStructBegin('EnabledEntityGroupIdentifier');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 2);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityGroupIdentifier = module.exports.EntityGroupIdentifier = function(args) {
  this.entity_uuid = null;
  this.group_uid = null;
  this.enabled = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
  }
};
EntityGroupIdentifier.prototype = {};
EntityGroupIdentifier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityGroupIdentifier.prototype.write = function(output) {
  output.writeStructBegin('EntityGroupIdentifier');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 2);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupMemberships = module.exports.GroupMemberships = function(args) {
  this.group_memberships = null;
  if (args) {
    if (args.group_memberships !== undefined && args.group_memberships !== null) {
      this.group_memberships = Thrift.copyList(args.group_memberships, [ttypes.GroupMembership]);
    }
  }
};
GroupMemberships.prototype = {};
GroupMemberships.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.group_memberships = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.GroupMembership();
          elem14.read(input);
          this.group_memberships.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupMemberships.prototype.write = function(output) {
  output.writeStructBegin('GroupMemberships');
  if (this.group_memberships !== null && this.group_memberships !== undefined) {
    output.writeFieldBegin('group_memberships', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.group_memberships.length);
    for (var iter15 in this.group_memberships)
    {
      if (this.group_memberships.hasOwnProperty(iter15))
      {
        iter15 = this.group_memberships[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupMembershipUniqueIdentifiers = module.exports.GroupMembershipUniqueIdentifiers = function(args) {
  this.uids = null;
  this.enabled_entity_group_identifiers = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
    if (args.enabled_entity_group_identifiers !== undefined && args.enabled_entity_group_identifiers !== null) {
      this.enabled_entity_group_identifiers = Thrift.copyList(args.enabled_entity_group_identifiers, [ttypes.EnabledEntityGroupIdentifier]);
    }
  }
};
GroupMembershipUniqueIdentifiers.prototype = {};
GroupMembershipUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.uids = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.uids.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.enabled_entity_group_identifiers = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new ttypes.EnabledEntityGroupIdentifier();
          elem29.read(input);
          this.enabled_entity_group_identifiers.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupMembershipUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('GroupMembershipUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter30 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter30))
      {
        iter30 = this.uids[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.enabled_entity_group_identifiers !== null && this.enabled_entity_group_identifiers !== undefined) {
    output.writeFieldBegin('enabled_entity_group_identifiers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.enabled_entity_group_identifiers.length);
    for (var iter31 in this.enabled_entity_group_identifiers)
    {
      if (this.enabled_entity_group_identifiers.hasOwnProperty(iter31))
      {
        iter31 = this.enabled_entity_group_identifiers[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupMembershipFilterIdentifiers = module.exports.GroupMembershipFilterIdentifiers = function(args) {
  this.uids = null;
  this.entity_group_identifiers = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
    if (args.entity_group_identifiers !== undefined && args.entity_group_identifiers !== null) {
      this.entity_group_identifiers = Thrift.copyList(args.entity_group_identifiers, [ttypes.EntityGroupIdentifier]);
    }
  }
};
GroupMembershipFilterIdentifiers.prototype = {};
GroupMembershipFilterIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.uids = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString();
          this.uids.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.entity_group_identifiers = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.EntityGroupIdentifier();
          elem45.read(input);
          this.entity_group_identifiers.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupMembershipFilterIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('GroupMembershipFilterIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter46 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter46))
      {
        iter46 = this.uids[iter46];
        output.writeString(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entity_group_identifiers !== null && this.entity_group_identifiers !== undefined) {
    output.writeFieldBegin('entity_group_identifiers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.entity_group_identifiers.length);
    for (var iter47 in this.entity_group_identifiers)
    {
      if (this.entity_group_identifiers.hasOwnProperty(iter47))
      {
        iter47 = this.entity_group_identifiers[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateGroupMembershipRequest = module.exports.CreateGroupMembershipRequest = function(args) {
  this.entity_uuid = null;
  this.group_uid = null;
  this.group_membership_recruitment_attempt = null;
  this.member_first_name = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.group_membership_recruitment_attempt !== undefined && args.group_membership_recruitment_attempt !== null) {
      this.group_membership_recruitment_attempt = new ttypes.GroupMembershipRecruitmentAttempt(args.group_membership_recruitment_attempt);
    }
    if (args.member_first_name !== undefined && args.member_first_name !== null) {
      this.member_first_name = args.member_first_name;
    }
  }
};
CreateGroupMembershipRequest.prototype = {};
CreateGroupMembershipRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.group_membership_recruitment_attempt = new ttypes.GroupMembershipRecruitmentAttempt();
        this.group_membership_recruitment_attempt.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.member_first_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateGroupMembershipRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateGroupMembershipRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 2);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.group_membership_recruitment_attempt !== null && this.group_membership_recruitment_attempt !== undefined) {
    output.writeFieldBegin('group_membership_recruitment_attempt', Thrift.Type.STRUCT, 3);
    this.group_membership_recruitment_attempt.write(output);
    output.writeFieldEnd();
  }
  if (this.member_first_name !== null && this.member_first_name !== undefined) {
    output.writeFieldBegin('member_first_name', Thrift.Type.STRING, 4);
    output.writeString(this.member_first_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IsGroupFullRequest = module.exports.IsGroupFullRequest = function(args) {
  this.group_uid = null;
  if (args) {
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
  }
};
IsGroupFullRequest.prototype = {};
IsGroupFullRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IsGroupFullRequest.prototype.write = function(output) {
  output.writeStructBegin('IsGroupFullRequest');
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupUniqueIdentifiers = module.exports.GroupUniqueIdentifiers = function(args) {
  this.uids = null;
  this.twilio_chat_channel_sids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
    if (args.twilio_chat_channel_sids !== undefined && args.twilio_chat_channel_sids !== null) {
      this.twilio_chat_channel_sids = Thrift.copyList(args.twilio_chat_channel_sids, [null]);
    }
  }
};
GroupUniqueIdentifiers.prototype = {};
GroupUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.uids = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString();
          this.uids.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size55 = 0;
        var _rtmp359;
        this.twilio_chat_channel_sids = [];
        var _etype58 = 0;
        _rtmp359 = input.readListBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = input.readString();
          this.twilio_chat_channel_sids.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('GroupUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter62 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter62))
      {
        iter62 = this.uids[iter62];
        output.writeString(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.twilio_chat_channel_sids !== null && this.twilio_chat_channel_sids !== undefined) {
    output.writeFieldBegin('twilio_chat_channel_sids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.twilio_chat_channel_sids.length);
    for (var iter63 in this.twilio_chat_channel_sids)
    {
      if (this.twilio_chat_channel_sids.hasOwnProperty(iter63))
      {
        iter63 = this.twilio_chat_channel_sids[iter63];
        output.writeString(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupsByIdentifiersRequest = module.exports.GetGroupsByIdentifiersRequest = function(args) {
  this.group_identifiers = null;
  if (args) {
    if (args.group_identifiers !== undefined && args.group_identifiers !== null) {
      this.group_identifiers = new ttypes.GroupUniqueIdentifiers(args.group_identifiers);
    }
  }
};
GetGroupsByIdentifiersRequest.prototype = {};
GetGroupsByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.group_identifiers = new ttypes.GroupUniqueIdentifiers();
        this.group_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupsByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetGroupsByIdentifiersRequest');
  if (this.group_identifiers !== null && this.group_identifiers !== undefined) {
    output.writeFieldBegin('group_identifiers', Thrift.Type.STRUCT, 1);
    this.group_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupsFilterParams = module.exports.GetGroupsFilterParams = function(args) {
  this.group_uids = null;
  this.member_entity_uuids = null;
  if (args) {
    if (args.group_uids !== undefined && args.group_uids !== null) {
      this.group_uids = Thrift.copyList(args.group_uids, [null]);
    }
    if (args.member_entity_uuids !== undefined && args.member_entity_uuids !== null) {
      this.member_entity_uuids = Thrift.copyList(args.member_entity_uuids, [null]);
    }
  }
};
GetGroupsFilterParams.prototype = {};
GetGroupsFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.group_uids = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.group_uids.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.member_entity_uuids = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = input.readString();
          this.member_entity_uuids.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupsFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetGroupsFilterParams');
  if (this.group_uids !== null && this.group_uids !== undefined) {
    output.writeFieldBegin('group_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.group_uids.length);
    for (var iter78 in this.group_uids)
    {
      if (this.group_uids.hasOwnProperty(iter78))
      {
        iter78 = this.group_uids[iter78];
        output.writeString(iter78);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.member_entity_uuids !== null && this.member_entity_uuids !== undefined) {
    output.writeFieldBegin('member_entity_uuids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.member_entity_uuids.length);
    for (var iter79 in this.member_entity_uuids)
    {
      if (this.member_entity_uuids.hasOwnProperty(iter79))
      {
        iter79 = this.member_entity_uuids[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupsRequest = module.exports.GetGroupsRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetGroupsFilterParams(args.filter_params);
    }
  }
};
GetGroupsRequest.prototype = {};
GetGroupsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetGroupsFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetGroupsRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedGroups = module.exports.PaginatedGroups = function(args) {
  this.page_info = null;
  this.groups = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [ttypes.Group]);
    }
  }
};
PaginatedGroups.prototype = {};
PaginatedGroups.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.groups = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.Group();
          elem86.read(input);
          this.groups.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedGroups.prototype.write = function(output) {
  output.writeStructBegin('PaginatedGroups');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter87 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter87))
      {
        iter87 = this.groups[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateGroupPetitionAdoptionRequest = module.exports.CreateGroupPetitionAdoptionRequest = function(args) {
  this.group_uid = null;
  this.petition_uid = null;
  this.petition_signature_goal = null;
  if (args) {
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.petition_signature_goal !== undefined && args.petition_signature_goal !== null) {
      this.petition_signature_goal = args.petition_signature_goal;
    }
  }
};
CreateGroupPetitionAdoptionRequest.prototype = {};
CreateGroupPetitionAdoptionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.petition_signature_goal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateGroupPetitionAdoptionRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateGroupPetitionAdoptionRequest');
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 2);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.petition_signature_goal !== null && this.petition_signature_goal !== undefined) {
    output.writeFieldBegin('petition_signature_goal', Thrift.Type.I32, 3);
    output.writeI32(this.petition_signature_goal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupPetitionAdoptionSignatureCount = module.exports.GroupPetitionAdoptionSignatureCount = function(args) {
  this.group_petition_adoption_uid = null;
  this.signature_count = null;
  if (args) {
    if (args.group_petition_adoption_uid !== undefined && args.group_petition_adoption_uid !== null) {
      this.group_petition_adoption_uid = args.group_petition_adoption_uid;
    }
    if (args.signature_count !== undefined && args.signature_count !== null) {
      this.signature_count = args.signature_count;
    }
  }
};
GroupPetitionAdoptionSignatureCount.prototype = {};
GroupPetitionAdoptionSignatureCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_petition_adoption_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.signature_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupPetitionAdoptionSignatureCount.prototype.write = function(output) {
  output.writeStructBegin('GroupPetitionAdoptionSignatureCount');
  if (this.group_petition_adoption_uid !== null && this.group_petition_adoption_uid !== undefined) {
    output.writeFieldBegin('group_petition_adoption_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_petition_adoption_uid);
    output.writeFieldEnd();
  }
  if (this.signature_count !== null && this.signature_count !== undefined) {
    output.writeFieldBegin('signature_count', Thrift.Type.I32, 2);
    output.writeI32(this.signature_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupPetitionAdoptionSignatureCounts = module.exports.GroupPetitionAdoptionSignatureCounts = function(args) {
  this.group_petition_adoption_signature_counts = null;
  if (args) {
    if (args.group_petition_adoption_signature_counts !== undefined && args.group_petition_adoption_signature_counts !== null) {
      this.group_petition_adoption_signature_counts = Thrift.copyList(args.group_petition_adoption_signature_counts, [ttypes.GroupPetitionAdoptionSignatureCount]);
    }
  }
};
GroupPetitionAdoptionSignatureCounts.prototype = {};
GroupPetitionAdoptionSignatureCounts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.group_petition_adoption_signature_counts = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.GroupPetitionAdoptionSignatureCount();
          elem94.read(input);
          this.group_petition_adoption_signature_counts.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupPetitionAdoptionSignatureCounts.prototype.write = function(output) {
  output.writeStructBegin('GroupPetitionAdoptionSignatureCounts');
  if (this.group_petition_adoption_signature_counts !== null && this.group_petition_adoption_signature_counts !== undefined) {
    output.writeFieldBegin('group_petition_adoption_signature_counts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.group_petition_adoption_signature_counts.length);
    for (var iter95 in this.group_petition_adoption_signature_counts)
    {
      if (this.group_petition_adoption_signature_counts.hasOwnProperty(iter95))
      {
        iter95 = this.group_petition_adoption_signature_counts[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupPetitionAdoptionRequest = module.exports.GetGroupPetitionAdoptionRequest = function(args) {
  this.group_petition_adoption_uid = null;
  if (args) {
    if (args.group_petition_adoption_uid !== undefined && args.group_petition_adoption_uid !== null) {
      this.group_petition_adoption_uid = args.group_petition_adoption_uid;
    }
  }
};
GetGroupPetitionAdoptionRequest.prototype = {};
GetGroupPetitionAdoptionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_petition_adoption_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupPetitionAdoptionRequest.prototype.write = function(output) {
  output.writeStructBegin('GetGroupPetitionAdoptionRequest');
  if (this.group_petition_adoption_uid !== null && this.group_petition_adoption_uid !== undefined) {
    output.writeFieldBegin('group_petition_adoption_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_petition_adoption_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupPetitionAdoptionSignatureCountsRequest = module.exports.GetGroupPetitionAdoptionSignatureCountsRequest = function(args) {
  this.group_petition_adoption_uids = null;
  if (args) {
    if (args.group_petition_adoption_uids !== undefined && args.group_petition_adoption_uids !== null) {
      this.group_petition_adoption_uids = Thrift.copyList(args.group_petition_adoption_uids, [null]);
    }
  }
};
GetGroupPetitionAdoptionSignatureCountsRequest.prototype = {};
GetGroupPetitionAdoptionSignatureCountsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.group_petition_adoption_uids = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString();
          this.group_petition_adoption_uids.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupPetitionAdoptionSignatureCountsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetGroupPetitionAdoptionSignatureCountsRequest');
  if (this.group_petition_adoption_uids !== null && this.group_petition_adoption_uids !== undefined) {
    output.writeFieldBegin('group_petition_adoption_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.group_petition_adoption_uids.length);
    for (var iter103 in this.group_petition_adoption_uids)
    {
      if (this.group_petition_adoption_uids.hasOwnProperty(iter103))
      {
        iter103 = this.group_petition_adoption_uids[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupPetitionAdoptionsRequest = module.exports.GetGroupPetitionAdoptionsRequest = function(args) {
  this.pagination_params = null;
  this.group_uid = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
  }
};
GetGroupPetitionAdoptionsRequest.prototype = {};
GetGroupPetitionAdoptionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupPetitionAdoptionsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetGroupPetitionAdoptionsRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 2);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupPetitionIdentifier = module.exports.GroupPetitionIdentifier = function(args) {
  this.group_uid = null;
  this.petition_uid = null;
  if (args) {
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
  }
};
GroupPetitionIdentifier.prototype = {};
GroupPetitionIdentifier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupPetitionIdentifier.prototype.write = function(output) {
  output.writeStructBegin('GroupPetitionIdentifier');
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 2);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupPetitionAdoptionFilterIdentifiers = module.exports.GroupPetitionAdoptionFilterIdentifiers = function(args) {
  this.group_petition_identifiers = null;
  if (args) {
    if (args.group_petition_identifiers !== undefined && args.group_petition_identifiers !== null) {
      this.group_petition_identifiers = Thrift.copyList(args.group_petition_identifiers, [ttypes.GroupPetitionIdentifier]);
    }
  }
};
GroupPetitionAdoptionFilterIdentifiers.prototype = {};
GroupPetitionAdoptionFilterIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.group_petition_identifiers = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.GroupPetitionIdentifier();
          elem110.read(input);
          this.group_petition_identifiers.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupPetitionAdoptionFilterIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('GroupPetitionAdoptionFilterIdentifiers');
  if (this.group_petition_identifiers !== null && this.group_petition_identifiers !== undefined) {
    output.writeFieldBegin('group_petition_identifiers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.group_petition_identifiers.length);
    for (var iter111 in this.group_petition_identifiers)
    {
      if (this.group_petition_identifiers.hasOwnProperty(iter111))
      {
        iter111 = this.group_petition_identifiers[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilterPetitionAdoptionIdentifiersRequest = module.exports.FilterPetitionAdoptionIdentifiersRequest = function(args) {
  this.filter_identifiers = null;
  if (args) {
    if (args.filter_identifiers !== undefined && args.filter_identifiers !== null) {
      this.filter_identifiers = new ttypes.GroupPetitionAdoptionFilterIdentifiers(args.filter_identifiers);
    }
  }
};
FilterPetitionAdoptionIdentifiersRequest.prototype = {};
FilterPetitionAdoptionIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_identifiers = new ttypes.GroupPetitionAdoptionFilterIdentifiers();
        this.filter_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterPetitionAdoptionIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('FilterPetitionAdoptionIdentifiersRequest');
  if (this.filter_identifiers !== null && this.filter_identifiers !== undefined) {
    output.writeFieldBegin('filter_identifiers', Thrift.Type.STRUCT, 1);
    this.filter_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilteredPetitionAdoptionIdentifiers = module.exports.FilteredPetitionAdoptionIdentifiers = function(args) {
  this.filtered_identifiers = null;
  if (args) {
    if (args.filtered_identifiers !== undefined && args.filtered_identifiers !== null) {
      this.filtered_identifiers = new ttypes.GroupPetitionAdoptionFilterIdentifiers(args.filtered_identifiers);
    }
  }
};
FilteredPetitionAdoptionIdentifiers.prototype = {};
FilteredPetitionAdoptionIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filtered_identifiers = new ttypes.GroupPetitionAdoptionFilterIdentifiers();
        this.filtered_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilteredPetitionAdoptionIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('FilteredPetitionAdoptionIdentifiers');
  if (this.filtered_identifiers !== null && this.filtered_identifiers !== undefined) {
    output.writeFieldBegin('filtered_identifiers', Thrift.Type.STRUCT, 1);
    this.filtered_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedGroupPetitionAdoptions = module.exports.PaginatedGroupPetitionAdoptions = function(args) {
  this.page_info = null;
  this.group_petition_adoptions = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.group_petition_adoptions !== undefined && args.group_petition_adoptions !== null) {
      this.group_petition_adoptions = Thrift.copyList(args.group_petition_adoptions, [group_shared_ttypes.GroupPetitionAdoption]);
    }
  }
};
PaginatedGroupPetitionAdoptions.prototype = {};
PaginatedGroupPetitionAdoptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.group_petition_adoptions = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new group_shared_ttypes.GroupPetitionAdoption();
          elem118.read(input);
          this.group_petition_adoptions.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedGroupPetitionAdoptions.prototype.write = function(output) {
  output.writeStructBegin('PaginatedGroupPetitionAdoptions');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.group_petition_adoptions !== null && this.group_petition_adoptions !== undefined) {
    output.writeFieldBegin('group_petition_adoptions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.group_petition_adoptions.length);
    for (var iter119 in this.group_petition_adoptions)
    {
      if (this.group_petition_adoptions.hasOwnProperty(iter119))
      {
        iter119 = this.group_petition_adoptions[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupMembershipsFilterParams = module.exports.GetGroupMembershipsFilterParams = function(args) {
  this.exclude_leader = null;
  if (args) {
    if (args.exclude_leader !== undefined && args.exclude_leader !== null) {
      this.exclude_leader = args.exclude_leader;
    }
  }
};
GetGroupMembershipsFilterParams.prototype = {};
GetGroupMembershipsFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.exclude_leader = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupMembershipsFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetGroupMembershipsFilterParams');
  if (this.exclude_leader !== null && this.exclude_leader !== undefined) {
    output.writeFieldBegin('exclude_leader', Thrift.Type.BOOL, 1);
    output.writeBool(this.exclude_leader);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupMembershipsRequest = module.exports.GetGroupMembershipsRequest = function(args) {
  this.pagination_params = null;
  this.group_uid = null;
  this.filter_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetGroupMembershipsFilterParams(args.filter_params);
    }
  }
};
GetGroupMembershipsRequest.prototype = {};
GetGroupMembershipsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetGroupMembershipsFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupMembershipsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetGroupMembershipsRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 2);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 3);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupMembershipsByIdentifiersRequest = module.exports.GetGroupMembershipsByIdentifiersRequest = function(args) {
  this.group_membership_identifiers = null;
  if (args) {
    if (args.group_membership_identifiers !== undefined && args.group_membership_identifiers !== null) {
      this.group_membership_identifiers = new ttypes.GroupMembershipUniqueIdentifiers(args.group_membership_identifiers);
    }
  }
};
GetGroupMembershipsByIdentifiersRequest.prototype = {};
GetGroupMembershipsByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.group_membership_identifiers = new ttypes.GroupMembershipUniqueIdentifiers();
        this.group_membership_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupMembershipsByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetGroupMembershipsByIdentifiersRequest');
  if (this.group_membership_identifiers !== null && this.group_membership_identifiers !== undefined) {
    output.writeFieldBegin('group_membership_identifiers', Thrift.Type.STRUCT, 1);
    this.group_membership_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilterGroupMembershipIdentifiersRequest = module.exports.FilterGroupMembershipIdentifiersRequest = function(args) {
  this.filter_identifiers = null;
  if (args) {
    if (args.filter_identifiers !== undefined && args.filter_identifiers !== null) {
      this.filter_identifiers = new ttypes.GroupMembershipFilterIdentifiers(args.filter_identifiers);
    }
  }
};
FilterGroupMembershipIdentifiersRequest.prototype = {};
FilterGroupMembershipIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_identifiers = new ttypes.GroupMembershipFilterIdentifiers();
        this.filter_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterGroupMembershipIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('FilterGroupMembershipIdentifiersRequest');
  if (this.filter_identifiers !== null && this.filter_identifiers !== undefined) {
    output.writeFieldBegin('filter_identifiers', Thrift.Type.STRUCT, 1);
    this.filter_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilteredGroupMembershipIdentifiers = module.exports.FilteredGroupMembershipIdentifiers = function(args) {
  this.filtered_identifiers = null;
  if (args) {
    if (args.filtered_identifiers !== undefined && args.filtered_identifiers !== null) {
      this.filtered_identifiers = new ttypes.GroupMembershipFilterIdentifiers(args.filtered_identifiers);
    }
  }
};
FilteredGroupMembershipIdentifiers.prototype = {};
FilteredGroupMembershipIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filtered_identifiers = new ttypes.GroupMembershipFilterIdentifiers();
        this.filtered_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilteredGroupMembershipIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('FilteredGroupMembershipIdentifiers');
  if (this.filtered_identifiers !== null && this.filtered_identifiers !== undefined) {
    output.writeFieldBegin('filtered_identifiers', Thrift.Type.STRUCT, 1);
    this.filtered_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedGroupMemberships = module.exports.PaginatedGroupMemberships = function(args) {
  this.page_info = null;
  this.group_memberships = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.group_memberships !== undefined && args.group_memberships !== null) {
      this.group_memberships = Thrift.copyList(args.group_memberships, [ttypes.GroupMembership]);
    }
  }
};
PaginatedGroupMemberships.prototype = {};
PaginatedGroupMemberships.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.group_memberships = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.GroupMembership();
          elem126.read(input);
          this.group_memberships.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedGroupMemberships.prototype.write = function(output) {
  output.writeStructBegin('PaginatedGroupMemberships');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.group_memberships !== null && this.group_memberships !== undefined) {
    output.writeFieldBegin('group_memberships', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.group_memberships.length);
    for (var iter127 in this.group_memberships)
    {
      if (this.group_memberships.hasOwnProperty(iter127))
      {
        iter127 = this.group_memberships[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupPetitionAdoptionContributor = module.exports.GroupPetitionAdoptionContributor = function(args) {
  this.entity_uuid = null;
  this.signature_count = null;
  this.rank = null;
  this.uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.signature_count !== undefined && args.signature_count !== null) {
      this.signature_count = args.signature_count;
    }
    if (args.rank !== undefined && args.rank !== null) {
      this.rank = args.rank;
    }
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
  }
};
GroupPetitionAdoptionContributor.prototype = {};
GroupPetitionAdoptionContributor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.signature_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rank = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupPetitionAdoptionContributor.prototype.write = function(output) {
  output.writeStructBegin('GroupPetitionAdoptionContributor');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.signature_count !== null && this.signature_count !== undefined) {
    output.writeFieldBegin('signature_count', Thrift.Type.I32, 2);
    output.writeI32(this.signature_count);
    output.writeFieldEnd();
  }
  if (this.rank !== null && this.rank !== undefined) {
    output.writeFieldBegin('rank', Thrift.Type.I32, 3);
    output.writeI32(this.rank);
    output.writeFieldEnd();
  }
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 4);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupPetitionAdoptionContributors = module.exports.GroupPetitionAdoptionContributors = function(args) {
  this.group_petition_adoption_contributors = null;
  if (args) {
    if (args.group_petition_adoption_contributors !== undefined && args.group_petition_adoption_contributors !== null) {
      this.group_petition_adoption_contributors = Thrift.copyList(args.group_petition_adoption_contributors, [ttypes.GroupPetitionAdoptionContributor]);
    }
  }
};
GroupPetitionAdoptionContributors.prototype = {};
GroupPetitionAdoptionContributors.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.group_petition_adoption_contributors = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new ttypes.GroupPetitionAdoptionContributor();
          elem134.read(input);
          this.group_petition_adoption_contributors.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupPetitionAdoptionContributors.prototype.write = function(output) {
  output.writeStructBegin('GroupPetitionAdoptionContributors');
  if (this.group_petition_adoption_contributors !== null && this.group_petition_adoption_contributors !== undefined) {
    output.writeFieldBegin('group_petition_adoption_contributors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.group_petition_adoption_contributors.length);
    for (var iter135 in this.group_petition_adoption_contributors)
    {
      if (this.group_petition_adoption_contributors.hasOwnProperty(iter135))
      {
        iter135 = this.group_petition_adoption_contributors[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGroupPetitionAdoptionContributorListRequest = module.exports.GetGroupPetitionAdoptionContributorListRequest = function(args) {
  this.group_petition_adoption_uid = null;
  if (args) {
    if (args.group_petition_adoption_uid !== undefined && args.group_petition_adoption_uid !== null) {
      this.group_petition_adoption_uid = args.group_petition_adoption_uid;
    }
  }
};
GetGroupPetitionAdoptionContributorListRequest.prototype = {};
GetGroupPetitionAdoptionContributorListRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_petition_adoption_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGroupPetitionAdoptionContributorListRequest.prototype.write = function(output) {
  output.writeStructBegin('GetGroupPetitionAdoptionContributorListRequest');
  if (this.group_petition_adoption_uid !== null && this.group_petition_adoption_uid !== undefined) {
    output.writeFieldBegin('group_petition_adoption_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_petition_adoption_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeregisterTwilioDevicesRequest = module.exports.DeregisterTwilioDevicesRequest = function(args) {
  this.entity_uuid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
  }
};
DeregisterTwilioDevicesRequest.prototype = {};
DeregisterTwilioDevicesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeregisterTwilioDevicesRequest.prototype.write = function(output) {
  output.writeStructBegin('DeregisterTwilioDevicesRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetChatUnreadMessageCountRequest = module.exports.GetChatUnreadMessageCountRequest = function(args) {
  this.entity_uuid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
  }
};
GetChatUnreadMessageCountRequest.prototype = {};
GetChatUnreadMessageCountRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetChatUnreadMessageCountRequest.prototype.write = function(output) {
  output.writeStructBegin('GetChatUnreadMessageCountRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetChatUnreadMessageCountsForGroupsRequest = module.exports.GetChatUnreadMessageCountsForGroupsRequest = function(args) {
  this.group_uids = null;
  this.entity_uuid = null;
  if (args) {
    if (args.group_uids !== undefined && args.group_uids !== null) {
      this.group_uids = Thrift.copyList(args.group_uids, [null]);
    }
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
  }
};
GetChatUnreadMessageCountsForGroupsRequest.prototype = {};
GetChatUnreadMessageCountsForGroupsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.group_uids = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = input.readString();
          this.group_uids.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetChatUnreadMessageCountsForGroupsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetChatUnreadMessageCountsForGroupsRequest');
  if (this.group_uids !== null && this.group_uids !== undefined) {
    output.writeFieldBegin('group_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.group_uids.length);
    for (var iter143 in this.group_uids)
    {
      if (this.group_uids.hasOwnProperty(iter143))
      {
        iter143 = this.group_uids[iter143];
        output.writeString(iter143);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChatUnreadMessageCount = module.exports.ChatUnreadMessageCount = function(args) {
  this.chat_unread_message_count = null;
  if (args) {
    if (args.chat_unread_message_count !== undefined && args.chat_unread_message_count !== null) {
      this.chat_unread_message_count = args.chat_unread_message_count;
    }
  }
};
ChatUnreadMessageCount.prototype = {};
ChatUnreadMessageCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.chat_unread_message_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatUnreadMessageCount.prototype.write = function(output) {
  output.writeStructBegin('ChatUnreadMessageCount');
  if (this.chat_unread_message_count !== null && this.chat_unread_message_count !== undefined) {
    output.writeFieldBegin('chat_unread_message_count', Thrift.Type.I32, 1);
    output.writeI32(this.chat_unread_message_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChatUnreadMessageCountForGroup = module.exports.ChatUnreadMessageCountForGroup = function(args) {
  this.group_uid = null;
  this.chat_unread_message_count = null;
  if (args) {
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.chat_unread_message_count !== undefined && args.chat_unread_message_count !== null) {
      this.chat_unread_message_count = args.chat_unread_message_count;
    }
  }
};
ChatUnreadMessageCountForGroup.prototype = {};
ChatUnreadMessageCountForGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chat_unread_message_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatUnreadMessageCountForGroup.prototype.write = function(output) {
  output.writeStructBegin('ChatUnreadMessageCountForGroup');
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.chat_unread_message_count !== null && this.chat_unread_message_count !== undefined) {
    output.writeFieldBegin('chat_unread_message_count', Thrift.Type.I32, 2);
    output.writeI32(this.chat_unread_message_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChatUnreadMessageCountsForGroups = module.exports.ChatUnreadMessageCountsForGroups = function(args) {
  this.chat_unread_message_counts_for_groups = null;
  if (args) {
    if (args.chat_unread_message_counts_for_groups !== undefined && args.chat_unread_message_counts_for_groups !== null) {
      this.chat_unread_message_counts_for_groups = Thrift.copyList(args.chat_unread_message_counts_for_groups, [ttypes.ChatUnreadMessageCountForGroup]);
    }
  }
};
ChatUnreadMessageCountsForGroups.prototype = {};
ChatUnreadMessageCountsForGroups.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.chat_unread_message_counts_for_groups = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = new ttypes.ChatUnreadMessageCountForGroup();
          elem150.read(input);
          this.chat_unread_message_counts_for_groups.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatUnreadMessageCountsForGroups.prototype.write = function(output) {
  output.writeStructBegin('ChatUnreadMessageCountsForGroups');
  if (this.chat_unread_message_counts_for_groups !== null && this.chat_unread_message_counts_for_groups !== undefined) {
    output.writeFieldBegin('chat_unread_message_counts_for_groups', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.chat_unread_message_counts_for_groups.length);
    for (var iter151 in this.chat_unread_message_counts_for_groups)
    {
      if (this.chat_unread_message_counts_for_groups.hasOwnProperty(iter151))
      {
        iter151 = this.chat_unread_message_counts_for_groups[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionGroupContributionsRequest = module.exports.GetPetitionGroupContributionsRequest = function(args) {
  this.petition_uid = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
  }
};
GetPetitionGroupContributionsRequest.prototype = {};
GetPetitionGroupContributionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionGroupContributionsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionGroupContributionsRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionGroupContribution = module.exports.PetitionGroupContribution = function(args) {
  this.group_uid = null;
  this.petition_uid = null;
  this.signature_count = null;
  if (args) {
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.signature_count !== undefined && args.signature_count !== null) {
      this.signature_count = args.signature_count;
    }
  }
};
PetitionGroupContribution.prototype = {};
PetitionGroupContribution.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.signature_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionGroupContribution.prototype.write = function(output) {
  output.writeStructBegin('PetitionGroupContribution');
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 2);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.signature_count !== null && this.signature_count !== undefined) {
    output.writeFieldBegin('signature_count', Thrift.Type.I32, 3);
    output.writeI32(this.signature_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionGroupContributions = module.exports.PetitionGroupContributions = function(args) {
  this.petition_group_contributions = null;
  if (args) {
    if (args.petition_group_contributions !== undefined && args.petition_group_contributions !== null) {
      this.petition_group_contributions = Thrift.copyList(args.petition_group_contributions, [ttypes.PetitionGroupContribution]);
    }
  }
};
PetitionGroupContributions.prototype = {};
PetitionGroupContributions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.petition_group_contributions = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new ttypes.PetitionGroupContribution();
          elem158.read(input);
          this.petition_group_contributions.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionGroupContributions.prototype.write = function(output) {
  output.writeStructBegin('PetitionGroupContributions');
  if (this.petition_group_contributions !== null && this.petition_group_contributions !== undefined) {
    output.writeFieldBegin('petition_group_contributions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.petition_group_contributions.length);
    for (var iter159 in this.petition_group_contributions)
    {
      if (this.petition_group_contributions.hasOwnProperty(iter159))
      {
        iter159 = this.petition_group_contributions[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateGroupMembershipException = module.exports.CreateGroupMembershipException = function(args) {
  Thrift.TException.call(this, "CreateGroupMembershipException");
  this.name = "CreateGroupMembershipException";
  this.message = null;
  this.code = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
Thrift.inherits(CreateGroupMembershipException, Thrift.TException);
CreateGroupMembershipException.prototype.name = 'CreateGroupMembershipException';
CreateGroupMembershipException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateGroupMembershipException.prototype.write = function(output) {
  output.writeStructBegin('CreateGroupMembershipException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteGroupMembershipException = module.exports.DeleteGroupMembershipException = function(args) {
  Thrift.TException.call(this, "DeleteGroupMembershipException");
  this.name = "DeleteGroupMembershipException";
  this.message = null;
  this.code = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
Thrift.inherits(DeleteGroupMembershipException, Thrift.TException);
DeleteGroupMembershipException.prototype.name = 'DeleteGroupMembershipException';
DeleteGroupMembershipException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteGroupMembershipException.prototype.write = function(output) {
  output.writeStructBegin('DeleteGroupMembershipException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


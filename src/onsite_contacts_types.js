//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ContactType = {
  'EMAIL' : 1,
  'FACEBOOK' : 2,
  'PHONE_NUMBER' : 3,
  'MANUAL' : 4
};
var OnsiteContact = module.exports.OnsiteContact = function(args) {
  this.profile_id = null;
  this.contact_types = null;
  if (args) {
    if (args.profile_id !== undefined && args.profile_id !== null) {
      this.profile_id = args.profile_id;
    }
    if (args.contact_types !== undefined && args.contact_types !== null) {
      this.contact_types = Thrift.copyList(args.contact_types, [null]);
    }
  }
};
OnsiteContact.prototype = {};
OnsiteContact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.profile_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.contact_types = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.contact_types.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OnsiteContact.prototype.write = function(output) {
  output.writeStructBegin('OnsiteContact');
  if (this.profile_id !== null && this.profile_id !== undefined) {
    output.writeFieldBegin('profile_id', Thrift.Type.I32, 1);
    output.writeI32(this.profile_id);
    output.writeFieldEnd();
  }
  if (this.contact_types !== null && this.contact_types !== undefined) {
    output.writeFieldBegin('contact_types', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.contact_types.length);
    for (var iter7 in this.contact_types)
    {
      if (this.contact_types.hasOwnProperty(iter7))
      {
        iter7 = this.contact_types[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OnsiteContactList = module.exports.OnsiteContactList = function(args) {
  this.onsite_contacts = null;
  if (args) {
    if (args.onsite_contacts !== undefined && args.onsite_contacts !== null) {
      this.onsite_contacts = Thrift.copyList(args.onsite_contacts, [ttypes.OnsiteContact]);
    }
  }
};
OnsiteContactList.prototype = {};
OnsiteContactList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.onsite_contacts = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.OnsiteContact();
          elem14.read(input);
          this.onsite_contacts.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OnsiteContactList.prototype.write = function(output) {
  output.writeStructBegin('OnsiteContactList');
  if (this.onsite_contacts !== null && this.onsite_contacts !== undefined) {
    output.writeFieldBegin('onsite_contacts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.onsite_contacts.length);
    for (var iter15 in this.onsite_contacts)
    {
      if (this.onsite_contacts.hasOwnProperty(iter15))
      {
        iter15 = this.onsite_contacts[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


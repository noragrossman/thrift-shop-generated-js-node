//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var event_bus_ttypes = require('./event_bus_types');


var ttypes = require('./alignment_types');
//HELPER FUNCTIONS AND STRUCTURES

var AlignmentService_delete_position_response_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.DeletePositionResponseRequest(args.request);
    }
  }
};
AlignmentService_delete_position_response_args.prototype = {};
AlignmentService_delete_position_response_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DeletePositionResponseRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_delete_position_response_args.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_delete_position_response_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_delete_position_response_result = function(args) {
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
AlignmentService_delete_position_response_result.prototype = {};
AlignmentService_delete_position_response_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_delete_position_response_result.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_delete_position_response_result');
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_get_population_alignments_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPopulationAlignmentsRequest(args.request);
    }
  }
};
AlignmentService_get_population_alignments_args.prototype = {};
AlignmentService_get_population_alignments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPopulationAlignmentsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_get_population_alignments_args.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_get_population_alignments_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_get_population_alignments_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.EntityAlignment]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
AlignmentService_get_population_alignments_result.prototype = {};
AlignmentService_get_population_alignments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.EntityAlignment();
          elem86.read(input);
          this.success.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_get_population_alignments_result.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_get_population_alignments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_get_user_alignments_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetUserAlignmentsRequest(args.request);
    }
  }
};
AlignmentService_get_user_alignments_args.prototype = {};
AlignmentService_get_user_alignments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetUserAlignmentsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_get_user_alignments_args.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_get_user_alignments_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_get_user_alignments_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.EntityAlignment]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
AlignmentService_get_user_alignments_result.prototype = {};
AlignmentService_get_user_alignments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.success = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.EntityAlignment();
          elem94.read(input);
          this.success.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_get_user_alignments_result.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_get_user_alignments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter95 in this.success)
    {
      if (this.success.hasOwnProperty(iter95))
      {
        iter95 = this.success[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_get_population_alignments_for_topics_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPopulationAlignmentsForTopicsRequest(args.request);
    }
  }
};
AlignmentService_get_population_alignments_for_topics_args.prototype = {};
AlignmentService_get_population_alignments_for_topics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPopulationAlignmentsForTopicsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_get_population_alignments_for_topics_args.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_get_population_alignments_for_topics_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_get_population_alignments_for_topics_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.EntityAlignment]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
AlignmentService_get_population_alignments_for_topics_result.prototype = {};
AlignmentService_get_population_alignments_for_topics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.EntityAlignment();
          elem102.read(input);
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_get_population_alignments_for_topics_result.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_get_population_alignments_for_topics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_get_user_alignments_for_topics_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetUserAlignmentsForTopicsRequest(args.request);
    }
  }
};
AlignmentService_get_user_alignments_for_topics_args.prototype = {};
AlignmentService_get_user_alignments_for_topics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetUserAlignmentsForTopicsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_get_user_alignments_for_topics_args.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_get_user_alignments_for_topics_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_get_user_alignments_for_topics_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.EntityAlignment]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
AlignmentService_get_user_alignments_for_topics_result.prototype = {};
AlignmentService_get_user_alignments_for_topics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.EntityAlignment();
          elem110.read(input);
          this.success.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_get_user_alignments_for_topics_result.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_get_user_alignments_for_topics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_receive_event_bus_message_parcel_args = function(args) {
  this.headers = null;
  this.message_parcel = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.message_parcel !== undefined && args.message_parcel !== null) {
      this.message_parcel = new event_bus_ttypes.MessageParcel(args.message_parcel);
    }
  }
};
AlignmentService_receive_event_bus_message_parcel_args.prototype = {};
AlignmentService_receive_event_bus_message_parcel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message_parcel = new event_bus_ttypes.MessageParcel();
        this.message_parcel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_receive_event_bus_message_parcel_args.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_receive_event_bus_message_parcel_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.message_parcel !== null && this.message_parcel !== undefined) {
    output.writeFieldBegin('message_parcel', Thrift.Type.STRUCT, 2);
    this.message_parcel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_receive_event_bus_message_parcel_result = function(args) {
};
AlignmentService_receive_event_bus_message_parcel_result.prototype = {};
AlignmentService_receive_event_bus_message_parcel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_receive_event_bus_message_parcel_result.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_receive_event_bus_message_parcel_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_update_position_response_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.UpdatePositionResponseRequest(args.request);
    }
  }
};
AlignmentService_update_position_response_args.prototype = {};
AlignmentService_update_position_response_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.UpdatePositionResponseRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_update_position_response_args.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_update_position_response_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentService_update_position_response_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PositionUpdateAlignment(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
AlignmentService_update_position_response_result.prototype = {};
AlignmentService_update_position_response_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PositionUpdateAlignment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlignmentService_update_position_response_result.prototype.write = function(output) {
  output.writeStructBegin('AlignmentService_update_position_response_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlignmentServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
AlignmentServiceClient.prototype = {};
AlignmentServiceClient.prototype.seqid = function() { return this._seqid; };
AlignmentServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
AlignmentServiceClient.prototype.delete_position_response = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_position_response(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_position_response(headers, request);
  }
};

AlignmentServiceClient.prototype.send_delete_position_response = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_position_response', Thrift.MessageType.CALL, this.seqid());
  var args = new AlignmentService_delete_position_response_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AlignmentServiceClient.prototype.recv_delete_position_response = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AlignmentService_delete_position_response_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  callback(null);
};
AlignmentServiceClient.prototype.get_population_alignments = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_population_alignments(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_population_alignments(headers, request);
  }
};

AlignmentServiceClient.prototype.send_get_population_alignments = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_population_alignments', Thrift.MessageType.CALL, this.seqid());
  var args = new AlignmentService_get_population_alignments_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AlignmentServiceClient.prototype.recv_get_population_alignments = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AlignmentService_get_population_alignments_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_population_alignments failed: unknown result');
};
AlignmentServiceClient.prototype.get_user_alignments = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_user_alignments(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_user_alignments(headers, request);
  }
};

AlignmentServiceClient.prototype.send_get_user_alignments = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_user_alignments', Thrift.MessageType.CALL, this.seqid());
  var args = new AlignmentService_get_user_alignments_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AlignmentServiceClient.prototype.recv_get_user_alignments = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AlignmentService_get_user_alignments_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_user_alignments failed: unknown result');
};
AlignmentServiceClient.prototype.get_population_alignments_for_topics = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_population_alignments_for_topics(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_population_alignments_for_topics(headers, request);
  }
};

AlignmentServiceClient.prototype.send_get_population_alignments_for_topics = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_population_alignments_for_topics', Thrift.MessageType.CALL, this.seqid());
  var args = new AlignmentService_get_population_alignments_for_topics_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AlignmentServiceClient.prototype.recv_get_population_alignments_for_topics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AlignmentService_get_population_alignments_for_topics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_population_alignments_for_topics failed: unknown result');
};
AlignmentServiceClient.prototype.get_user_alignments_for_topics = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_user_alignments_for_topics(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_user_alignments_for_topics(headers, request);
  }
};

AlignmentServiceClient.prototype.send_get_user_alignments_for_topics = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_user_alignments_for_topics', Thrift.MessageType.CALL, this.seqid());
  var args = new AlignmentService_get_user_alignments_for_topics_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AlignmentServiceClient.prototype.recv_get_user_alignments_for_topics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AlignmentService_get_user_alignments_for_topics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_user_alignments_for_topics failed: unknown result');
};
AlignmentServiceClient.prototype.receive_event_bus_message_parcel = function(headers, message_parcel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_receive_event_bus_message_parcel(headers, message_parcel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_receive_event_bus_message_parcel(headers, message_parcel);
  }
};

AlignmentServiceClient.prototype.send_receive_event_bus_message_parcel = function(headers, message_parcel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('receive_event_bus_message_parcel', Thrift.MessageType.CALL, this.seqid());
  var args = new AlignmentService_receive_event_bus_message_parcel_args();
  args.headers = headers;
  args.message_parcel = message_parcel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AlignmentServiceClient.prototype.recv_receive_event_bus_message_parcel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AlignmentService_receive_event_bus_message_parcel_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
AlignmentServiceClient.prototype.update_position_response = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_position_response(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_position_response(headers, request);
  }
};

AlignmentServiceClient.prototype.send_update_position_response = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update_position_response', Thrift.MessageType.CALL, this.seqid());
  var args = new AlignmentService_update_position_response_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AlignmentServiceClient.prototype.recv_update_position_response = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AlignmentService_update_position_response_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_position_response failed: unknown result');
};
var AlignmentServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
AlignmentServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
AlignmentServiceProcessor.prototype.process_delete_position_response = function(seqid, input, output) {
  var args = new AlignmentService_delete_position_response_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_position_response.length === 2) {
    Q.fcall(this._handler.delete_position_response, args.headers, args.request)
      .then(function(result) {
        var result_obj = new AlignmentService_delete_position_response_result({success: result});
        output.writeMessageBegin("delete_position_response", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new AlignmentService_delete_position_response_result(err);
          output.writeMessageBegin("delete_position_response", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_position_response", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_position_response(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new AlignmentService_delete_position_response_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_position_response", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_position_response", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AlignmentServiceProcessor.prototype.process_get_population_alignments = function(seqid, input, output) {
  var args = new AlignmentService_get_population_alignments_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_population_alignments.length === 2) {
    Q.fcall(this._handler.get_population_alignments, args.headers, args.request)
      .then(function(result) {
        var result_obj = new AlignmentService_get_population_alignments_result({success: result});
        output.writeMessageBegin("get_population_alignments", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new AlignmentService_get_population_alignments_result(err);
          output.writeMessageBegin("get_population_alignments", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_population_alignments", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_population_alignments(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new AlignmentService_get_population_alignments_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_population_alignments", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_population_alignments", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AlignmentServiceProcessor.prototype.process_get_user_alignments = function(seqid, input, output) {
  var args = new AlignmentService_get_user_alignments_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_user_alignments.length === 2) {
    Q.fcall(this._handler.get_user_alignments, args.headers, args.request)
      .then(function(result) {
        var result_obj = new AlignmentService_get_user_alignments_result({success: result});
        output.writeMessageBegin("get_user_alignments", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new AlignmentService_get_user_alignments_result(err);
          output.writeMessageBegin("get_user_alignments", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_user_alignments", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_user_alignments(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new AlignmentService_get_user_alignments_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_user_alignments", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_user_alignments", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AlignmentServiceProcessor.prototype.process_get_population_alignments_for_topics = function(seqid, input, output) {
  var args = new AlignmentService_get_population_alignments_for_topics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_population_alignments_for_topics.length === 2) {
    Q.fcall(this._handler.get_population_alignments_for_topics, args.headers, args.request)
      .then(function(result) {
        var result_obj = new AlignmentService_get_population_alignments_for_topics_result({success: result});
        output.writeMessageBegin("get_population_alignments_for_topics", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new AlignmentService_get_population_alignments_for_topics_result(err);
          output.writeMessageBegin("get_population_alignments_for_topics", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_population_alignments_for_topics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_population_alignments_for_topics(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new AlignmentService_get_population_alignments_for_topics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_population_alignments_for_topics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_population_alignments_for_topics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AlignmentServiceProcessor.prototype.process_get_user_alignments_for_topics = function(seqid, input, output) {
  var args = new AlignmentService_get_user_alignments_for_topics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_user_alignments_for_topics.length === 2) {
    Q.fcall(this._handler.get_user_alignments_for_topics, args.headers, args.request)
      .then(function(result) {
        var result_obj = new AlignmentService_get_user_alignments_for_topics_result({success: result});
        output.writeMessageBegin("get_user_alignments_for_topics", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new AlignmentService_get_user_alignments_for_topics_result(err);
          output.writeMessageBegin("get_user_alignments_for_topics", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_user_alignments_for_topics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_user_alignments_for_topics(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new AlignmentService_get_user_alignments_for_topics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_user_alignments_for_topics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_user_alignments_for_topics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AlignmentServiceProcessor.prototype.process_receive_event_bus_message_parcel = function(seqid, input, output) {
  var args = new AlignmentService_receive_event_bus_message_parcel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.receive_event_bus_message_parcel.length === 2) {
    Q.fcall(this._handler.receive_event_bus_message_parcel, args.headers, args.message_parcel)
      .then(function(result) {
        var result_obj = new AlignmentService_receive_event_bus_message_parcel_result({success: result});
        output.writeMessageBegin("receive_event_bus_message_parcel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("receive_event_bus_message_parcel", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.receive_event_bus_message_parcel(args.headers, args.message_parcel, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new AlignmentService_receive_event_bus_message_parcel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("receive_event_bus_message_parcel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("receive_event_bus_message_parcel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AlignmentServiceProcessor.prototype.process_update_position_response = function(seqid, input, output) {
  var args = new AlignmentService_update_position_response_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_position_response.length === 2) {
    Q.fcall(this._handler.update_position_response, args.headers, args.request)
      .then(function(result) {
        var result_obj = new AlignmentService_update_position_response_result({success: result});
        output.writeMessageBegin("update_position_response", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new AlignmentService_update_position_response_result(err);
          output.writeMessageBegin("update_position_response", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("update_position_response", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.update_position_response(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new AlignmentService_update_position_response_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_position_response", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_position_response", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var event_bus_ttypes = require('./event_bus_types');


var ttypes = module.exports = {};
ttypes.PetitionLifecycleState = {
  'DRAFT' : 0,
  'ACTIVE' : 1,
  'CLOSED' : 2
};
ttypes.GetPetitionsSortField = {
  'LAUNCHED_AT' : 0
};
ttypes.GetPetitionsSortOrder = {
  'ASC' : 0,
  'DESC' : 1
};
ttypes.GetEntitySignaturesSortField = {
  'SIGNATURE_DATE' : 1,
  'GRADES_PUBLISHED_DATE' : 2
};
ttypes.PetitionTargetType = {
  'CANDIDACY' : 0,
  'TERM' : 1
};
ttypes.PetitionTargetGrade = {
  'SUCCESS' : 0,
  'FAILURE' : 1,
  'NEUTRAL' : 2
};
ttypes.FilterTermsByEntityActionsOption = {
  'SOME_ACTIONS_TAKEN' : 1,
  'NO_ACTIONS_TAKEN' : 2,
  'NO_ACTIONS_AVAILABLE' : 3
};
ttypes.PetitionStateExceptionCode = {
  'LEGEND_INCOMPLETE' : 1,
  'PETITION_NOT_CLOSED' : 2,
  'GRADES_INCOMPLETE' : 3,
  'GRADES_NOT_PUBLISHED' : 4
};
var PetitionTypedTargetUid = module.exports.PetitionTypedTargetUid = function(args) {
  this.term_uid = null;
  this.candidacy_uid = null;
  if (args) {
    if (args.term_uid !== undefined && args.term_uid !== null) {
      this.term_uid = args.term_uid;
    }
    if (args.candidacy_uid !== undefined && args.candidacy_uid !== null) {
      this.candidacy_uid = args.candidacy_uid;
    }
  }
};
PetitionTypedTargetUid.prototype = {};
PetitionTypedTargetUid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.term_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.candidacy_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionTypedTargetUid.prototype.write = function(output) {
  output.writeStructBegin('PetitionTypedTargetUid');
  if (this.term_uid !== null && this.term_uid !== undefined) {
    output.writeFieldBegin('term_uid', Thrift.Type.STRING, 1);
    output.writeString(this.term_uid);
    output.writeFieldEnd();
  }
  if (this.candidacy_uid !== null && this.candidacy_uid !== undefined) {
    output.writeFieldBegin('candidacy_uid', Thrift.Type.STRING, 2);
    output.writeString(this.candidacy_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionGradeLegend = module.exports.PetitionGradeLegend = function(args) {
  this.success_description = null;
  this.failure_description = null;
  this.neutral_description = null;
  if (args) {
    if (args.success_description !== undefined && args.success_description !== null) {
      this.success_description = args.success_description;
    }
    if (args.failure_description !== undefined && args.failure_description !== null) {
      this.failure_description = args.failure_description;
    }
    if (args.neutral_description !== undefined && args.neutral_description !== null) {
      this.neutral_description = args.neutral_description;
    }
  }
};
PetitionGradeLegend.prototype = {};
PetitionGradeLegend.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.success_description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.failure_description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.neutral_description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionGradeLegend.prototype.write = function(output) {
  output.writeStructBegin('PetitionGradeLegend');
  if (this.success_description !== null && this.success_description !== undefined) {
    output.writeFieldBegin('success_description', Thrift.Type.STRING, 1);
    output.writeString(this.success_description);
    output.writeFieldEnd();
  }
  if (this.failure_description !== null && this.failure_description !== undefined) {
    output.writeFieldBegin('failure_description', Thrift.Type.STRING, 2);
    output.writeString(this.failure_description);
    output.writeFieldEnd();
  }
  if (this.neutral_description !== null && this.neutral_description !== undefined) {
    output.writeFieldBegin('neutral_description', Thrift.Type.STRING, 3);
    output.writeString(this.neutral_description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Petition = module.exports.Petition = function(args) {
  this.uid = null;
  this.title = null;
  this.summary = null;
  this.description = null;
  this.target_description = null;
  this.image = null;
  this.signature_goal = null;
  this.deadline = null;
  this.launched_at = null;
  this.closed_at = null;
  this.grade_legend = null;
  this.grades_published = null;
  this.tweet_prefill = null;
  this.rich_text_summary = null;
  this.email_snippet = null;
  this.invitation_prefill = null;
  this.report_recap = null;
  this.rich_text_report_recap = null;
  this.target_types = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = args.summary;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.target_description !== undefined && args.target_description !== null) {
      this.target_description = args.target_description;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.signature_goal !== undefined && args.signature_goal !== null) {
      this.signature_goal = args.signature_goal;
    }
    if (args.deadline !== undefined && args.deadline !== null) {
      this.deadline = args.deadline;
    }
    if (args.launched_at !== undefined && args.launched_at !== null) {
      this.launched_at = args.launched_at;
    }
    if (args.closed_at !== undefined && args.closed_at !== null) {
      this.closed_at = args.closed_at;
    }
    if (args.grade_legend !== undefined && args.grade_legend !== null) {
      this.grade_legend = new ttypes.PetitionGradeLegend(args.grade_legend);
    }
    if (args.grades_published !== undefined && args.grades_published !== null) {
      this.grades_published = args.grades_published;
    }
    if (args.tweet_prefill !== undefined && args.tweet_prefill !== null) {
      this.tweet_prefill = args.tweet_prefill;
    }
    if (args.rich_text_summary !== undefined && args.rich_text_summary !== null) {
      this.rich_text_summary = args.rich_text_summary;
    }
    if (args.email_snippet !== undefined && args.email_snippet !== null) {
      this.email_snippet = args.email_snippet;
    }
    if (args.invitation_prefill !== undefined && args.invitation_prefill !== null) {
      this.invitation_prefill = args.invitation_prefill;
    }
    if (args.report_recap !== undefined && args.report_recap !== null) {
      this.report_recap = args.report_recap;
    }
    if (args.rich_text_report_recap !== undefined && args.rich_text_report_recap !== null) {
      this.rich_text_report_recap = args.rich_text_report_recap;
    }
    if (args.target_types !== undefined && args.target_types !== null) {
      this.target_types = Thrift.copyList(args.target_types, [null]);
    }
  }
};
Petition.prototype = {};
Petition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.target_description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.signature_goal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.deadline = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.launched_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.closed_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.grade_legend = new ttypes.PetitionGradeLegend();
        this.grade_legend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.grades_published = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.tweet_prefill = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.email_snippet = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_prefill = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.report_recap = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_report_recap = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.target_types = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.target_types.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Petition.prototype.write = function(output) {
  output.writeStructBegin('Petition');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRING, 3);
    output.writeString(this.summary);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.target_description !== null && this.target_description !== undefined) {
    output.writeFieldBegin('target_description', Thrift.Type.STRING, 5);
    output.writeString(this.target_description);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 6);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.signature_goal !== null && this.signature_goal !== undefined) {
    output.writeFieldBegin('signature_goal', Thrift.Type.I32, 7);
    output.writeI32(this.signature_goal);
    output.writeFieldEnd();
  }
  if (this.deadline !== null && this.deadline !== undefined) {
    output.writeFieldBegin('deadline', Thrift.Type.STRING, 8);
    output.writeString(this.deadline);
    output.writeFieldEnd();
  }
  if (this.launched_at !== null && this.launched_at !== undefined) {
    output.writeFieldBegin('launched_at', Thrift.Type.STRING, 9);
    output.writeString(this.launched_at);
    output.writeFieldEnd();
  }
  if (this.closed_at !== null && this.closed_at !== undefined) {
    output.writeFieldBegin('closed_at', Thrift.Type.STRING, 10);
    output.writeString(this.closed_at);
    output.writeFieldEnd();
  }
  if (this.grade_legend !== null && this.grade_legend !== undefined) {
    output.writeFieldBegin('grade_legend', Thrift.Type.STRUCT, 11);
    this.grade_legend.write(output);
    output.writeFieldEnd();
  }
  if (this.grades_published !== null && this.grades_published !== undefined) {
    output.writeFieldBegin('grades_published', Thrift.Type.BOOL, 12);
    output.writeBool(this.grades_published);
    output.writeFieldEnd();
  }
  if (this.tweet_prefill !== null && this.tweet_prefill !== undefined) {
    output.writeFieldBegin('tweet_prefill', Thrift.Type.STRING, 13);
    output.writeString(this.tweet_prefill);
    output.writeFieldEnd();
  }
  if (this.rich_text_summary !== null && this.rich_text_summary !== undefined) {
    output.writeFieldBegin('rich_text_summary', Thrift.Type.STRING, 14);
    output.writeString(this.rich_text_summary);
    output.writeFieldEnd();
  }
  if (this.email_snippet !== null && this.email_snippet !== undefined) {
    output.writeFieldBegin('email_snippet', Thrift.Type.STRING, 15);
    output.writeString(this.email_snippet);
    output.writeFieldEnd();
  }
  if (this.invitation_prefill !== null && this.invitation_prefill !== undefined) {
    output.writeFieldBegin('invitation_prefill', Thrift.Type.STRING, 16);
    output.writeString(this.invitation_prefill);
    output.writeFieldEnd();
  }
  if (this.report_recap !== null && this.report_recap !== undefined) {
    output.writeFieldBegin('report_recap', Thrift.Type.STRING, 17);
    output.writeString(this.report_recap);
    output.writeFieldEnd();
  }
  if (this.rich_text_report_recap !== null && this.rich_text_report_recap !== undefined) {
    output.writeFieldBegin('rich_text_report_recap', Thrift.Type.STRING, 18);
    output.writeString(this.rich_text_report_recap);
    output.writeFieldEnd();
  }
  if (this.target_types !== null && this.target_types !== undefined) {
    output.writeFieldBegin('target_types', Thrift.Type.LIST, 19);
    output.writeListBegin(Thrift.Type.I32, this.target_types.length);
    for (var iter7 in this.target_types)
    {
      if (this.target_types.hasOwnProperty(iter7))
      {
        iter7 = this.target_types[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionGradeCount = module.exports.PetitionGradeCount = function(args) {
  this.petition_uid = null;
  this.success_count = null;
  this.neutral_count = null;
  this.failure_count = null;
  this.ungraded_count = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.success_count !== undefined && args.success_count !== null) {
      this.success_count = args.success_count;
    }
    if (args.neutral_count !== undefined && args.neutral_count !== null) {
      this.neutral_count = args.neutral_count;
    }
    if (args.failure_count !== undefined && args.failure_count !== null) {
      this.failure_count = args.failure_count;
    }
    if (args.ungraded_count !== undefined && args.ungraded_count !== null) {
      this.ungraded_count = args.ungraded_count;
    }
  }
};
PetitionGradeCount.prototype = {};
PetitionGradeCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.success_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.neutral_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.failure_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ungraded_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionGradeCount.prototype.write = function(output) {
  output.writeStructBegin('PetitionGradeCount');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.success_count !== null && this.success_count !== undefined) {
    output.writeFieldBegin('success_count', Thrift.Type.I32, 2);
    output.writeI32(this.success_count);
    output.writeFieldEnd();
  }
  if (this.neutral_count !== null && this.neutral_count !== undefined) {
    output.writeFieldBegin('neutral_count', Thrift.Type.I32, 3);
    output.writeI32(this.neutral_count);
    output.writeFieldEnd();
  }
  if (this.failure_count !== null && this.failure_count !== undefined) {
    output.writeFieldBegin('failure_count', Thrift.Type.I32, 4);
    output.writeI32(this.failure_count);
    output.writeFieldEnd();
  }
  if (this.ungraded_count !== null && this.ungraded_count !== undefined) {
    output.writeFieldBegin('ungraded_count', Thrift.Type.I32, 5);
    output.writeI32(this.ungraded_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionGradeCounts = module.exports.PetitionGradeCounts = function(args) {
  this.petition_grade_counts = null;
  if (args) {
    if (args.petition_grade_counts !== undefined && args.petition_grade_counts !== null) {
      this.petition_grade_counts = Thrift.copyList(args.petition_grade_counts, [ttypes.PetitionGradeCount]);
    }
  }
};
PetitionGradeCounts.prototype = {};
PetitionGradeCounts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.petition_grade_counts = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.PetitionGradeCount();
          elem14.read(input);
          this.petition_grade_counts.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionGradeCounts.prototype.write = function(output) {
  output.writeStructBegin('PetitionGradeCounts');
  if (this.petition_grade_counts !== null && this.petition_grade_counts !== undefined) {
    output.writeFieldBegin('petition_grade_counts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.petition_grade_counts.length);
    for (var iter15 in this.petition_grade_counts)
    {
      if (this.petition_grade_counts.hasOwnProperty(iter15))
      {
        iter15 = this.petition_grade_counts[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionUniqueIdentifiers = module.exports.PetitionUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
PetitionUniqueIdentifiers.prototype = {};
PetitionUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.uids = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.uids.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('PetitionUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter23 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter23))
      {
        iter23 = this.uids[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Petitions = module.exports.Petitions = function(args) {
  this.petitions = null;
  if (args) {
    if (args.petitions !== undefined && args.petitions !== null) {
      this.petitions = Thrift.copyList(args.petitions, [ttypes.Petition]);
    }
  }
};
Petitions.prototype = {};
Petitions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.petitions = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Petition();
          elem30.read(input);
          this.petitions.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Petitions.prototype.write = function(output) {
  output.writeStructBegin('Petitions');
  if (this.petitions !== null && this.petitions !== undefined) {
    output.writeFieldBegin('petitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.petitions.length);
    for (var iter31 in this.petitions)
    {
      if (this.petitions.hasOwnProperty(iter31))
      {
        iter31 = this.petitions[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedPetitions = module.exports.PaginatedPetitions = function(args) {
  this.page_info = null;
  this.petitions = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.petitions !== undefined && args.petitions !== null) {
      this.petitions = Thrift.copyList(args.petitions, [ttypes.Petition]);
    }
  }
};
PaginatedPetitions.prototype = {};
PaginatedPetitions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.petitions = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.Petition();
          elem38.read(input);
          this.petitions.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedPetitions.prototype.write = function(output) {
  output.writeStructBegin('PaginatedPetitions');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.petitions !== null && this.petitions !== undefined) {
    output.writeFieldBegin('petitions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.petitions.length);
    for (var iter39 in this.petitions)
    {
      if (this.petitions.hasOwnProperty(iter39))
      {
        iter39 = this.petitions[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionSignature = module.exports.PetitionSignature = function(args) {
  this.uid = null;
  this.entity_uuid = null;
  this.petition_uid = null;
  this.created_at = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    }
  }
};
PetitionSignature.prototype = {};
PetitionSignature.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionSignature.prototype.write = function(output) {
  output.writeStructBegin('PetitionSignature');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 3);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 4);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionSignatureCount = module.exports.PetitionSignatureCount = function(args) {
  this.petition_uid = null;
  this.signature_count = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.signature_count !== undefined && args.signature_count !== null) {
      this.signature_count = args.signature_count;
    }
  }
};
PetitionSignatureCount.prototype = {};
PetitionSignatureCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.signature_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionSignatureCount.prototype.write = function(output) {
  output.writeStructBegin('PetitionSignatureCount');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.signature_count !== null && this.signature_count !== undefined) {
    output.writeFieldBegin('signature_count', Thrift.Type.I32, 2);
    output.writeI32(this.signature_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionSignatureCounts = module.exports.PetitionSignatureCounts = function(args) {
  this.petition_signature_counts = null;
  if (args) {
    if (args.petition_signature_counts !== undefined && args.petition_signature_counts !== null) {
      this.petition_signature_counts = Thrift.copyList(args.petition_signature_counts, [ttypes.PetitionSignatureCount]);
    }
  }
};
PetitionSignatureCounts.prototype = {};
PetitionSignatureCounts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.petition_signature_counts = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.PetitionSignatureCount();
          elem46.read(input);
          this.petition_signature_counts.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionSignatureCounts.prototype.write = function(output) {
  output.writeStructBegin('PetitionSignatureCounts');
  if (this.petition_signature_counts !== null && this.petition_signature_counts !== undefined) {
    output.writeFieldBegin('petition_signature_counts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.petition_signature_counts.length);
    for (var iter47 in this.petition_signature_counts)
    {
      if (this.petition_signature_counts.hasOwnProperty(iter47))
      {
        iter47 = this.petition_signature_counts[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityPetitionIdentifier = module.exports.EntityPetitionIdentifier = function(args) {
  this.entity_uuid = null;
  this.petition_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
  }
};
EntityPetitionIdentifier.prototype = {};
EntityPetitionIdentifier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityPetitionIdentifier.prototype.write = function(output) {
  output.writeStructBegin('EntityPetitionIdentifier');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 2);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionSignatureFilterIdentifiers = module.exports.PetitionSignatureFilterIdentifiers = function(args) {
  this.entity_petition_identifiers = null;
  if (args) {
    if (args.entity_petition_identifiers !== undefined && args.entity_petition_identifiers !== null) {
      this.entity_petition_identifiers = Thrift.copyList(args.entity_petition_identifiers, [ttypes.EntityPetitionIdentifier]);
    }
  }
};
PetitionSignatureFilterIdentifiers.prototype = {};
PetitionSignatureFilterIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.entity_petition_identifiers = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.EntityPetitionIdentifier();
          elem54.read(input);
          this.entity_petition_identifiers.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionSignatureFilterIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('PetitionSignatureFilterIdentifiers');
  if (this.entity_petition_identifiers !== null && this.entity_petition_identifiers !== undefined) {
    output.writeFieldBegin('entity_petition_identifiers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.entity_petition_identifiers.length);
    for (var iter55 in this.entity_petition_identifiers)
    {
      if (this.entity_petition_identifiers.hasOwnProperty(iter55))
      {
        iter55 = this.entity_petition_identifiers[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilteredPetitionSignatureIdentifiers = module.exports.FilteredPetitionSignatureIdentifiers = function(args) {
  this.filtered_identifiers = null;
  if (args) {
    if (args.filtered_identifiers !== undefined && args.filtered_identifiers !== null) {
      this.filtered_identifiers = new ttypes.PetitionSignatureFilterIdentifiers(args.filtered_identifiers);
    }
  }
};
FilteredPetitionSignatureIdentifiers.prototype = {};
FilteredPetitionSignatureIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filtered_identifiers = new ttypes.PetitionSignatureFilterIdentifiers();
        this.filtered_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilteredPetitionSignatureIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('FilteredPetitionSignatureIdentifiers');
  if (this.filtered_identifiers !== null && this.filtered_identifiers !== undefined) {
    output.writeFieldBegin('filtered_identifiers', Thrift.Type.STRUCT, 1);
    this.filtered_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedPetitionSignatures = module.exports.PaginatedPetitionSignatures = function(args) {
  this.page_info = null;
  this.petition_signatures = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.petition_signatures !== undefined && args.petition_signatures !== null) {
      this.petition_signatures = Thrift.copyList(args.petition_signatures, [ttypes.PetitionSignature]);
    }
  }
};
PaginatedPetitionSignatures.prototype = {};
PaginatedPetitionSignatures.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.petition_signatures = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.PetitionSignature();
          elem62.read(input);
          this.petition_signatures.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedPetitionSignatures.prototype.write = function(output) {
  output.writeStructBegin('PaginatedPetitionSignatures');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.petition_signatures !== null && this.petition_signatures !== undefined) {
    output.writeFieldBegin('petition_signatures', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.petition_signatures.length);
    for (var iter63 in this.petition_signatures)
    {
      if (this.petition_signatures.hasOwnProperty(iter63))
      {
        iter63 = this.petition_signatures[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionTermTarget = module.exports.PetitionTermTarget = function(args) {
  this.uid = null;
  this.petition_uid = null;
  this.term_uid = null;
  this.grade = null;
  this.grade_reason = null;
  this.rich_text_grade_reason = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.term_uid !== undefined && args.term_uid !== null) {
      this.term_uid = args.term_uid;
    }
    if (args.grade !== undefined && args.grade !== null) {
      this.grade = args.grade;
    }
    if (args.grade_reason !== undefined && args.grade_reason !== null) {
      this.grade_reason = args.grade_reason;
    }
    if (args.rich_text_grade_reason !== undefined && args.rich_text_grade_reason !== null) {
      this.rich_text_grade_reason = args.rich_text_grade_reason;
    }
  }
};
PetitionTermTarget.prototype = {};
PetitionTermTarget.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.term_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.grade = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.grade_reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_grade_reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionTermTarget.prototype.write = function(output) {
  output.writeStructBegin('PetitionTermTarget');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 3);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.term_uid !== null && this.term_uid !== undefined) {
    output.writeFieldBegin('term_uid', Thrift.Type.STRING, 2);
    output.writeString(this.term_uid);
    output.writeFieldEnd();
  }
  if (this.grade !== null && this.grade !== undefined) {
    output.writeFieldBegin('grade', Thrift.Type.I32, 4);
    output.writeI32(this.grade);
    output.writeFieldEnd();
  }
  if (this.grade_reason !== null && this.grade_reason !== undefined) {
    output.writeFieldBegin('grade_reason', Thrift.Type.STRING, 5);
    output.writeString(this.grade_reason);
    output.writeFieldEnd();
  }
  if (this.rich_text_grade_reason !== null && this.rich_text_grade_reason !== undefined) {
    output.writeFieldBegin('rich_text_grade_reason', Thrift.Type.STRING, 6);
    output.writeString(this.rich_text_grade_reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionCandidacyTarget = module.exports.PetitionCandidacyTarget = function(args) {
  this.uid = null;
  this.petition_uid = null;
  this.candidacy_uid = null;
  this.grade = null;
  this.grade_reason = null;
  this.rich_text_grade_reason = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.candidacy_uid !== undefined && args.candidacy_uid !== null) {
      this.candidacy_uid = args.candidacy_uid;
    }
    if (args.grade !== undefined && args.grade !== null) {
      this.grade = args.grade;
    }
    if (args.grade_reason !== undefined && args.grade_reason !== null) {
      this.grade_reason = args.grade_reason;
    }
    if (args.rich_text_grade_reason !== undefined && args.rich_text_grade_reason !== null) {
      this.rich_text_grade_reason = args.rich_text_grade_reason;
    }
  }
};
PetitionCandidacyTarget.prototype = {};
PetitionCandidacyTarget.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.candidacy_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.grade = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.grade_reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_grade_reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionCandidacyTarget.prototype.write = function(output) {
  output.writeStructBegin('PetitionCandidacyTarget');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 3);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.candidacy_uid !== null && this.candidacy_uid !== undefined) {
    output.writeFieldBegin('candidacy_uid', Thrift.Type.STRING, 2);
    output.writeString(this.candidacy_uid);
    output.writeFieldEnd();
  }
  if (this.grade !== null && this.grade !== undefined) {
    output.writeFieldBegin('grade', Thrift.Type.I32, 4);
    output.writeI32(this.grade);
    output.writeFieldEnd();
  }
  if (this.grade_reason !== null && this.grade_reason !== undefined) {
    output.writeFieldBegin('grade_reason', Thrift.Type.STRING, 5);
    output.writeString(this.grade_reason);
    output.writeFieldEnd();
  }
  if (this.rich_text_grade_reason !== null && this.rich_text_grade_reason !== undefined) {
    output.writeFieldBegin('rich_text_grade_reason', Thrift.Type.STRING, 6);
    output.writeString(this.rich_text_grade_reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionTarget = module.exports.PetitionTarget = function(args) {
  this.term_target = null;
  this.candidacy_target = null;
  if (args) {
    if (args.term_target !== undefined && args.term_target !== null) {
      this.term_target = new ttypes.PetitionTermTarget(args.term_target);
    }
    if (args.candidacy_target !== undefined && args.candidacy_target !== null) {
      this.candidacy_target = new ttypes.PetitionCandidacyTarget(args.candidacy_target);
    }
  }
};
PetitionTarget.prototype = {};
PetitionTarget.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.term_target = new ttypes.PetitionTermTarget();
        this.term_target.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.candidacy_target = new ttypes.PetitionCandidacyTarget();
        this.candidacy_target.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionTarget.prototype.write = function(output) {
  output.writeStructBegin('PetitionTarget');
  if (this.term_target !== null && this.term_target !== undefined) {
    output.writeFieldBegin('term_target', Thrift.Type.STRUCT, 1);
    this.term_target.write(output);
    output.writeFieldEnd();
  }
  if (this.candidacy_target !== null && this.candidacy_target !== undefined) {
    output.writeFieldBegin('candidacy_target', Thrift.Type.STRUCT, 2);
    this.candidacy_target.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedPetitionTargets = module.exports.PaginatedPetitionTargets = function(args) {
  this.page_info = null;
  this.petition_targets = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.petition_targets !== undefined && args.petition_targets !== null) {
      this.petition_targets = Thrift.copyList(args.petition_targets, [ttypes.PetitionTarget]);
    }
  }
};
PaginatedPetitionTargets.prototype = {};
PaginatedPetitionTargets.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.petition_targets = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.PetitionTarget();
          elem70.read(input);
          this.petition_targets.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedPetitionTargets.prototype.write = function(output) {
  output.writeStructBegin('PaginatedPetitionTargets');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.petition_targets !== null && this.petition_targets !== undefined) {
    output.writeFieldBegin('petition_targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.petition_targets.length);
    for (var iter71 in this.petition_targets)
    {
      if (this.petition_targets.hasOwnProperty(iter71))
      {
        iter71 = this.petition_targets[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddTermTargetItem = module.exports.AddTermTargetItem = function(args) {
  this.term_uid = null;
  this.district_uid = null;
  if (args) {
    if (args.term_uid !== undefined && args.term_uid !== null) {
      this.term_uid = args.term_uid;
    }
    if (args.district_uid !== undefined && args.district_uid !== null) {
      this.district_uid = args.district_uid;
    }
  }
};
AddTermTargetItem.prototype = {};
AddTermTargetItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.term_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.district_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddTermTargetItem.prototype.write = function(output) {
  output.writeStructBegin('AddTermTargetItem');
  if (this.term_uid !== null && this.term_uid !== undefined) {
    output.writeFieldBegin('term_uid', Thrift.Type.STRING, 1);
    output.writeString(this.term_uid);
    output.writeFieldEnd();
  }
  if (this.district_uid !== null && this.district_uid !== undefined) {
    output.writeFieldBegin('district_uid', Thrift.Type.STRING, 2);
    output.writeString(this.district_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddCandidacyTargetItem = module.exports.AddCandidacyTargetItem = function(args) {
  this.candidacy_uid = null;
  this.district_uid = null;
  if (args) {
    if (args.candidacy_uid !== undefined && args.candidacy_uid !== null) {
      this.candidacy_uid = args.candidacy_uid;
    }
    if (args.district_uid !== undefined && args.district_uid !== null) {
      this.district_uid = args.district_uid;
    }
  }
};
AddCandidacyTargetItem.prototype = {};
AddCandidacyTargetItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.candidacy_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.district_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddCandidacyTargetItem.prototype.write = function(output) {
  output.writeStructBegin('AddCandidacyTargetItem');
  if (this.candidacy_uid !== null && this.candidacy_uid !== undefined) {
    output.writeFieldBegin('candidacy_uid', Thrift.Type.STRING, 1);
    output.writeString(this.candidacy_uid);
    output.writeFieldEnd();
  }
  if (this.district_uid !== null && this.district_uid !== undefined) {
    output.writeFieldBegin('district_uid', Thrift.Type.STRING, 2);
    output.writeString(this.district_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GradePetitionTargetsItem = module.exports.GradePetitionTargetsItem = function(args) {
  this.petition_target_uid = null;
  this.petition_target_type = null;
  this.petition_target_grade = null;
  this.petition_target_grade_reason = null;
  this.petition_target_rich_text_grade_reason = null;
  if (args) {
    if (args.petition_target_uid !== undefined && args.petition_target_uid !== null) {
      this.petition_target_uid = args.petition_target_uid;
    }
    if (args.petition_target_type !== undefined && args.petition_target_type !== null) {
      this.petition_target_type = args.petition_target_type;
    }
    if (args.petition_target_grade !== undefined && args.petition_target_grade !== null) {
      this.petition_target_grade = args.petition_target_grade;
    }
    if (args.petition_target_grade_reason !== undefined && args.petition_target_grade_reason !== null) {
      this.petition_target_grade_reason = args.petition_target_grade_reason;
    }
    if (args.petition_target_rich_text_grade_reason !== undefined && args.petition_target_rich_text_grade_reason !== null) {
      this.petition_target_rich_text_grade_reason = args.petition_target_rich_text_grade_reason;
    }
  }
};
GradePetitionTargetsItem.prototype = {};
GradePetitionTargetsItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_target_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.petition_target_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.petition_target_grade = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.petition_target_grade_reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.petition_target_rich_text_grade_reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GradePetitionTargetsItem.prototype.write = function(output) {
  output.writeStructBegin('GradePetitionTargetsItem');
  if (this.petition_target_uid !== null && this.petition_target_uid !== undefined) {
    output.writeFieldBegin('petition_target_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_target_uid);
    output.writeFieldEnd();
  }
  if (this.petition_target_type !== null && this.petition_target_type !== undefined) {
    output.writeFieldBegin('petition_target_type', Thrift.Type.I32, 2);
    output.writeI32(this.petition_target_type);
    output.writeFieldEnd();
  }
  if (this.petition_target_grade !== null && this.petition_target_grade !== undefined) {
    output.writeFieldBegin('petition_target_grade', Thrift.Type.I32, 3);
    output.writeI32(this.petition_target_grade);
    output.writeFieldEnd();
  }
  if (this.petition_target_grade_reason !== null && this.petition_target_grade_reason !== undefined) {
    output.writeFieldBegin('petition_target_grade_reason', Thrift.Type.STRING, 4);
    output.writeString(this.petition_target_grade_reason);
    output.writeFieldEnd();
  }
  if (this.petition_target_rich_text_grade_reason !== null && this.petition_target_rich_text_grade_reason !== undefined) {
    output.writeFieldBegin('petition_target_rich_text_grade_reason', Thrift.Type.STRING, 5);
    output.writeString(this.petition_target_rich_text_grade_reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityTermPetitionGradeCount = module.exports.EntityTermPetitionGradeCount = function(args) {
  this.entity_uuid = null;
  this.term_uid = null;
  this.success_count = null;
  this.failure_count = null;
  this.neutral_count = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.term_uid !== undefined && args.term_uid !== null) {
      this.term_uid = args.term_uid;
    }
    if (args.success_count !== undefined && args.success_count !== null) {
      this.success_count = args.success_count;
    }
    if (args.failure_count !== undefined && args.failure_count !== null) {
      this.failure_count = args.failure_count;
    }
    if (args.neutral_count !== undefined && args.neutral_count !== null) {
      this.neutral_count = args.neutral_count;
    }
  }
};
EntityTermPetitionGradeCount.prototype = {};
EntityTermPetitionGradeCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.term_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.success_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.failure_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.neutral_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityTermPetitionGradeCount.prototype.write = function(output) {
  output.writeStructBegin('EntityTermPetitionGradeCount');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.term_uid !== null && this.term_uid !== undefined) {
    output.writeFieldBegin('term_uid', Thrift.Type.STRING, 2);
    output.writeString(this.term_uid);
    output.writeFieldEnd();
  }
  if (this.success_count !== null && this.success_count !== undefined) {
    output.writeFieldBegin('success_count', Thrift.Type.I32, 3);
    output.writeI32(this.success_count);
    output.writeFieldEnd();
  }
  if (this.failure_count !== null && this.failure_count !== undefined) {
    output.writeFieldBegin('failure_count', Thrift.Type.I32, 4);
    output.writeI32(this.failure_count);
    output.writeFieldEnd();
  }
  if (this.neutral_count !== null && this.neutral_count !== undefined) {
    output.writeFieldBegin('neutral_count', Thrift.Type.I32, 5);
    output.writeI32(this.neutral_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionTargets = module.exports.PetitionTargets = function(args) {
  this.petition_targets = null;
  if (args) {
    if (args.petition_targets !== undefined && args.petition_targets !== null) {
      this.petition_targets = Thrift.copyList(args.petition_targets, [ttypes.PetitionTarget]);
    }
  }
};
PetitionTargets.prototype = {};
PetitionTargets.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.petition_targets = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.PetitionTarget();
          elem78.read(input);
          this.petition_targets.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionTargets.prototype.write = function(output) {
  output.writeStructBegin('PetitionTargets');
  if (this.petition_targets !== null && this.petition_targets !== undefined) {
    output.writeFieldBegin('petition_targets', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.petition_targets.length);
    for (var iter79 in this.petition_targets)
    {
      if (this.petition_targets.hasOwnProperty(iter79))
      {
        iter79 = this.petition_targets[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventUniqueIdentifiers = module.exports.EventUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
EventUniqueIdentifiers.prototype = {};
EventUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.uids = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readString();
          this.uids.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('EventUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter87 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter87))
      {
        iter87 = this.uids[iter87];
        output.writeString(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Event = module.exports.Event = function(args) {
  this.uid = null;
  this.title = null;
  this.start_date = null;
  this.end_date = null;
  this.location = null;
  this.description = null;
  this.rich_text_description = null;
  this.image = null;
  this.creator_entity_uuid = null;
  this.is_approved = null;
  this.cost = null;
  this.external_link_url = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.start_date !== undefined && args.start_date !== null) {
      this.start_date = args.start_date;
    }
    if (args.end_date !== undefined && args.end_date !== null) {
      this.end_date = args.end_date;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.rich_text_description !== undefined && args.rich_text_description !== null) {
      this.rich_text_description = args.rich_text_description;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.creator_entity_uuid !== undefined && args.creator_entity_uuid !== null) {
      this.creator_entity_uuid = args.creator_entity_uuid;
    }
    if (args.is_approved !== undefined && args.is_approved !== null) {
      this.is_approved = args.is_approved;
    }
    if (args.cost !== undefined && args.cost !== null) {
      this.cost = args.cost;
    }
    if (args.external_link_url !== undefined && args.external_link_url !== null) {
      this.external_link_url = args.external_link_url;
    }
  }
};
Event.prototype = {};
Event.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.start_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.end_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.creator_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.is_approved = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.cost = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.external_link_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Event.prototype.write = function(output) {
  output.writeStructBegin('Event');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.start_date !== null && this.start_date !== undefined) {
    output.writeFieldBegin('start_date', Thrift.Type.STRING, 3);
    output.writeString(this.start_date);
    output.writeFieldEnd();
  }
  if (this.end_date !== null && this.end_date !== undefined) {
    output.writeFieldBegin('end_date', Thrift.Type.STRING, 4);
    output.writeString(this.end_date);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 5);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.rich_text_description !== null && this.rich_text_description !== undefined) {
    output.writeFieldBegin('rich_text_description', Thrift.Type.STRING, 7);
    output.writeString(this.rich_text_description);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 8);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.creator_entity_uuid !== null && this.creator_entity_uuid !== undefined) {
    output.writeFieldBegin('creator_entity_uuid', Thrift.Type.STRING, 9);
    output.writeString(this.creator_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.is_approved !== null && this.is_approved !== undefined) {
    output.writeFieldBegin('is_approved', Thrift.Type.BOOL, 10);
    output.writeBool(this.is_approved);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.STRING, 11);
    output.writeString(this.cost);
    output.writeFieldEnd();
  }
  if (this.external_link_url !== null && this.external_link_url !== undefined) {
    output.writeFieldBegin('external_link_url', Thrift.Type.STRING, 12);
    output.writeString(this.external_link_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Events = module.exports.Events = function(args) {
  this.events = null;
  if (args) {
    if (args.events !== undefined && args.events !== null) {
      this.events = Thrift.copyList(args.events, [ttypes.Event]);
    }
  }
};
Events.prototype = {};
Events.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.events = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.Event();
          elem94.read(input);
          this.events.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Events.prototype.write = function(output) {
  output.writeStructBegin('Events');
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter95 in this.events)
    {
      if (this.events.hasOwnProperty(iter95))
      {
        iter95 = this.events[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedEvents = module.exports.PaginatedEvents = function(args) {
  this.page_info = null;
  this.events = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.events !== undefined && args.events !== null) {
      this.events = Thrift.copyList(args.events, [ttypes.Event]);
    }
  }
};
PaginatedEvents.prototype = {};
PaginatedEvents.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.events = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.Event();
          elem102.read(input);
          this.events.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedEvents.prototype.write = function(output) {
  output.writeStructBegin('PaginatedEvents');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter103 in this.events)
    {
      if (this.events.hasOwnProperty(iter103))
      {
        iter103 = this.events[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEntitySignaturesFilterParams = module.exports.GetEntitySignaturesFilterParams = function(args) {
  this.petition_uids = null;
  this.graded = null;
  this.typed_target_uids = null;
  this.term_uids = null;
  if (args) {
    if (args.petition_uids !== undefined && args.petition_uids !== null) {
      this.petition_uids = Thrift.copyList(args.petition_uids, [null]);
    }
    if (args.graded !== undefined && args.graded !== null) {
      this.graded = args.graded;
    }
    if (args.typed_target_uids !== undefined && args.typed_target_uids !== null) {
      this.typed_target_uids = Thrift.copyList(args.typed_target_uids, [ttypes.PetitionTypedTargetUid]);
    }
    if (args.term_uids !== undefined && args.term_uids !== null) {
      this.term_uids = Thrift.copyList(args.term_uids, [null]);
    }
  }
};
GetEntitySignaturesFilterParams.prototype = {};
GetEntitySignaturesFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.petition_uids = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString();
          this.petition_uids.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.graded = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size111 = 0;
        var _rtmp3115;
        this.typed_target_uids = [];
        var _etype114 = 0;
        _rtmp3115 = input.readListBegin();
        _etype114 = _rtmp3115.etype;
        _size111 = _rtmp3115.size;
        for (var _i116 = 0; _i116 < _size111; ++_i116)
        {
          var elem117 = null;
          elem117 = new ttypes.PetitionTypedTargetUid();
          elem117.read(input);
          this.typed_target_uids.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size118 = 0;
        var _rtmp3122;
        this.term_uids = [];
        var _etype121 = 0;
        _rtmp3122 = input.readListBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = input.readString();
          this.term_uids.push(elem124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEntitySignaturesFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetEntitySignaturesFilterParams');
  if (this.petition_uids !== null && this.petition_uids !== undefined) {
    output.writeFieldBegin('petition_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.petition_uids.length);
    for (var iter125 in this.petition_uids)
    {
      if (this.petition_uids.hasOwnProperty(iter125))
      {
        iter125 = this.petition_uids[iter125];
        output.writeString(iter125);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.graded !== null && this.graded !== undefined) {
    output.writeFieldBegin('graded', Thrift.Type.BOOL, 2);
    output.writeBool(this.graded);
    output.writeFieldEnd();
  }
  if (this.typed_target_uids !== null && this.typed_target_uids !== undefined) {
    output.writeFieldBegin('typed_target_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.typed_target_uids.length);
    for (var iter126 in this.typed_target_uids)
    {
      if (this.typed_target_uids.hasOwnProperty(iter126))
      {
        iter126 = this.typed_target_uids[iter126];
        iter126.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.term_uids !== null && this.term_uids !== undefined) {
    output.writeFieldBegin('term_uids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.term_uids.length);
    for (var iter127 in this.term_uids)
    {
      if (this.term_uids.hasOwnProperty(iter127))
      {
        iter127 = this.term_uids[iter127];
        output.writeString(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionsFilterParams = module.exports.GetPetitionsFilterParams = function(args) {
  this.petition_uids = null;
  this.lifecycle_states = null;
  this.signed_by_entity_uuids = null;
  this.unsigned_by_entity_uuid = null;
  this.typed_target_uids = null;
  this.term_uids = null;
  if (args) {
    if (args.petition_uids !== undefined && args.petition_uids !== null) {
      this.petition_uids = Thrift.copyList(args.petition_uids, [null]);
    }
    if (args.lifecycle_states !== undefined && args.lifecycle_states !== null) {
      this.lifecycle_states = Thrift.copyList(args.lifecycle_states, [null]);
    }
    if (args.signed_by_entity_uuids !== undefined && args.signed_by_entity_uuids !== null) {
      this.signed_by_entity_uuids = Thrift.copyList(args.signed_by_entity_uuids, [null]);
    }
    if (args.unsigned_by_entity_uuid !== undefined && args.unsigned_by_entity_uuid !== null) {
      this.unsigned_by_entity_uuid = args.unsigned_by_entity_uuid;
    }
    if (args.typed_target_uids !== undefined && args.typed_target_uids !== null) {
      this.typed_target_uids = Thrift.copyList(args.typed_target_uids, [ttypes.PetitionTypedTargetUid]);
    }
    if (args.term_uids !== undefined && args.term_uids !== null) {
      this.term_uids = Thrift.copyList(args.term_uids, [null]);
    }
  }
};
GetPetitionsFilterParams.prototype = {};
GetPetitionsFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.petition_uids = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readString();
          this.petition_uids.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size135 = 0;
        var _rtmp3139;
        this.lifecycle_states = [];
        var _etype138 = 0;
        _rtmp3139 = input.readListBegin();
        _etype138 = _rtmp3139.etype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var elem141 = null;
          elem141 = input.readI32();
          this.lifecycle_states.push(elem141);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size142 = 0;
        var _rtmp3146;
        this.signed_by_entity_uuids = [];
        var _etype145 = 0;
        _rtmp3146 = input.readListBegin();
        _etype145 = _rtmp3146.etype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var elem148 = null;
          elem148 = input.readString();
          this.signed_by_entity_uuids.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.unsigned_by_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size149 = 0;
        var _rtmp3153;
        this.typed_target_uids = [];
        var _etype152 = 0;
        _rtmp3153 = input.readListBegin();
        _etype152 = _rtmp3153.etype;
        _size149 = _rtmp3153.size;
        for (var _i154 = 0; _i154 < _size149; ++_i154)
        {
          var elem155 = null;
          elem155 = new ttypes.PetitionTypedTargetUid();
          elem155.read(input);
          this.typed_target_uids.push(elem155);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.term_uids = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = input.readString();
          this.term_uids.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionsFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionsFilterParams');
  if (this.petition_uids !== null && this.petition_uids !== undefined) {
    output.writeFieldBegin('petition_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.petition_uids.length);
    for (var iter163 in this.petition_uids)
    {
      if (this.petition_uids.hasOwnProperty(iter163))
      {
        iter163 = this.petition_uids[iter163];
        output.writeString(iter163);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lifecycle_states !== null && this.lifecycle_states !== undefined) {
    output.writeFieldBegin('lifecycle_states', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.lifecycle_states.length);
    for (var iter164 in this.lifecycle_states)
    {
      if (this.lifecycle_states.hasOwnProperty(iter164))
      {
        iter164 = this.lifecycle_states[iter164];
        output.writeI32(iter164);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.signed_by_entity_uuids !== null && this.signed_by_entity_uuids !== undefined) {
    output.writeFieldBegin('signed_by_entity_uuids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.signed_by_entity_uuids.length);
    for (var iter165 in this.signed_by_entity_uuids)
    {
      if (this.signed_by_entity_uuids.hasOwnProperty(iter165))
      {
        iter165 = this.signed_by_entity_uuids[iter165];
        output.writeString(iter165);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unsigned_by_entity_uuid !== null && this.unsigned_by_entity_uuid !== undefined) {
    output.writeFieldBegin('unsigned_by_entity_uuid', Thrift.Type.STRING, 6);
    output.writeString(this.unsigned_by_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.typed_target_uids !== null && this.typed_target_uids !== undefined) {
    output.writeFieldBegin('typed_target_uids', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.typed_target_uids.length);
    for (var iter166 in this.typed_target_uids)
    {
      if (this.typed_target_uids.hasOwnProperty(iter166))
      {
        iter166 = this.typed_target_uids[iter166];
        iter166.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.term_uids !== null && this.term_uids !== undefined) {
    output.writeFieldBegin('term_uids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.term_uids.length);
    for (var iter167 in this.term_uids)
    {
      if (this.term_uids.hasOwnProperty(iter167))
      {
        iter167 = this.term_uids[iter167];
        output.writeString(iter167);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionTargetsFilterParams = module.exports.GetPetitionTargetsFilterParams = function(args) {
  this.target_types = null;
  this.petition_uids = null;
  this.petition_target_uids = null;
  this.district_uids = null;
  this.exclude_district_uids = null;
  this.exclude_term_uids = null;
  this.term_uids = null;
  if (args) {
    if (args.target_types !== undefined && args.target_types !== null) {
      this.target_types = Thrift.copyList(args.target_types, [null]);
    }
    if (args.petition_uids !== undefined && args.petition_uids !== null) {
      this.petition_uids = Thrift.copyList(args.petition_uids, [null]);
    }
    if (args.petition_target_uids !== undefined && args.petition_target_uids !== null) {
      this.petition_target_uids = Thrift.copyList(args.petition_target_uids, [null]);
    }
    if (args.district_uids !== undefined && args.district_uids !== null) {
      this.district_uids = Thrift.copyList(args.district_uids, [null]);
    }
    if (args.exclude_district_uids !== undefined && args.exclude_district_uids !== null) {
      this.exclude_district_uids = Thrift.copyList(args.exclude_district_uids, [null]);
    }
    if (args.exclude_term_uids !== undefined && args.exclude_term_uids !== null) {
      this.exclude_term_uids = Thrift.copyList(args.exclude_term_uids, [null]);
    }
    if (args.term_uids !== undefined && args.term_uids !== null) {
      this.term_uids = Thrift.copyList(args.term_uids, [null]);
    }
  }
};
GetPetitionTargetsFilterParams.prototype = {};
GetPetitionTargetsFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.target_types = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = input.readI32();
          this.target_types.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size175 = 0;
        var _rtmp3179;
        this.petition_uids = [];
        var _etype178 = 0;
        _rtmp3179 = input.readListBegin();
        _etype178 = _rtmp3179.etype;
        _size175 = _rtmp3179.size;
        for (var _i180 = 0; _i180 < _size175; ++_i180)
        {
          var elem181 = null;
          elem181 = input.readString();
          this.petition_uids.push(elem181);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size182 = 0;
        var _rtmp3186;
        this.petition_target_uids = [];
        var _etype185 = 0;
        _rtmp3186 = input.readListBegin();
        _etype185 = _rtmp3186.etype;
        _size182 = _rtmp3186.size;
        for (var _i187 = 0; _i187 < _size182; ++_i187)
        {
          var elem188 = null;
          elem188 = input.readString();
          this.petition_target_uids.push(elem188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size189 = 0;
        var _rtmp3193;
        this.district_uids = [];
        var _etype192 = 0;
        _rtmp3193 = input.readListBegin();
        _etype192 = _rtmp3193.etype;
        _size189 = _rtmp3193.size;
        for (var _i194 = 0; _i194 < _size189; ++_i194)
        {
          var elem195 = null;
          elem195 = input.readString();
          this.district_uids.push(elem195);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.exclude_district_uids = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = input.readString();
          this.exclude_district_uids.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size203 = 0;
        var _rtmp3207;
        this.exclude_term_uids = [];
        var _etype206 = 0;
        _rtmp3207 = input.readListBegin();
        _etype206 = _rtmp3207.etype;
        _size203 = _rtmp3207.size;
        for (var _i208 = 0; _i208 < _size203; ++_i208)
        {
          var elem209 = null;
          elem209 = input.readString();
          this.exclude_term_uids.push(elem209);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size210 = 0;
        var _rtmp3214;
        this.term_uids = [];
        var _etype213 = 0;
        _rtmp3214 = input.readListBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = input.readString();
          this.term_uids.push(elem216);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionTargetsFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionTargetsFilterParams');
  if (this.target_types !== null && this.target_types !== undefined) {
    output.writeFieldBegin('target_types', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.target_types.length);
    for (var iter217 in this.target_types)
    {
      if (this.target_types.hasOwnProperty(iter217))
      {
        iter217 = this.target_types[iter217];
        output.writeI32(iter217);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.petition_uids !== null && this.petition_uids !== undefined) {
    output.writeFieldBegin('petition_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.petition_uids.length);
    for (var iter218 in this.petition_uids)
    {
      if (this.petition_uids.hasOwnProperty(iter218))
      {
        iter218 = this.petition_uids[iter218];
        output.writeString(iter218);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.petition_target_uids !== null && this.petition_target_uids !== undefined) {
    output.writeFieldBegin('petition_target_uids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.petition_target_uids.length);
    for (var iter219 in this.petition_target_uids)
    {
      if (this.petition_target_uids.hasOwnProperty(iter219))
      {
        iter219 = this.petition_target_uids[iter219];
        output.writeString(iter219);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.district_uids !== null && this.district_uids !== undefined) {
    output.writeFieldBegin('district_uids', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.district_uids.length);
    for (var iter220 in this.district_uids)
    {
      if (this.district_uids.hasOwnProperty(iter220))
      {
        iter220 = this.district_uids[iter220];
        output.writeString(iter220);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.exclude_district_uids !== null && this.exclude_district_uids !== undefined) {
    output.writeFieldBegin('exclude_district_uids', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.exclude_district_uids.length);
    for (var iter221 in this.exclude_district_uids)
    {
      if (this.exclude_district_uids.hasOwnProperty(iter221))
      {
        iter221 = this.exclude_district_uids[iter221];
        output.writeString(iter221);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.exclude_term_uids !== null && this.exclude_term_uids !== undefined) {
    output.writeFieldBegin('exclude_term_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.exclude_term_uids.length);
    for (var iter222 in this.exclude_term_uids)
    {
      if (this.exclude_term_uids.hasOwnProperty(iter222))
      {
        iter222 = this.exclude_term_uids[iter222];
        output.writeString(iter222);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.term_uids !== null && this.term_uids !== undefined) {
    output.writeFieldBegin('term_uids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.term_uids.length);
    for (var iter223 in this.term_uids)
    {
      if (this.term_uids.hasOwnProperty(iter223))
      {
        iter223 = this.term_uids[iter223];
        output.writeString(iter223);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEntitySignaturesSortParams = module.exports.GetEntitySignaturesSortParams = function(args) {
  this.sort_field = null;
  this.sort_order = null;
  if (args) {
    if (args.sort_field !== undefined && args.sort_field !== null) {
      this.sort_field = args.sort_field;
    }
    if (args.sort_order !== undefined && args.sort_order !== null) {
      this.sort_order = args.sort_order;
    }
  }
};
GetEntitySignaturesSortParams.prototype = {};
GetEntitySignaturesSortParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sort_field = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sort_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEntitySignaturesSortParams.prototype.write = function(output) {
  output.writeStructBegin('GetEntitySignaturesSortParams');
  if (this.sort_field !== null && this.sort_field !== undefined) {
    output.writeFieldBegin('sort_field', Thrift.Type.I32, 1);
    output.writeI32(this.sort_field);
    output.writeFieldEnd();
  }
  if (this.sort_order !== null && this.sort_order !== undefined) {
    output.writeFieldBegin('sort_order', Thrift.Type.I32, 2);
    output.writeI32(this.sort_order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionsSortParams = module.exports.GetPetitionsSortParams = function(args) {
  this.sort_field = null;
  this.sort_order = null;
  if (args) {
    if (args.sort_field !== undefined && args.sort_field !== null) {
      this.sort_field = args.sort_field;
    }
    if (args.sort_order !== undefined && args.sort_order !== null) {
      this.sort_order = args.sort_order;
    }
  }
};
GetPetitionsSortParams.prototype = {};
GetPetitionsSortParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sort_field = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sort_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionsSortParams.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionsSortParams');
  if (this.sort_field !== null && this.sort_field !== undefined) {
    output.writeFieldBegin('sort_field', Thrift.Type.I32, 1);
    output.writeI32(this.sort_field);
    output.writeFieldEnd();
  }
  if (this.sort_order !== null && this.sort_order !== undefined) {
    output.writeFieldBegin('sort_order', Thrift.Type.I32, 2);
    output.writeI32(this.sort_order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionTargetUniqueIdentifiers = module.exports.PetitionTargetUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
PetitionTargetUniqueIdentifiers.prototype = {};
PetitionTargetUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.uids = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readString();
          this.uids.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionTargetUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('PetitionTargetUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter231 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter231))
      {
        iter231 = this.uids[iter231];
        output.writeString(iter231);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddPetitionCandidacyTargetsRequest = module.exports.AddPetitionCandidacyTargetsRequest = function(args) {
  this.petition_uid = null;
  this.candidacy_targets = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.candidacy_targets !== undefined && args.candidacy_targets !== null) {
      this.candidacy_targets = Thrift.copyList(args.candidacy_targets, [ttypes.AddCandidacyTargetItem]);
    }
  }
};
AddPetitionCandidacyTargetsRequest.prototype = {};
AddPetitionCandidacyTargetsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size232 = 0;
        var _rtmp3236;
        this.candidacy_targets = [];
        var _etype235 = 0;
        _rtmp3236 = input.readListBegin();
        _etype235 = _rtmp3236.etype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var elem238 = null;
          elem238 = new ttypes.AddCandidacyTargetItem();
          elem238.read(input);
          this.candidacy_targets.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddPetitionCandidacyTargetsRequest.prototype.write = function(output) {
  output.writeStructBegin('AddPetitionCandidacyTargetsRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.candidacy_targets !== null && this.candidacy_targets !== undefined) {
    output.writeFieldBegin('candidacy_targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.candidacy_targets.length);
    for (var iter239 in this.candidacy_targets)
    {
      if (this.candidacy_targets.hasOwnProperty(iter239))
      {
        iter239 = this.candidacy_targets[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddPetitionTermTargetsRequest = module.exports.AddPetitionTermTargetsRequest = function(args) {
  this.petition_uid = null;
  this.term_targets = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.term_targets !== undefined && args.term_targets !== null) {
      this.term_targets = Thrift.copyList(args.term_targets, [ttypes.AddTermTargetItem]);
    }
  }
};
AddPetitionTermTargetsRequest.prototype = {};
AddPetitionTermTargetsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.term_targets = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = new ttypes.AddTermTargetItem();
          elem246.read(input);
          this.term_targets.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddPetitionTermTargetsRequest.prototype.write = function(output) {
  output.writeStructBegin('AddPetitionTermTargetsRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.term_targets !== null && this.term_targets !== undefined) {
    output.writeFieldBegin('term_targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.term_targets.length);
    for (var iter247 in this.term_targets)
    {
      if (this.term_targets.hasOwnProperty(iter247))
      {
        iter247 = this.term_targets[iter247];
        iter247.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClosePetitionRequest = module.exports.ClosePetitionRequest = function(args) {
  this.petition_uid = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
  }
};
ClosePetitionRequest.prototype = {};
ClosePetitionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClosePetitionRequest.prototype.write = function(output) {
  output.writeStructBegin('ClosePetitionRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreatePetitionSignatureRequest = module.exports.CreatePetitionSignatureRequest = function(args) {
  this.entity_uuid = null;
  this.entity_district_uids = null;
  this.petition_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.entity_district_uids !== undefined && args.entity_district_uids !== null) {
      this.entity_district_uids = Thrift.copyList(args.entity_district_uids, [null]);
    }
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
  }
};
CreatePetitionSignatureRequest.prototype = {};
CreatePetitionSignatureRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size248 = 0;
        var _rtmp3252;
        this.entity_district_uids = [];
        var _etype251 = 0;
        _rtmp3252 = input.readListBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = input.readString();
          this.entity_district_uids.push(elem254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreatePetitionSignatureRequest.prototype.write = function(output) {
  output.writeStructBegin('CreatePetitionSignatureRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.entity_district_uids !== null && this.entity_district_uids !== undefined) {
    output.writeFieldBegin('entity_district_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.entity_district_uids.length);
    for (var iter255 in this.entity_district_uids)
    {
      if (this.entity_district_uids.hasOwnProperty(iter255))
      {
        iter255 = this.entity_district_uids[iter255];
        output.writeString(iter255);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 3);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreatePetitionRequest = module.exports.CreatePetitionRequest = function(args) {
  this.title = null;
  this.summary = null;
  this.description = null;
  this.target_description = null;
  this.image = null;
  this.signature_goal = null;
  this.deadline = null;
  this.grade_legend = null;
  this.tweet_prefill = null;
  this.rich_text_summary = null;
  this.email_snippet = null;
  this.invitation_prefill = null;
  this.report_recap = null;
  this.rich_text_report_recap = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = args.summary;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.target_description !== undefined && args.target_description !== null) {
      this.target_description = args.target_description;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.signature_goal !== undefined && args.signature_goal !== null) {
      this.signature_goal = args.signature_goal;
    }
    if (args.deadline !== undefined && args.deadline !== null) {
      this.deadline = args.deadline;
    }
    if (args.grade_legend !== undefined && args.grade_legend !== null) {
      this.grade_legend = new ttypes.PetitionGradeLegend(args.grade_legend);
    }
    if (args.tweet_prefill !== undefined && args.tweet_prefill !== null) {
      this.tweet_prefill = args.tweet_prefill;
    }
    if (args.rich_text_summary !== undefined && args.rich_text_summary !== null) {
      this.rich_text_summary = args.rich_text_summary;
    }
    if (args.email_snippet !== undefined && args.email_snippet !== null) {
      this.email_snippet = args.email_snippet;
    }
    if (args.invitation_prefill !== undefined && args.invitation_prefill !== null) {
      this.invitation_prefill = args.invitation_prefill;
    }
    if (args.report_recap !== undefined && args.report_recap !== null) {
      this.report_recap = args.report_recap;
    }
    if (args.rich_text_report_recap !== undefined && args.rich_text_report_recap !== null) {
      this.rich_text_report_recap = args.rich_text_report_recap;
    }
  }
};
CreatePetitionRequest.prototype = {};
CreatePetitionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.target_description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.signature_goal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.deadline = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.grade_legend = new ttypes.PetitionGradeLegend();
        this.grade_legend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.tweet_prefill = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email_snippet = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_prefill = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.report_recap = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_report_recap = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreatePetitionRequest.prototype.write = function(output) {
  output.writeStructBegin('CreatePetitionRequest');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRING, 2);
    output.writeString(this.summary);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.target_description !== null && this.target_description !== undefined) {
    output.writeFieldBegin('target_description', Thrift.Type.STRING, 4);
    output.writeString(this.target_description);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 5);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.signature_goal !== null && this.signature_goal !== undefined) {
    output.writeFieldBegin('signature_goal', Thrift.Type.I32, 6);
    output.writeI32(this.signature_goal);
    output.writeFieldEnd();
  }
  if (this.deadline !== null && this.deadline !== undefined) {
    output.writeFieldBegin('deadline', Thrift.Type.STRING, 7);
    output.writeString(this.deadline);
    output.writeFieldEnd();
  }
  if (this.grade_legend !== null && this.grade_legend !== undefined) {
    output.writeFieldBegin('grade_legend', Thrift.Type.STRUCT, 8);
    this.grade_legend.write(output);
    output.writeFieldEnd();
  }
  if (this.tweet_prefill !== null && this.tweet_prefill !== undefined) {
    output.writeFieldBegin('tweet_prefill', Thrift.Type.STRING, 9);
    output.writeString(this.tweet_prefill);
    output.writeFieldEnd();
  }
  if (this.rich_text_summary !== null && this.rich_text_summary !== undefined) {
    output.writeFieldBegin('rich_text_summary', Thrift.Type.STRING, 10);
    output.writeString(this.rich_text_summary);
    output.writeFieldEnd();
  }
  if (this.email_snippet !== null && this.email_snippet !== undefined) {
    output.writeFieldBegin('email_snippet', Thrift.Type.STRING, 11);
    output.writeString(this.email_snippet);
    output.writeFieldEnd();
  }
  if (this.invitation_prefill !== null && this.invitation_prefill !== undefined) {
    output.writeFieldBegin('invitation_prefill', Thrift.Type.STRING, 12);
    output.writeString(this.invitation_prefill);
    output.writeFieldEnd();
  }
  if (this.report_recap !== null && this.report_recap !== undefined) {
    output.writeFieldBegin('report_recap', Thrift.Type.STRING, 13);
    output.writeString(this.report_recap);
    output.writeFieldEnd();
  }
  if (this.rich_text_report_recap !== null && this.rich_text_report_recap !== undefined) {
    output.writeFieldBegin('rich_text_report_recap', Thrift.Type.STRING, 14);
    output.writeString(this.rich_text_report_recap);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EditPetitionRequest = module.exports.EditPetitionRequest = function(args) {
  this.uid = null;
  this.title = null;
  this.summary = null;
  this.description = null;
  this.target_description = null;
  this.image = null;
  this.signature_goal = null;
  this.deadline = null;
  this.grade_legend = null;
  this.tweet_prefill = null;
  this.rich_text_summary = null;
  this.email_snippet = null;
  this.invitation_prefill = null;
  this.report_recap = null;
  this.rich_text_report_recap = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = args.summary;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.target_description !== undefined && args.target_description !== null) {
      this.target_description = args.target_description;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.signature_goal !== undefined && args.signature_goal !== null) {
      this.signature_goal = args.signature_goal;
    }
    if (args.deadline !== undefined && args.deadline !== null) {
      this.deadline = args.deadline;
    }
    if (args.grade_legend !== undefined && args.grade_legend !== null) {
      this.grade_legend = new ttypes.PetitionGradeLegend(args.grade_legend);
    }
    if (args.tweet_prefill !== undefined && args.tweet_prefill !== null) {
      this.tweet_prefill = args.tweet_prefill;
    }
    if (args.rich_text_summary !== undefined && args.rich_text_summary !== null) {
      this.rich_text_summary = args.rich_text_summary;
    }
    if (args.email_snippet !== undefined && args.email_snippet !== null) {
      this.email_snippet = args.email_snippet;
    }
    if (args.invitation_prefill !== undefined && args.invitation_prefill !== null) {
      this.invitation_prefill = args.invitation_prefill;
    }
    if (args.report_recap !== undefined && args.report_recap !== null) {
      this.report_recap = args.report_recap;
    }
    if (args.rich_text_report_recap !== undefined && args.rich_text_report_recap !== null) {
      this.rich_text_report_recap = args.rich_text_report_recap;
    }
  }
};
EditPetitionRequest.prototype = {};
EditPetitionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.target_description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.signature_goal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.deadline = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.grade_legend = new ttypes.PetitionGradeLegend();
        this.grade_legend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.tweet_prefill = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.email_snippet = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_prefill = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.report_recap = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_report_recap = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditPetitionRequest.prototype.write = function(output) {
  output.writeStructBegin('EditPetitionRequest');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRING, 3);
    output.writeString(this.summary);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.target_description !== null && this.target_description !== undefined) {
    output.writeFieldBegin('target_description', Thrift.Type.STRING, 5);
    output.writeString(this.target_description);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 6);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.signature_goal !== null && this.signature_goal !== undefined) {
    output.writeFieldBegin('signature_goal', Thrift.Type.I32, 7);
    output.writeI32(this.signature_goal);
    output.writeFieldEnd();
  }
  if (this.deadline !== null && this.deadline !== undefined) {
    output.writeFieldBegin('deadline', Thrift.Type.STRING, 8);
    output.writeString(this.deadline);
    output.writeFieldEnd();
  }
  if (this.grade_legend !== null && this.grade_legend !== undefined) {
    output.writeFieldBegin('grade_legend', Thrift.Type.STRUCT, 9);
    this.grade_legend.write(output);
    output.writeFieldEnd();
  }
  if (this.tweet_prefill !== null && this.tweet_prefill !== undefined) {
    output.writeFieldBegin('tweet_prefill', Thrift.Type.STRING, 10);
    output.writeString(this.tweet_prefill);
    output.writeFieldEnd();
  }
  if (this.rich_text_summary !== null && this.rich_text_summary !== undefined) {
    output.writeFieldBegin('rich_text_summary', Thrift.Type.STRING, 11);
    output.writeString(this.rich_text_summary);
    output.writeFieldEnd();
  }
  if (this.email_snippet !== null && this.email_snippet !== undefined) {
    output.writeFieldBegin('email_snippet', Thrift.Type.STRING, 12);
    output.writeString(this.email_snippet);
    output.writeFieldEnd();
  }
  if (this.invitation_prefill !== null && this.invitation_prefill !== undefined) {
    output.writeFieldBegin('invitation_prefill', Thrift.Type.STRING, 13);
    output.writeString(this.invitation_prefill);
    output.writeFieldEnd();
  }
  if (this.report_recap !== null && this.report_recap !== undefined) {
    output.writeFieldBegin('report_recap', Thrift.Type.STRING, 14);
    output.writeString(this.report_recap);
    output.writeFieldEnd();
  }
  if (this.rich_text_report_recap !== null && this.rich_text_report_recap !== undefined) {
    output.writeFieldBegin('rich_text_report_recap', Thrift.Type.STRING, 15);
    output.writeString(this.rich_text_report_recap);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilterPetitionSignatureIdentifiersRequest = module.exports.FilterPetitionSignatureIdentifiersRequest = function(args) {
  this.filter_identifiers = null;
  if (args) {
    if (args.filter_identifiers !== undefined && args.filter_identifiers !== null) {
      this.filter_identifiers = new ttypes.PetitionSignatureFilterIdentifiers(args.filter_identifiers);
    }
  }
};
FilterPetitionSignatureIdentifiersRequest.prototype = {};
FilterPetitionSignatureIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_identifiers = new ttypes.PetitionSignatureFilterIdentifiers();
        this.filter_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterPetitionSignatureIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('FilterPetitionSignatureIdentifiersRequest');
  if (this.filter_identifiers !== null && this.filter_identifiers !== undefined) {
    output.writeFieldBegin('filter_identifiers', Thrift.Type.STRUCT, 1);
    this.filter_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilterTermsByEntityActionsRequest = module.exports.FilterTermsByEntityActionsRequest = function(args) {
  this.entity_uuid = null;
  this.term_uids = null;
  this.filter_option = null;
  this.petition_uids = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.term_uids !== undefined && args.term_uids !== null) {
      this.term_uids = Thrift.copyList(args.term_uids, [null]);
    }
    if (args.filter_option !== undefined && args.filter_option !== null) {
      this.filter_option = args.filter_option;
    }
    if (args.petition_uids !== undefined && args.petition_uids !== null) {
      this.petition_uids = Thrift.copyList(args.petition_uids, [null]);
    }
  }
};
FilterTermsByEntityActionsRequest.prototype = {};
FilterTermsByEntityActionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.term_uids = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = input.readString();
          this.term_uids.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.filter_option = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size263 = 0;
        var _rtmp3267;
        this.petition_uids = [];
        var _etype266 = 0;
        _rtmp3267 = input.readListBegin();
        _etype266 = _rtmp3267.etype;
        _size263 = _rtmp3267.size;
        for (var _i268 = 0; _i268 < _size263; ++_i268)
        {
          var elem269 = null;
          elem269 = input.readString();
          this.petition_uids.push(elem269);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterTermsByEntityActionsRequest.prototype.write = function(output) {
  output.writeStructBegin('FilterTermsByEntityActionsRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.term_uids !== null && this.term_uids !== undefined) {
    output.writeFieldBegin('term_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.term_uids.length);
    for (var iter270 in this.term_uids)
    {
      if (this.term_uids.hasOwnProperty(iter270))
      {
        iter270 = this.term_uids[iter270];
        output.writeString(iter270);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter_option !== null && this.filter_option !== undefined) {
    output.writeFieldBegin('filter_option', Thrift.Type.I32, 3);
    output.writeI32(this.filter_option);
    output.writeFieldEnd();
  }
  if (this.petition_uids !== null && this.petition_uids !== undefined) {
    output.writeFieldBegin('petition_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.petition_uids.length);
    for (var iter271 in this.petition_uids)
    {
      if (this.petition_uids.hasOwnProperty(iter271))
      {
        iter271 = this.petition_uids[iter271];
        output.writeString(iter271);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEntitySignaturesRequest = module.exports.GetEntitySignaturesRequest = function(args) {
  this.entity_uuid = null;
  this.pagination_params = null;
  this.filter_params = null;
  this.sort_params = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetEntitySignaturesFilterParams(args.filter_params);
    }
    if (args.sort_params !== undefined && args.sort_params !== null) {
      this.sort_params = new ttypes.GetEntitySignaturesSortParams(args.sort_params);
    }
  }
};
GetEntitySignaturesRequest.prototype = {};
GetEntitySignaturesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetEntitySignaturesFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.sort_params = new ttypes.GetEntitySignaturesSortParams();
        this.sort_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEntitySignaturesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetEntitySignaturesRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 2);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 3);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  if (this.sort_params !== null && this.sort_params !== undefined) {
    output.writeFieldBegin('sort_params', Thrift.Type.STRUCT, 4);
    this.sort_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEntityTermPetitionGradeCountsRequest = module.exports.GetEntityTermPetitionGradeCountsRequest = function(args) {
  this.entity_uuid = null;
  this.term_uids = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.term_uids !== undefined && args.term_uids !== null) {
      this.term_uids = Thrift.copyList(args.term_uids, [null]);
    }
  }
};
GetEntityTermPetitionGradeCountsRequest.prototype = {};
GetEntityTermPetitionGradeCountsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.term_uids = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = input.readString();
          this.term_uids.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEntityTermPetitionGradeCountsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetEntityTermPetitionGradeCountsRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.term_uids !== null && this.term_uids !== undefined) {
    output.writeFieldBegin('term_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.term_uids.length);
    for (var iter279 in this.term_uids)
    {
      if (this.term_uids.hasOwnProperty(iter279))
      {
        iter279 = this.term_uids[iter279];
        output.writeString(iter279);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetMatchingPetitionTermTargetsRequest = module.exports.GetMatchingPetitionTermTargetsRequest = function(args) {
  this.petition_uid = null;
  this.term_uids = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.term_uids !== undefined && args.term_uids !== null) {
      this.term_uids = Thrift.copyList(args.term_uids, [null]);
    }
  }
};
GetMatchingPetitionTermTargetsRequest.prototype = {};
GetMatchingPetitionTermTargetsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.term_uids = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = input.readString();
          this.term_uids.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetMatchingPetitionTermTargetsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetMatchingPetitionTermTargetsRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.term_uids !== null && this.term_uids !== undefined) {
    output.writeFieldBegin('term_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.term_uids.length);
    for (var iter287 in this.term_uids)
    {
      if (this.term_uids.hasOwnProperty(iter287))
      {
        iter287 = this.term_uids[iter287];
        output.writeString(iter287);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionGradeCountsRequest = module.exports.GetPetitionGradeCountsRequest = function(args) {
  this.petition_uids = null;
  if (args) {
    if (args.petition_uids !== undefined && args.petition_uids !== null) {
      this.petition_uids = Thrift.copyList(args.petition_uids, [null]);
    }
  }
};
GetPetitionGradeCountsRequest.prototype = {};
GetPetitionGradeCountsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.petition_uids = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = input.readString();
          this.petition_uids.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionGradeCountsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionGradeCountsRequest');
  if (this.petition_uids !== null && this.petition_uids !== undefined) {
    output.writeFieldBegin('petition_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.petition_uids.length);
    for (var iter295 in this.petition_uids)
    {
      if (this.petition_uids.hasOwnProperty(iter295))
      {
        iter295 = this.petition_uids[iter295];
        output.writeString(iter295);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionsByIdentifiersRequest = module.exports.GetPetitionsByIdentifiersRequest = function(args) {
  this.petition_identifiers = null;
  if (args) {
    if (args.petition_identifiers !== undefined && args.petition_identifiers !== null) {
      this.petition_identifiers = new ttypes.PetitionUniqueIdentifiers(args.petition_identifiers);
    }
  }
};
GetPetitionsByIdentifiersRequest.prototype = {};
GetPetitionsByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.petition_identifiers = new ttypes.PetitionUniqueIdentifiers();
        this.petition_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionsByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionsByIdentifiersRequest');
  if (this.petition_identifiers !== null && this.petition_identifiers !== undefined) {
    output.writeFieldBegin('petition_identifiers', Thrift.Type.STRUCT, 1);
    this.petition_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionSignatureCountsRequest = module.exports.GetPetitionSignatureCountsRequest = function(args) {
  this.petition_uids = null;
  if (args) {
    if (args.petition_uids !== undefined && args.petition_uids !== null) {
      this.petition_uids = Thrift.copyList(args.petition_uids, [null]);
    }
  }
};
GetPetitionSignatureCountsRequest.prototype = {};
GetPetitionSignatureCountsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.petition_uids = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = input.readString();
          this.petition_uids.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionSignatureCountsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionSignatureCountsRequest');
  if (this.petition_uids !== null && this.petition_uids !== undefined) {
    output.writeFieldBegin('petition_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.petition_uids.length);
    for (var iter303 in this.petition_uids)
    {
      if (this.petition_uids.hasOwnProperty(iter303))
      {
        iter303 = this.petition_uids[iter303];
        output.writeString(iter303);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionSignaturesRequest = module.exports.GetPetitionSignaturesRequest = function(args) {
  this.petition_uid = null;
  this.entity_uuids = null;
  this.pagination_params = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.entity_uuids !== undefined && args.entity_uuids !== null) {
      this.entity_uuids = Thrift.copyList(args.entity_uuids, [null]);
    }
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
  }
};
GetPetitionSignaturesRequest.prototype = {};
GetPetitionSignaturesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.entity_uuids = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = input.readString();
          this.entity_uuids.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionSignaturesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionSignaturesRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.entity_uuids !== null && this.entity_uuids !== undefined) {
    output.writeFieldBegin('entity_uuids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.entity_uuids.length);
    for (var iter311 in this.entity_uuids)
    {
      if (this.entity_uuids.hasOwnProperty(iter311))
      {
        iter311 = this.entity_uuids[iter311];
        output.writeString(iter311);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 3);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionsRequest = module.exports.GetPetitionsRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  this.sort_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetPetitionsFilterParams(args.filter_params);
    }
    if (args.sort_params !== undefined && args.sort_params !== null) {
      this.sort_params = new ttypes.GetPetitionsSortParams(args.sort_params);
    }
  }
};
GetPetitionsRequest.prototype = {};
GetPetitionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetPetitionsFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.sort_params = new ttypes.GetPetitionsSortParams();
        this.sort_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionsRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 3);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 4);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  if (this.sort_params !== null && this.sort_params !== undefined) {
    output.writeFieldBegin('sort_params', Thrift.Type.STRUCT, 5);
    this.sort_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionTargetsByIdentifiersRequest = module.exports.GetPetitionTargetsByIdentifiersRequest = function(args) {
  this.petition_target_identifiers = null;
  if (args) {
    if (args.petition_target_identifiers !== undefined && args.petition_target_identifiers !== null) {
      this.petition_target_identifiers = new ttypes.PetitionTargetUniqueIdentifiers(args.petition_target_identifiers);
    }
  }
};
GetPetitionTargetsByIdentifiersRequest.prototype = {};
GetPetitionTargetsByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.petition_target_identifiers = new ttypes.PetitionTargetUniqueIdentifiers();
        this.petition_target_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionTargetsByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionTargetsByIdentifiersRequest');
  if (this.petition_target_identifiers !== null && this.petition_target_identifiers !== undefined) {
    output.writeFieldBegin('petition_target_identifiers', Thrift.Type.STRUCT, 1);
    this.petition_target_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionTargetSignaturesCountRequest = module.exports.GetPetitionTargetSignaturesCountRequest = function(args) {
  this.petition_target_uid = null;
  if (args) {
    if (args.petition_target_uid !== undefined && args.petition_target_uid !== null) {
      this.petition_target_uid = args.petition_target_uid;
    }
  }
};
GetPetitionTargetSignaturesCountRequest.prototype = {};
GetPetitionTargetSignaturesCountRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_target_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionTargetSignaturesCountRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionTargetSignaturesCountRequest');
  if (this.petition_target_uid !== null && this.petition_target_uid !== undefined) {
    output.writeFieldBegin('petition_target_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_target_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPetitionTargetsRequest = module.exports.GetPetitionTargetsRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetPetitionTargetsFilterParams(args.filter_params);
    }
  }
};
GetPetitionTargetsRequest.prototype = {};
GetPetitionTargetsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetPetitionTargetsFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPetitionTargetsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPetitionTargetsRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 2);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 4);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GradePetitionTargetsRequest = module.exports.GradePetitionTargetsRequest = function(args) {
  this.graded_items = null;
  if (args) {
    if (args.graded_items !== undefined && args.graded_items !== null) {
      this.graded_items = Thrift.copyList(args.graded_items, [ttypes.GradePetitionTargetsItem]);
    }
  }
};
GradePetitionTargetsRequest.prototype = {};
GradePetitionTargetsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.graded_items = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = new ttypes.GradePetitionTargetsItem();
          elem318.read(input);
          this.graded_items.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GradePetitionTargetsRequest.prototype.write = function(output) {
  output.writeStructBegin('GradePetitionTargetsRequest');
  if (this.graded_items !== null && this.graded_items !== undefined) {
    output.writeFieldBegin('graded_items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.graded_items.length);
    for (var iter319 in this.graded_items)
    {
      if (this.graded_items.hasOwnProperty(iter319))
      {
        iter319 = this.graded_items[iter319];
        iter319.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IsPermittedToSignPetitionRequest = module.exports.IsPermittedToSignPetitionRequest = function(args) {
  this.petition_uid = null;
  this.entity_district_uids = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.entity_district_uids !== undefined && args.entity_district_uids !== null) {
      this.entity_district_uids = Thrift.copyList(args.entity_district_uids, [null]);
    }
  }
};
IsPermittedToSignPetitionRequest.prototype = {};
IsPermittedToSignPetitionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.entity_district_uids = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = input.readString();
          this.entity_district_uids.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IsPermittedToSignPetitionRequest.prototype.write = function(output) {
  output.writeStructBegin('IsPermittedToSignPetitionRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.entity_district_uids !== null && this.entity_district_uids !== undefined) {
    output.writeFieldBegin('entity_district_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.entity_district_uids.length);
    for (var iter327 in this.entity_district_uids)
    {
      if (this.entity_district_uids.hasOwnProperty(iter327))
      {
        iter327 = this.entity_district_uids[iter327];
        output.writeString(iter327);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LaunchPetitionRequest = module.exports.LaunchPetitionRequest = function(args) {
  this.petition_uid = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
  }
};
LaunchPetitionRequest.prototype = {};
LaunchPetitionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LaunchPetitionRequest.prototype.write = function(output) {
  output.writeStructBegin('LaunchPetitionRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublishPetitionGradesRequest = module.exports.PublishPetitionGradesRequest = function(args) {
  this.petition_uid = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
  }
};
PublishPetitionGradesRequest.prototype = {};
PublishPetitionGradesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublishPetitionGradesRequest.prototype.write = function(output) {
  output.writeStructBegin('PublishPetitionGradesRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemovePetitionCandidacyTargetRequest = module.exports.RemovePetitionCandidacyTargetRequest = function(args) {
  this.uid = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
  }
};
RemovePetitionCandidacyTargetRequest.prototype = {};
RemovePetitionCandidacyTargetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemovePetitionCandidacyTargetRequest.prototype.write = function(output) {
  output.writeStructBegin('RemovePetitionCandidacyTargetRequest');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 3);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemovePetitionTermTargetRequest = module.exports.RemovePetitionTermTargetRequest = function(args) {
  this.uid = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
  }
};
RemovePetitionTermTargetRequest.prototype = {};
RemovePetitionTermTargetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemovePetitionTermTargetRequest.prototype.write = function(output) {
  output.writeStructBegin('RemovePetitionTermTargetRequest');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 3);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SendGradingNotificationsRequest = module.exports.SendGradingNotificationsRequest = function(args) {
  this.petition_uid = null;
  if (args) {
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
  }
};
SendGradingNotificationsRequest.prototype = {};
SendGradingNotificationsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendGradingNotificationsRequest.prototype.write = function(output) {
  output.writeStructBegin('SendGradingNotificationsRequest');
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 1);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEventsByIdentifiersRequest = module.exports.GetEventsByIdentifiersRequest = function(args) {
  this.event_identifiers = null;
  if (args) {
    if (args.event_identifiers !== undefined && args.event_identifiers !== null) {
      this.event_identifiers = new ttypes.EventUniqueIdentifiers(args.event_identifiers);
    }
  }
};
GetEventsByIdentifiersRequest.prototype = {};
GetEventsByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.event_identifiers = new ttypes.EventUniqueIdentifiers();
        this.event_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEventsByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetEventsByIdentifiersRequest');
  if (this.event_identifiers !== null && this.event_identifiers !== undefined) {
    output.writeFieldBegin('event_identifiers', Thrift.Type.STRUCT, 1);
    this.event_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEventsFilterParams = module.exports.GetEventsFilterParams = function(args) {
  this.campaign_uids = null;
  this.show_only_upcoming = null;
  if (args) {
    if (args.campaign_uids !== undefined && args.campaign_uids !== null) {
      this.campaign_uids = Thrift.copyList(args.campaign_uids, [null]);
    }
    if (args.show_only_upcoming !== undefined && args.show_only_upcoming !== null) {
      this.show_only_upcoming = args.show_only_upcoming;
    }
  }
};
GetEventsFilterParams.prototype = {};
GetEventsFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size328 = 0;
        var _rtmp3332;
        this.campaign_uids = [];
        var _etype331 = 0;
        _rtmp3332 = input.readListBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = input.readString();
          this.campaign_uids.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.show_only_upcoming = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEventsFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetEventsFilterParams');
  if (this.campaign_uids !== null && this.campaign_uids !== undefined) {
    output.writeFieldBegin('campaign_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.campaign_uids.length);
    for (var iter335 in this.campaign_uids)
    {
      if (this.campaign_uids.hasOwnProperty(iter335))
      {
        iter335 = this.campaign_uids[iter335];
        output.writeString(iter335);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.show_only_upcoming !== null && this.show_only_upcoming !== undefined) {
    output.writeFieldBegin('show_only_upcoming', Thrift.Type.BOOL, 2);
    output.writeBool(this.show_only_upcoming);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEventsRequest = module.exports.GetEventsRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetEventsFilterParams(args.filter_params);
    }
  }
};
GetEventsRequest.prototype = {};
GetEventsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetEventsFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEventsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetEventsRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateEventRequest = module.exports.CreateEventRequest = function(args) {
  this.uid = null;
  this.title = null;
  this.start_date = null;
  this.end_date = null;
  this.location = null;
  this.description = null;
  this.rich_text_description = null;
  this.image = null;
  this.cost = null;
  this.external_link_url = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.start_date !== undefined && args.start_date !== null) {
      this.start_date = args.start_date;
    }
    if (args.end_date !== undefined && args.end_date !== null) {
      this.end_date = args.end_date;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.rich_text_description !== undefined && args.rich_text_description !== null) {
      this.rich_text_description = args.rich_text_description;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.cost !== undefined && args.cost !== null) {
      this.cost = args.cost;
    }
    if (args.external_link_url !== undefined && args.external_link_url !== null) {
      this.external_link_url = args.external_link_url;
    }
  }
};
CreateEventRequest.prototype = {};
CreateEventRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.start_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.end_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.rich_text_description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.cost = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.external_link_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateEventRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateEventRequest');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.start_date !== null && this.start_date !== undefined) {
    output.writeFieldBegin('start_date', Thrift.Type.STRING, 3);
    output.writeString(this.start_date);
    output.writeFieldEnd();
  }
  if (this.end_date !== null && this.end_date !== undefined) {
    output.writeFieldBegin('end_date', Thrift.Type.STRING, 4);
    output.writeString(this.end_date);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 5);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.rich_text_description !== null && this.rich_text_description !== undefined) {
    output.writeFieldBegin('rich_text_description', Thrift.Type.STRING, 7);
    output.writeString(this.rich_text_description);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 8);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.STRING, 9);
    output.writeString(this.cost);
    output.writeFieldEnd();
  }
  if (this.external_link_url !== null && this.external_link_url !== undefined) {
    output.writeFieldBegin('external_link_url', Thrift.Type.STRING, 10);
    output.writeString(this.external_link_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteEventRequest = module.exports.DeleteEventRequest = function(args) {
  this.event_uid = null;
  if (args) {
    if (args.event_uid !== undefined && args.event_uid !== null) {
      this.event_uid = args.event_uid;
    }
  }
};
DeleteEventRequest.prototype = {};
DeleteEventRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.event_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteEventRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteEventRequest');
  if (this.event_uid !== null && this.event_uid !== undefined) {
    output.writeFieldBegin('event_uid', Thrift.Type.STRING, 1);
    output.writeString(this.event_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PetitionStateException = module.exports.PetitionStateException = function(args) {
  Thrift.TException.call(this, "PetitionStateException");
  this.name = "PetitionStateException";
  this.message = null;
  this.code = null;
  this.exception_class = 0;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.exception_class !== undefined && args.exception_class !== null) {
      this.exception_class = args.exception_class;
    }
  }
};
Thrift.inherits(PetitionStateException, Thrift.TException);
PetitionStateException.prototype.name = 'PetitionStateException';
PetitionStateException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.exception_class = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PetitionStateException.prototype.write = function(output) {
  output.writeStructBegin('PetitionStateException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.exception_class !== null && this.exception_class !== undefined) {
    output.writeFieldBegin('exception_class', Thrift.Type.I32, 3);
    output.writeI32(this.exception_class);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


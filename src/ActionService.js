//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var event_bus_ttypes = require('./event_bus_types');


var ttypes = require('./action_types');
//HELPER FUNCTIONS AND STRUCTURES

var ActionService_create_petition_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreatePetitionRequest(args.request);
    }
  }
};
ActionService_create_petition_args.prototype = {};
ActionService_create_petition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreatePetitionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_create_petition_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_create_petition_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_create_petition_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Petition(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_create_petition_result.prototype = {};
ActionService_create_petition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Petition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_create_petition_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_create_petition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_edit_petition_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.EditPetitionRequest(args.request);
    }
  }
};
ActionService_edit_petition_args.prototype = {};
ActionService_edit_petition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.EditPetitionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_edit_petition_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_edit_petition_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_edit_petition_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Petition(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_edit_petition_result.prototype = {};
ActionService_edit_petition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Petition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_edit_petition_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_edit_petition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petitions_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPetitionsRequest(args.request);
    }
  }
};
ActionService_get_petitions_args.prototype = {};
ActionService_get_petitions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPetitionsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petitions_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petitions_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petitions_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedPetitions(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_get_petitions_result.prototype = {};
ActionService_get_petitions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedPetitions();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petitions_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petitions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petitions_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPetitionsByIdentifiersRequest(args.request);
    }
  }
};
ActionService_get_petitions_by_identifiers_args.prototype = {};
ActionService_get_petitions_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPetitionsByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petitions_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petitions_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petitions_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Petitions(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_petitions_by_identifiers_result.prototype = {};
ActionService_get_petitions_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Petitions();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petitions_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petitions_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_create_petition_signature_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreatePetitionSignatureRequest(args.request);
    }
  }
};
ActionService_create_petition_signature_args.prototype = {};
ActionService_create_petition_signature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreatePetitionSignatureRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_create_petition_signature_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_create_petition_signature_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_create_petition_signature_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PetitionSignature(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_create_petition_signature_result.prototype = {};
ActionService_create_petition_signature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PetitionSignature();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_create_petition_signature_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_create_petition_signature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_entity_signatures_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetEntitySignaturesRequest(args.request);
    }
  }
};
ActionService_get_entity_signatures_args.prototype = {};
ActionService_get_entity_signatures_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetEntitySignaturesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_entity_signatures_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_entity_signatures_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_entity_signatures_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedPetitionSignatures(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_get_entity_signatures_result.prototype = {};
ActionService_get_entity_signatures_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedPetitionSignatures();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_entity_signatures_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_entity_signatures_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_signatures_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPetitionSignaturesRequest(args.request);
    }
  }
};
ActionService_get_petition_signatures_args.prototype = {};
ActionService_get_petition_signatures_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPetitionSignaturesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_signatures_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_signatures_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_signatures_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedPetitionSignatures(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_petition_signatures_result.prototype = {};
ActionService_get_petition_signatures_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedPetitionSignatures();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_signatures_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_signatures_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_grade_counts_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPetitionGradeCountsRequest(args.request);
    }
  }
};
ActionService_get_petition_grade_counts_args.prototype = {};
ActionService_get_petition_grade_counts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPetitionGradeCountsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_grade_counts_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_grade_counts_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_grade_counts_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PetitionGradeCounts(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_petition_grade_counts_result.prototype = {};
ActionService_get_petition_grade_counts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PetitionGradeCounts();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_grade_counts_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_grade_counts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_signature_counts_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPetitionSignatureCountsRequest(args.request);
    }
  }
};
ActionService_get_petition_signature_counts_args.prototype = {};
ActionService_get_petition_signature_counts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPetitionSignatureCountsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_signature_counts_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_signature_counts_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_signature_counts_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PetitionSignatureCounts(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_petition_signature_counts_result.prototype = {};
ActionService_get_petition_signature_counts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PetitionSignatureCounts();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_signature_counts_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_signature_counts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_filter_petition_signature_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.FilterPetitionSignatureIdentifiersRequest(args.request);
    }
  }
};
ActionService_filter_petition_signature_identifiers_args.prototype = {};
ActionService_filter_petition_signature_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.FilterPetitionSignatureIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_filter_petition_signature_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_filter_petition_signature_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_filter_petition_signature_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FilteredPetitionSignatureIdentifiers(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_filter_petition_signature_identifiers_result.prototype = {};
ActionService_filter_petition_signature_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FilteredPetitionSignatureIdentifiers();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_filter_petition_signature_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_filter_petition_signature_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_is_permitted_to_sign_petition_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IsPermittedToSignPetitionRequest(args.request);
    }
  }
};
ActionService_is_permitted_to_sign_petition_args.prototype = {};
ActionService_is_permitted_to_sign_petition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IsPermittedToSignPetitionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_is_permitted_to_sign_petition_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_is_permitted_to_sign_petition_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_is_permitted_to_sign_petition_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_is_permitted_to_sign_petition_result.prototype = {};
ActionService_is_permitted_to_sign_petition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_is_permitted_to_sign_petition_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_is_permitted_to_sign_petition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_add_petition_term_targets_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AddPetitionTermTargetsRequest(args.request);
    }
  }
};
ActionService_add_petition_term_targets_args.prototype = {};
ActionService_add_petition_term_targets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AddPetitionTermTargetsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_add_petition_term_targets_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_add_petition_term_targets_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_add_petition_term_targets_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PetitionTermTarget]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_add_petition_term_targets_result.prototype = {};
ActionService_add_petition_term_targets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size336 = 0;
        var _rtmp3340;
        this.success = [];
        var _etype339 = 0;
        _rtmp3340 = input.readListBegin();
        _etype339 = _rtmp3340.etype;
        _size336 = _rtmp3340.size;
        for (var _i341 = 0; _i341 < _size336; ++_i341)
        {
          var elem342 = null;
          elem342 = new ttypes.PetitionTermTarget();
          elem342.read(input);
          this.success.push(elem342);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_add_petition_term_targets_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_add_petition_term_targets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter343 in this.success)
    {
      if (this.success.hasOwnProperty(iter343))
      {
        iter343 = this.success[iter343];
        iter343.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_add_petition_candidacy_targets_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AddPetitionCandidacyTargetsRequest(args.request);
    }
  }
};
ActionService_add_petition_candidacy_targets_args.prototype = {};
ActionService_add_petition_candidacy_targets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AddPetitionCandidacyTargetsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_add_petition_candidacy_targets_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_add_petition_candidacy_targets_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_add_petition_candidacy_targets_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PetitionCandidacyTarget]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_add_petition_candidacy_targets_result.prototype = {};
ActionService_add_petition_candidacy_targets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size344 = 0;
        var _rtmp3348;
        this.success = [];
        var _etype347 = 0;
        _rtmp3348 = input.readListBegin();
        _etype347 = _rtmp3348.etype;
        _size344 = _rtmp3348.size;
        for (var _i349 = 0; _i349 < _size344; ++_i349)
        {
          var elem350 = null;
          elem350 = new ttypes.PetitionCandidacyTarget();
          elem350.read(input);
          this.success.push(elem350);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_add_petition_candidacy_targets_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_add_petition_candidacy_targets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter351 in this.success)
    {
      if (this.success.hasOwnProperty(iter351))
      {
        iter351 = this.success[iter351];
        iter351.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_remove_petition_term_target_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.RemovePetitionTermTargetRequest(args.request);
    }
  }
};
ActionService_remove_petition_term_target_args.prototype = {};
ActionService_remove_petition_term_target_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.RemovePetitionTermTargetRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_remove_petition_term_target_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_remove_petition_term_target_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_remove_petition_term_target_result = function(args) {
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_remove_petition_term_target_result.prototype = {};
ActionService_remove_petition_term_target_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_remove_petition_term_target_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_remove_petition_term_target_result');
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_remove_petition_candidacy_target_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.RemovePetitionCandidacyTargetRequest(args.request);
    }
  }
};
ActionService_remove_petition_candidacy_target_args.prototype = {};
ActionService_remove_petition_candidacy_target_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.RemovePetitionCandidacyTargetRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_remove_petition_candidacy_target_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_remove_petition_candidacy_target_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_remove_petition_candidacy_target_result = function(args) {
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_remove_petition_candidacy_target_result.prototype = {};
ActionService_remove_petition_candidacy_target_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_remove_petition_candidacy_target_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_remove_petition_candidacy_target_result');
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_grade_petition_targets_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GradePetitionTargetsRequest(args.request);
    }
  }
};
ActionService_grade_petition_targets_args.prototype = {};
ActionService_grade_petition_targets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GradePetitionTargetsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_grade_petition_targets_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_grade_petition_targets_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_grade_petition_targets_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PetitionTarget]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_grade_petition_targets_result.prototype = {};
ActionService_grade_petition_targets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size352 = 0;
        var _rtmp3356;
        this.success = [];
        var _etype355 = 0;
        _rtmp3356 = input.readListBegin();
        _etype355 = _rtmp3356.etype;
        _size352 = _rtmp3356.size;
        for (var _i357 = 0; _i357 < _size352; ++_i357)
        {
          var elem358 = null;
          elem358 = new ttypes.PetitionTarget();
          elem358.read(input);
          this.success.push(elem358);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_grade_petition_targets_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_grade_petition_targets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter359 in this.success)
    {
      if (this.success.hasOwnProperty(iter359))
      {
        iter359 = this.success[iter359];
        iter359.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_targets_args = function(args) {
  this.header = null;
  this.request = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new shared_ttypes.RequestHeaders(args.header);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPetitionTargetsRequest(args.request);
    }
  }
};
ActionService_get_petition_targets_args.prototype = {};
ActionService_get_petition_targets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new shared_ttypes.RequestHeaders();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPetitionTargetsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_targets_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_targets_args');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_targets_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedPetitionTargets(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_petition_targets_result.prototype = {};
ActionService_get_petition_targets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedPetitionTargets();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_targets_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_targets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_targets_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPetitionTargetsByIdentifiersRequest(args.request);
    }
  }
};
ActionService_get_petition_targets_by_identifiers_args.prototype = {};
ActionService_get_petition_targets_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPetitionTargetsByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_targets_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_targets_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_targets_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PetitionTargets(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_petition_targets_by_identifiers_result.prototype = {};
ActionService_get_petition_targets_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PetitionTargets();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_targets_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_targets_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_matching_petition_term_targets_args = function(args) {
  this.header = null;
  this.request = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new shared_ttypes.RequestHeaders(args.header);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetMatchingPetitionTermTargetsRequest(args.request);
    }
  }
};
ActionService_get_matching_petition_term_targets_args.prototype = {};
ActionService_get_matching_petition_term_targets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new shared_ttypes.RequestHeaders();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetMatchingPetitionTermTargetsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_matching_petition_term_targets_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_matching_petition_term_targets_args');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_matching_petition_term_targets_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PetitionTermTarget]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_matching_petition_term_targets_result.prototype = {};
ActionService_get_matching_petition_term_targets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size360 = 0;
        var _rtmp3364;
        this.success = [];
        var _etype363 = 0;
        _rtmp3364 = input.readListBegin();
        _etype363 = _rtmp3364.etype;
        _size360 = _rtmp3364.size;
        for (var _i365 = 0; _i365 < _size360; ++_i365)
        {
          var elem366 = null;
          elem366 = new ttypes.PetitionTermTarget();
          elem366.read(input);
          this.success.push(elem366);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_matching_petition_term_targets_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_matching_petition_term_targets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter367 in this.success)
    {
      if (this.success.hasOwnProperty(iter367))
      {
        iter367 = this.success[iter367];
        iter367.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_launch_petition_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.LaunchPetitionRequest(args.request);
    }
  }
};
ActionService_launch_petition_args.prototype = {};
ActionService_launch_petition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.LaunchPetitionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_launch_petition_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_launch_petition_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_launch_petition_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Petition(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_launch_petition_result.prototype = {};
ActionService_launch_petition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Petition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_launch_petition_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_launch_petition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_publish_petition_grades_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.PublishPetitionGradesRequest(args.request);
    }
  }
};
ActionService_publish_petition_grades_args.prototype = {};
ActionService_publish_petition_grades_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.PublishPetitionGradesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_publish_petition_grades_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_publish_petition_grades_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_publish_petition_grades_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  this.petition_state_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args instanceof ttypes.PetitionStateException) {
    this.petition_state_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Petition(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
    if (args.petition_state_exception !== undefined && args.petition_state_exception !== null) {
      this.petition_state_exception = args.petition_state_exception;
    }
  }
};
ActionService_publish_petition_grades_result.prototype = {};
ActionService_publish_petition_grades_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Petition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.petition_state_exception = new ttypes.PetitionStateException();
        this.petition_state_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_publish_petition_grades_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_publish_petition_grades_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.petition_state_exception !== null && this.petition_state_exception !== undefined) {
    output.writeFieldBegin('petition_state_exception', Thrift.Type.STRUCT, 3);
    this.petition_state_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_close_petition_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.ClosePetitionRequest(args.request);
    }
  }
};
ActionService_close_petition_args.prototype = {};
ActionService_close_petition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.ClosePetitionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_close_petition_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_close_petition_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_close_petition_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Petition(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_close_petition_result.prototype = {};
ActionService_close_petition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Petition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_close_petition_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_close_petition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_entity_term_petition_grade_counts_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetEntityTermPetitionGradeCountsRequest(args.request);
    }
  }
};
ActionService_get_entity_term_petition_grade_counts_args.prototype = {};
ActionService_get_entity_term_petition_grade_counts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetEntityTermPetitionGradeCountsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_entity_term_petition_grade_counts_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_entity_term_petition_grade_counts_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_entity_term_petition_grade_counts_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.EntityTermPetitionGradeCount]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_get_entity_term_petition_grade_counts_result.prototype = {};
ActionService_get_entity_term_petition_grade_counts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size368 = 0;
        var _rtmp3372;
        this.success = [];
        var _etype371 = 0;
        _rtmp3372 = input.readListBegin();
        _etype371 = _rtmp3372.etype;
        _size368 = _rtmp3372.size;
        for (var _i373 = 0; _i373 < _size368; ++_i373)
        {
          var elem374 = null;
          elem374 = new ttypes.EntityTermPetitionGradeCount();
          elem374.read(input);
          this.success.push(elem374);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_entity_term_petition_grade_counts_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_entity_term_petition_grade_counts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter375 in this.success)
    {
      if (this.success.hasOwnProperty(iter375))
      {
        iter375 = this.success[iter375];
        iter375.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_receive_event_bus_message_parcel_args = function(args) {
  this.headers = null;
  this.message_parcel = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.message_parcel !== undefined && args.message_parcel !== null) {
      this.message_parcel = new event_bus_ttypes.MessageParcel(args.message_parcel);
    }
  }
};
ActionService_receive_event_bus_message_parcel_args.prototype = {};
ActionService_receive_event_bus_message_parcel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message_parcel = new event_bus_ttypes.MessageParcel();
        this.message_parcel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_receive_event_bus_message_parcel_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_receive_event_bus_message_parcel_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.message_parcel !== null && this.message_parcel !== undefined) {
    output.writeFieldBegin('message_parcel', Thrift.Type.STRUCT, 2);
    this.message_parcel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_receive_event_bus_message_parcel_result = function(args) {
};
ActionService_receive_event_bus_message_parcel_result.prototype = {};
ActionService_receive_event_bus_message_parcel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_receive_event_bus_message_parcel_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_receive_event_bus_message_parcel_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_filter_terms_by_entity_actions_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.FilterTermsByEntityActionsRequest(args.request);
    }
  }
};
ActionService_filter_terms_by_entity_actions_args.prototype = {};
ActionService_filter_terms_by_entity_actions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.FilterTermsByEntityActionsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_filter_terms_by_entity_actions_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_filter_terms_by_entity_actions_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_filter_terms_by_entity_actions_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_filter_terms_by_entity_actions_result.prototype = {};
ActionService_filter_terms_by_entity_actions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size376 = 0;
        var _rtmp3380;
        this.success = [];
        var _etype379 = 0;
        _rtmp3380 = input.readListBegin();
        _etype379 = _rtmp3380.etype;
        _size376 = _rtmp3380.size;
        for (var _i381 = 0; _i381 < _size376; ++_i381)
        {
          var elem382 = null;
          elem382 = input.readString();
          this.success.push(elem382);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_filter_terms_by_entity_actions_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_filter_terms_by_entity_actions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter383 in this.success)
    {
      if (this.success.hasOwnProperty(iter383))
      {
        iter383 = this.success[iter383];
        output.writeString(iter383);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_target_signatures_count_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPetitionTargetSignaturesCountRequest(args.request);
    }
  }
};
ActionService_get_petition_target_signatures_count_args.prototype = {};
ActionService_get_petition_target_signatures_count_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetPetitionTargetSignaturesCountRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_target_signatures_count_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_target_signatures_count_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_petition_target_signatures_count_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_petition_target_signatures_count_result.prototype = {};
ActionService_get_petition_target_signatures_count_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_petition_target_signatures_count_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_petition_target_signatures_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_send_grading_notifications_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.SendGradingNotificationsRequest(args.request);
    }
  }
};
ActionService_send_grading_notifications_args.prototype = {};
ActionService_send_grading_notifications_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.SendGradingNotificationsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_send_grading_notifications_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_send_grading_notifications_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_send_grading_notifications_result = function(args) {
  this.argument_exception = null;
  this.state_exception = null;
  this.unauthorized_exception = null;
  this.petition_state_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.StateException) {
    this.state_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args instanceof ttypes.PetitionStateException) {
    this.petition_state_exception = args;
    return;
  }
  if (args) {
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.state_exception !== undefined && args.state_exception !== null) {
      this.state_exception = args.state_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
    if (args.petition_state_exception !== undefined && args.petition_state_exception !== null) {
      this.petition_state_exception = args.petition_state_exception;
    }
  }
};
ActionService_send_grading_notifications_result.prototype = {};
ActionService_send_grading_notifications_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.state_exception = new shared_ttypes.StateException();
        this.state_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.petition_state_exception = new ttypes.PetitionStateException();
        this.petition_state_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_send_grading_notifications_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_send_grading_notifications_result');
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.state_exception !== null && this.state_exception !== undefined) {
    output.writeFieldBegin('state_exception', Thrift.Type.STRUCT, 2);
    this.state_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 3);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.petition_state_exception !== null && this.petition_state_exception !== undefined) {
    output.writeFieldBegin('petition_state_exception', Thrift.Type.STRUCT, 4);
    this.petition_state_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_events_by_identifiers_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetEventsByIdentifiersRequest(args.request);
    }
  }
};
ActionService_get_events_by_identifiers_args.prototype = {};
ActionService_get_events_by_identifiers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetEventsByIdentifiersRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_events_by_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_events_by_identifiers_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_events_by_identifiers_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Events(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_events_by_identifiers_result.prototype = {};
ActionService_get_events_by_identifiers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Events();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_events_by_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_events_by_identifiers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_events_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetEventsRequest(args.request);
    }
  }
};
ActionService_get_events_args.prototype = {};
ActionService_get_events_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetEventsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_events_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_events_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_events_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedEvents(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
  }
};
ActionService_get_events_result.prototype = {};
ActionService_get_events_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedEvents();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_events_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_events_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_create_event_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreateEventRequest(args.request);
    }
  }
};
ActionService_create_event_args.prototype = {};
ActionService_create_event_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreateEventRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_create_event_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_create_event_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_create_event_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Event(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_create_event_result.prototype = {};
ActionService_create_event_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Event();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_create_event_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_create_event_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_delete_event_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.DeleteEventRequest(args.request);
    }
  }
};
ActionService_delete_event_args.prototype = {};
ActionService_delete_event_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DeleteEventRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_delete_event_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_delete_event_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_delete_event_result = function(args) {
  this.state_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.StateException) {
    this.state_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.state_exception !== undefined && args.state_exception !== null) {
      this.state_exception = args.state_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_delete_event_result.prototype = {};
ActionService_delete_event_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.state_exception = new shared_ttypes.StateException();
        this.state_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_delete_event_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_delete_event_result');
  if (this.state_exception !== null && this.state_exception !== undefined) {
    output.writeFieldBegin('state_exception', Thrift.Type.STRUCT, 1);
    this.state_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_event_attendee_uids_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetEventAttendeeUidsRequest(args.request);
    }
  }
};
ActionService_get_event_attendee_uids_args.prototype = {};
ActionService_get_event_attendee_uids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetEventAttendeeUidsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_event_attendee_uids_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_event_attendee_uids_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_get_event_attendee_uids_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.unauthorized_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.UnauthorizedException) {
    this.unauthorized_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaginatedAttendeeUids(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.unauthorized_exception !== undefined && args.unauthorized_exception !== null) {
      this.unauthorized_exception = args.unauthorized_exception;
    }
  }
};
ActionService_get_event_attendee_uids_result.prototype = {};
ActionService_get_event_attendee_uids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaginatedAttendeeUids();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unauthorized_exception = new shared_ttypes.UnauthorizedException();
        this.unauthorized_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_get_event_attendee_uids_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_get_event_attendee_uids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorized_exception !== null && this.unauthorized_exception !== undefined) {
    output.writeFieldBegin('unauthorized_exception', Thrift.Type.STRUCT, 2);
    this.unauthorized_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_attend_event_args = function(args) {
  this.headers = null;
  this.request = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = new shared_ttypes.RequestHeaders(args.headers);
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AttendEventRequest(args.request);
    }
  }
};
ActionService_attend_event_args.prototype = {};
ActionService_attend_event_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headers = new shared_ttypes.RequestHeaders();
        this.headers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AttendEventRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_attend_event_args.prototype.write = function(output) {
  output.writeStructBegin('ActionService_attend_event_args');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.STRUCT, 1);
    this.headers.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionService_attend_event_result = function(args) {
  this.success = null;
  this.argument_exception = null;
  this.state_exception = null;
  if (args instanceof shared_ttypes.ArgumentException) {
    this.argument_exception = args;
    return;
  }
  if (args instanceof shared_ttypes.StateException) {
    this.state_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Event(args.success);
    }
    if (args.argument_exception !== undefined && args.argument_exception !== null) {
      this.argument_exception = args.argument_exception;
    }
    if (args.state_exception !== undefined && args.state_exception !== null) {
      this.state_exception = args.state_exception;
    }
  }
};
ActionService_attend_event_result.prototype = {};
ActionService_attend_event_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Event();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument_exception = new shared_ttypes.ArgumentException();
        this.argument_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.state_exception = new shared_ttypes.StateException();
        this.state_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionService_attend_event_result.prototype.write = function(output) {
  output.writeStructBegin('ActionService_attend_event_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argument_exception !== null && this.argument_exception !== undefined) {
    output.writeFieldBegin('argument_exception', Thrift.Type.STRUCT, 1);
    this.argument_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.state_exception !== null && this.state_exception !== undefined) {
    output.writeFieldBegin('state_exception', Thrift.Type.STRUCT, 2);
    this.state_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ActionServiceClient.prototype = {};
ActionServiceClient.prototype.seqid = function() { return this._seqid; };
ActionServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
ActionServiceClient.prototype.create_petition = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_petition(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_petition(headers, request);
  }
};

ActionServiceClient.prototype.send_create_petition = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_petition', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_create_petition_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_create_petition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_create_petition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_petition failed: unknown result');
};
ActionServiceClient.prototype.edit_petition = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_edit_petition(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_edit_petition(headers, request);
  }
};

ActionServiceClient.prototype.send_edit_petition = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('edit_petition', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_edit_petition_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_edit_petition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_edit_petition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('edit_petition failed: unknown result');
};
ActionServiceClient.prototype.get_petitions = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_petitions(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_petitions(headers, request);
  }
};

ActionServiceClient.prototype.send_get_petitions = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_petitions', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_petitions_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_petitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_petitions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_petitions failed: unknown result');
};
ActionServiceClient.prototype.get_petitions_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_petitions_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_petitions_by_identifiers(headers, request);
  }
};

ActionServiceClient.prototype.send_get_petitions_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_petitions_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_petitions_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_petitions_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_petitions_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_petitions_by_identifiers failed: unknown result');
};
ActionServiceClient.prototype.create_petition_signature = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_petition_signature(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_petition_signature(headers, request);
  }
};

ActionServiceClient.prototype.send_create_petition_signature = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_petition_signature', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_create_petition_signature_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_create_petition_signature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_create_petition_signature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_petition_signature failed: unknown result');
};
ActionServiceClient.prototype.get_entity_signatures = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_entity_signatures(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_entity_signatures(headers, request);
  }
};

ActionServiceClient.prototype.send_get_entity_signatures = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_entity_signatures', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_entity_signatures_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_entity_signatures = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_entity_signatures_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_entity_signatures failed: unknown result');
};
ActionServiceClient.prototype.get_petition_signatures = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_petition_signatures(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_petition_signatures(headers, request);
  }
};

ActionServiceClient.prototype.send_get_petition_signatures = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_petition_signatures', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_petition_signatures_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_petition_signatures = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_petition_signatures_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_petition_signatures failed: unknown result');
};
ActionServiceClient.prototype.get_petition_grade_counts = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_petition_grade_counts(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_petition_grade_counts(headers, request);
  }
};

ActionServiceClient.prototype.send_get_petition_grade_counts = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_petition_grade_counts', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_petition_grade_counts_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_petition_grade_counts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_petition_grade_counts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_petition_grade_counts failed: unknown result');
};
ActionServiceClient.prototype.get_petition_signature_counts = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_petition_signature_counts(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_petition_signature_counts(headers, request);
  }
};

ActionServiceClient.prototype.send_get_petition_signature_counts = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_petition_signature_counts', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_petition_signature_counts_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_petition_signature_counts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_petition_signature_counts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_petition_signature_counts failed: unknown result');
};
ActionServiceClient.prototype.filter_petition_signature_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_filter_petition_signature_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_filter_petition_signature_identifiers(headers, request);
  }
};

ActionServiceClient.prototype.send_filter_petition_signature_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('filter_petition_signature_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_filter_petition_signature_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_filter_petition_signature_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_filter_petition_signature_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('filter_petition_signature_identifiers failed: unknown result');
};
ActionServiceClient.prototype.is_permitted_to_sign_petition = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_is_permitted_to_sign_petition(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_is_permitted_to_sign_petition(headers, request);
  }
};

ActionServiceClient.prototype.send_is_permitted_to_sign_petition = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('is_permitted_to_sign_petition', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_is_permitted_to_sign_petition_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_is_permitted_to_sign_petition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_is_permitted_to_sign_petition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('is_permitted_to_sign_petition failed: unknown result');
};
ActionServiceClient.prototype.add_petition_term_targets = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_petition_term_targets(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_petition_term_targets(headers, request);
  }
};

ActionServiceClient.prototype.send_add_petition_term_targets = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_petition_term_targets', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_add_petition_term_targets_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_add_petition_term_targets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_add_petition_term_targets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_petition_term_targets failed: unknown result');
};
ActionServiceClient.prototype.add_petition_candidacy_targets = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_petition_candidacy_targets(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_petition_candidacy_targets(headers, request);
  }
};

ActionServiceClient.prototype.send_add_petition_candidacy_targets = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_petition_candidacy_targets', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_add_petition_candidacy_targets_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_add_petition_candidacy_targets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_add_petition_candidacy_targets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_petition_candidacy_targets failed: unknown result');
};
ActionServiceClient.prototype.remove_petition_term_target = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove_petition_term_target(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove_petition_term_target(headers, request);
  }
};

ActionServiceClient.prototype.send_remove_petition_term_target = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove_petition_term_target', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_remove_petition_term_target_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_remove_petition_term_target = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_remove_petition_term_target_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  callback(null);
};
ActionServiceClient.prototype.remove_petition_candidacy_target = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove_petition_candidacy_target(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove_petition_candidacy_target(headers, request);
  }
};

ActionServiceClient.prototype.send_remove_petition_candidacy_target = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove_petition_candidacy_target', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_remove_petition_candidacy_target_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_remove_petition_candidacy_target = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_remove_petition_candidacy_target_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  callback(null);
};
ActionServiceClient.prototype.grade_petition_targets = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_grade_petition_targets(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_grade_petition_targets(headers, request);
  }
};

ActionServiceClient.prototype.send_grade_petition_targets = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grade_petition_targets', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_grade_petition_targets_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_grade_petition_targets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_grade_petition_targets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('grade_petition_targets failed: unknown result');
};
ActionServiceClient.prototype.get_petition_targets = function(header, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_petition_targets(header, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_petition_targets(header, request);
  }
};

ActionServiceClient.prototype.send_get_petition_targets = function(header, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_petition_targets', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_petition_targets_args();
  args.header = header;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_petition_targets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_petition_targets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_petition_targets failed: unknown result');
};
ActionServiceClient.prototype.get_petition_targets_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_petition_targets_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_petition_targets_by_identifiers(headers, request);
  }
};

ActionServiceClient.prototype.send_get_petition_targets_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_petition_targets_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_petition_targets_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_petition_targets_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_petition_targets_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_petition_targets_by_identifiers failed: unknown result');
};
ActionServiceClient.prototype.get_matching_petition_term_targets = function(header, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_matching_petition_term_targets(header, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_matching_petition_term_targets(header, request);
  }
};

ActionServiceClient.prototype.send_get_matching_petition_term_targets = function(header, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_matching_petition_term_targets', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_matching_petition_term_targets_args();
  args.header = header;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_matching_petition_term_targets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_matching_petition_term_targets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_matching_petition_term_targets failed: unknown result');
};
ActionServiceClient.prototype.launch_petition = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_launch_petition(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_launch_petition(headers, request);
  }
};

ActionServiceClient.prototype.send_launch_petition = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('launch_petition', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_launch_petition_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_launch_petition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_launch_petition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('launch_petition failed: unknown result');
};
ActionServiceClient.prototype.publish_petition_grades = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_publish_petition_grades(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_publish_petition_grades(headers, request);
  }
};

ActionServiceClient.prototype.send_publish_petition_grades = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('publish_petition_grades', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_publish_petition_grades_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_publish_petition_grades = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_publish_petition_grades_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.petition_state_exception) {
    return callback(result.petition_state_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('publish_petition_grades failed: unknown result');
};
ActionServiceClient.prototype.close_petition = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_petition(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_petition(headers, request);
  }
};

ActionServiceClient.prototype.send_close_petition = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('close_petition', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_close_petition_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_close_petition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_close_petition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('close_petition failed: unknown result');
};
ActionServiceClient.prototype.get_entity_term_petition_grade_counts = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_entity_term_petition_grade_counts(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_entity_term_petition_grade_counts(headers, request);
  }
};

ActionServiceClient.prototype.send_get_entity_term_petition_grade_counts = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_entity_term_petition_grade_counts', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_entity_term_petition_grade_counts_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_entity_term_petition_grade_counts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_entity_term_petition_grade_counts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_entity_term_petition_grade_counts failed: unknown result');
};
ActionServiceClient.prototype.receive_event_bus_message_parcel = function(headers, message_parcel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_receive_event_bus_message_parcel(headers, message_parcel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_receive_event_bus_message_parcel(headers, message_parcel);
  }
};

ActionServiceClient.prototype.send_receive_event_bus_message_parcel = function(headers, message_parcel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('receive_event_bus_message_parcel', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_receive_event_bus_message_parcel_args();
  args.headers = headers;
  args.message_parcel = message_parcel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_receive_event_bus_message_parcel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_receive_event_bus_message_parcel_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
ActionServiceClient.prototype.filter_terms_by_entity_actions = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_filter_terms_by_entity_actions(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_filter_terms_by_entity_actions(headers, request);
  }
};

ActionServiceClient.prototype.send_filter_terms_by_entity_actions = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('filter_terms_by_entity_actions', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_filter_terms_by_entity_actions_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_filter_terms_by_entity_actions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_filter_terms_by_entity_actions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('filter_terms_by_entity_actions failed: unknown result');
};
ActionServiceClient.prototype.get_petition_target_signatures_count = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_petition_target_signatures_count(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_petition_target_signatures_count(headers, request);
  }
};

ActionServiceClient.prototype.send_get_petition_target_signatures_count = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_petition_target_signatures_count', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_petition_target_signatures_count_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_petition_target_signatures_count = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_petition_target_signatures_count_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_petition_target_signatures_count failed: unknown result');
};
ActionServiceClient.prototype.send_grading_notifications = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_send_grading_notifications(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_send_grading_notifications(headers, request);
  }
};

ActionServiceClient.prototype.send_send_grading_notifications = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('send_grading_notifications', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_send_grading_notifications_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_send_grading_notifications = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_send_grading_notifications_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.state_exception) {
    return callback(result.state_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.petition_state_exception) {
    return callback(result.petition_state_exception);
  }
  callback(null);
};
ActionServiceClient.prototype.get_events_by_identifiers = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_events_by_identifiers(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_events_by_identifiers(headers, request);
  }
};

ActionServiceClient.prototype.send_get_events_by_identifiers = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_events_by_identifiers', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_events_by_identifiers_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_events_by_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_events_by_identifiers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_events_by_identifiers failed: unknown result');
};
ActionServiceClient.prototype.get_events = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_events(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_events(headers, request);
  }
};

ActionServiceClient.prototype.send_get_events = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_events', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_events_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_events = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_events_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_events failed: unknown result');
};
ActionServiceClient.prototype.create_event = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_event(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_event(headers, request);
  }
};

ActionServiceClient.prototype.send_create_event = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_event', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_create_event_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_create_event = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_create_event_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_event failed: unknown result');
};
ActionServiceClient.prototype.delete_event = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_event(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_event(headers, request);
  }
};

ActionServiceClient.prototype.send_delete_event = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_event', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_delete_event_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_delete_event = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_delete_event_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.state_exception) {
    return callback(result.state_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  callback(null);
};
ActionServiceClient.prototype.get_event_attendee_uids = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_event_attendee_uids(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_event_attendee_uids(headers, request);
  }
};

ActionServiceClient.prototype.send_get_event_attendee_uids = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_event_attendee_uids', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_get_event_attendee_uids_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_get_event_attendee_uids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_get_event_attendee_uids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.unauthorized_exception) {
    return callback(result.unauthorized_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_event_attendee_uids failed: unknown result');
};
ActionServiceClient.prototype.attend_event = function(headers, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_attend_event(headers, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_attend_event(headers, request);
  }
};

ActionServiceClient.prototype.send_attend_event = function(headers, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('attend_event', Thrift.MessageType.CALL, this.seqid());
  var args = new ActionService_attend_event_args();
  args.headers = headers;
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActionServiceClient.prototype.recv_attend_event = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ActionService_attend_event_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.argument_exception) {
    return callback(result.argument_exception);
  }
  if (null !== result.state_exception) {
    return callback(result.state_exception);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('attend_event failed: unknown result');
};
var ActionServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ActionServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ActionServiceProcessor.prototype.process_create_petition = function(seqid, input, output) {
  var args = new ActionService_create_petition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_petition.length === 2) {
    Q.fcall(this._handler.create_petition, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_create_petition_result({success: result});
        output.writeMessageBegin("create_petition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_create_petition_result(err);
          output.writeMessageBegin("create_petition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_petition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_petition(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_create_petition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_petition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_petition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_edit_petition = function(seqid, input, output) {
  var args = new ActionService_edit_petition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.edit_petition.length === 2) {
    Q.fcall(this._handler.edit_petition, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_edit_petition_result({success: result});
        output.writeMessageBegin("edit_petition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_edit_petition_result(err);
          output.writeMessageBegin("edit_petition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("edit_petition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.edit_petition(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_edit_petition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("edit_petition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("edit_petition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_petitions = function(seqid, input, output) {
  var args = new ActionService_get_petitions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_petitions.length === 2) {
    Q.fcall(this._handler.get_petitions, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_petitions_result({success: result});
        output.writeMessageBegin("get_petitions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_get_petitions_result(err);
          output.writeMessageBegin("get_petitions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_petitions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_petitions(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_get_petitions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_petitions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_petitions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_petitions_by_identifiers = function(seqid, input, output) {
  var args = new ActionService_get_petitions_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_petitions_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_petitions_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_petitions_by_identifiers_result({success: result});
        output.writeMessageBegin("get_petitions_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_petitions_by_identifiers_result(err);
          output.writeMessageBegin("get_petitions_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_petitions_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_petitions_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_petitions_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_petitions_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_petitions_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_create_petition_signature = function(seqid, input, output) {
  var args = new ActionService_create_petition_signature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_petition_signature.length === 2) {
    Q.fcall(this._handler.create_petition_signature, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_create_petition_signature_result({success: result});
        output.writeMessageBegin("create_petition_signature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_create_petition_signature_result(err);
          output.writeMessageBegin("create_petition_signature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_petition_signature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_petition_signature(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_create_petition_signature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_petition_signature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_petition_signature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_entity_signatures = function(seqid, input, output) {
  var args = new ActionService_get_entity_signatures_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_entity_signatures.length === 2) {
    Q.fcall(this._handler.get_entity_signatures, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_entity_signatures_result({success: result});
        output.writeMessageBegin("get_entity_signatures", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_get_entity_signatures_result(err);
          output.writeMessageBegin("get_entity_signatures", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_entity_signatures", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_entity_signatures(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_get_entity_signatures_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_entity_signatures", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_entity_signatures", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_petition_signatures = function(seqid, input, output) {
  var args = new ActionService_get_petition_signatures_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_petition_signatures.length === 2) {
    Q.fcall(this._handler.get_petition_signatures, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_petition_signatures_result({success: result});
        output.writeMessageBegin("get_petition_signatures", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_petition_signatures_result(err);
          output.writeMessageBegin("get_petition_signatures", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_petition_signatures", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_petition_signatures(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_petition_signatures_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_petition_signatures", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_petition_signatures", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_petition_grade_counts = function(seqid, input, output) {
  var args = new ActionService_get_petition_grade_counts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_petition_grade_counts.length === 2) {
    Q.fcall(this._handler.get_petition_grade_counts, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_petition_grade_counts_result({success: result});
        output.writeMessageBegin("get_petition_grade_counts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_petition_grade_counts_result(err);
          output.writeMessageBegin("get_petition_grade_counts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_petition_grade_counts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_petition_grade_counts(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_petition_grade_counts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_petition_grade_counts", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_petition_grade_counts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_petition_signature_counts = function(seqid, input, output) {
  var args = new ActionService_get_petition_signature_counts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_petition_signature_counts.length === 2) {
    Q.fcall(this._handler.get_petition_signature_counts, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_petition_signature_counts_result({success: result});
        output.writeMessageBegin("get_petition_signature_counts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_petition_signature_counts_result(err);
          output.writeMessageBegin("get_petition_signature_counts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_petition_signature_counts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_petition_signature_counts(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_petition_signature_counts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_petition_signature_counts", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_petition_signature_counts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_filter_petition_signature_identifiers = function(seqid, input, output) {
  var args = new ActionService_filter_petition_signature_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.filter_petition_signature_identifiers.length === 2) {
    Q.fcall(this._handler.filter_petition_signature_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_filter_petition_signature_identifiers_result({success: result});
        output.writeMessageBegin("filter_petition_signature_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_filter_petition_signature_identifiers_result(err);
          output.writeMessageBegin("filter_petition_signature_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("filter_petition_signature_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.filter_petition_signature_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_filter_petition_signature_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("filter_petition_signature_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("filter_petition_signature_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_is_permitted_to_sign_petition = function(seqid, input, output) {
  var args = new ActionService_is_permitted_to_sign_petition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.is_permitted_to_sign_petition.length === 2) {
    Q.fcall(this._handler.is_permitted_to_sign_petition, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_is_permitted_to_sign_petition_result({success: result});
        output.writeMessageBegin("is_permitted_to_sign_petition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_is_permitted_to_sign_petition_result(err);
          output.writeMessageBegin("is_permitted_to_sign_petition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("is_permitted_to_sign_petition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.is_permitted_to_sign_petition(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_is_permitted_to_sign_petition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("is_permitted_to_sign_petition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("is_permitted_to_sign_petition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_add_petition_term_targets = function(seqid, input, output) {
  var args = new ActionService_add_petition_term_targets_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_petition_term_targets.length === 2) {
    Q.fcall(this._handler.add_petition_term_targets, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_add_petition_term_targets_result({success: result});
        output.writeMessageBegin("add_petition_term_targets", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_add_petition_term_targets_result(err);
          output.writeMessageBegin("add_petition_term_targets", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("add_petition_term_targets", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_petition_term_targets(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_add_petition_term_targets_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_petition_term_targets", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_petition_term_targets", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_add_petition_candidacy_targets = function(seqid, input, output) {
  var args = new ActionService_add_petition_candidacy_targets_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_petition_candidacy_targets.length === 2) {
    Q.fcall(this._handler.add_petition_candidacy_targets, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_add_petition_candidacy_targets_result({success: result});
        output.writeMessageBegin("add_petition_candidacy_targets", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_add_petition_candidacy_targets_result(err);
          output.writeMessageBegin("add_petition_candidacy_targets", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("add_petition_candidacy_targets", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_petition_candidacy_targets(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_add_petition_candidacy_targets_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_petition_candidacy_targets", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_petition_candidacy_targets", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_remove_petition_term_target = function(seqid, input, output) {
  var args = new ActionService_remove_petition_term_target_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove_petition_term_target.length === 2) {
    Q.fcall(this._handler.remove_petition_term_target, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_remove_petition_term_target_result({success: result});
        output.writeMessageBegin("remove_petition_term_target", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_remove_petition_term_target_result(err);
          output.writeMessageBegin("remove_petition_term_target", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("remove_petition_term_target", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.remove_petition_term_target(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_remove_petition_term_target_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("remove_petition_term_target", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_petition_term_target", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_remove_petition_candidacy_target = function(seqid, input, output) {
  var args = new ActionService_remove_petition_candidacy_target_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove_petition_candidacy_target.length === 2) {
    Q.fcall(this._handler.remove_petition_candidacy_target, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_remove_petition_candidacy_target_result({success: result});
        output.writeMessageBegin("remove_petition_candidacy_target", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_remove_petition_candidacy_target_result(err);
          output.writeMessageBegin("remove_petition_candidacy_target", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("remove_petition_candidacy_target", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.remove_petition_candidacy_target(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_remove_petition_candidacy_target_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("remove_petition_candidacy_target", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_petition_candidacy_target", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_grade_petition_targets = function(seqid, input, output) {
  var args = new ActionService_grade_petition_targets_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.grade_petition_targets.length === 2) {
    Q.fcall(this._handler.grade_petition_targets, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_grade_petition_targets_result({success: result});
        output.writeMessageBegin("grade_petition_targets", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_grade_petition_targets_result(err);
          output.writeMessageBegin("grade_petition_targets", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("grade_petition_targets", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.grade_petition_targets(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_grade_petition_targets_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("grade_petition_targets", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("grade_petition_targets", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_petition_targets = function(seqid, input, output) {
  var args = new ActionService_get_petition_targets_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_petition_targets.length === 2) {
    Q.fcall(this._handler.get_petition_targets, args.header, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_petition_targets_result({success: result});
        output.writeMessageBegin("get_petition_targets", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_petition_targets_result(err);
          output.writeMessageBegin("get_petition_targets", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_petition_targets", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_petition_targets(args.header, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_petition_targets_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_petition_targets", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_petition_targets", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_petition_targets_by_identifiers = function(seqid, input, output) {
  var args = new ActionService_get_petition_targets_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_petition_targets_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_petition_targets_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_petition_targets_by_identifiers_result({success: result});
        output.writeMessageBegin("get_petition_targets_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_petition_targets_by_identifiers_result(err);
          output.writeMessageBegin("get_petition_targets_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_petition_targets_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_petition_targets_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_petition_targets_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_petition_targets_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_petition_targets_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_matching_petition_term_targets = function(seqid, input, output) {
  var args = new ActionService_get_matching_petition_term_targets_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_matching_petition_term_targets.length === 2) {
    Q.fcall(this._handler.get_matching_petition_term_targets, args.header, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_matching_petition_term_targets_result({success: result});
        output.writeMessageBegin("get_matching_petition_term_targets", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_matching_petition_term_targets_result(err);
          output.writeMessageBegin("get_matching_petition_term_targets", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_matching_petition_term_targets", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_matching_petition_term_targets(args.header, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_matching_petition_term_targets_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_matching_petition_term_targets", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_matching_petition_term_targets", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_launch_petition = function(seqid, input, output) {
  var args = new ActionService_launch_petition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.launch_petition.length === 2) {
    Q.fcall(this._handler.launch_petition, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_launch_petition_result({success: result});
        output.writeMessageBegin("launch_petition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_launch_petition_result(err);
          output.writeMessageBegin("launch_petition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("launch_petition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.launch_petition(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_launch_petition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("launch_petition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("launch_petition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_publish_petition_grades = function(seqid, input, output) {
  var args = new ActionService_publish_petition_grades_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.publish_petition_grades.length === 2) {
    Q.fcall(this._handler.publish_petition_grades, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_publish_petition_grades_result({success: result});
        output.writeMessageBegin("publish_petition_grades", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException || err instanceof ttypes.PetitionStateException) {
          result = new ActionService_publish_petition_grades_result(err);
          output.writeMessageBegin("publish_petition_grades", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("publish_petition_grades", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.publish_petition_grades(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException || err instanceof ttypes.PetitionStateException) {
        result_obj = new ActionService_publish_petition_grades_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("publish_petition_grades", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("publish_petition_grades", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_close_petition = function(seqid, input, output) {
  var args = new ActionService_close_petition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_petition.length === 2) {
    Q.fcall(this._handler.close_petition, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_close_petition_result({success: result});
        output.writeMessageBegin("close_petition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_close_petition_result(err);
          output.writeMessageBegin("close_petition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("close_petition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.close_petition(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_close_petition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("close_petition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_petition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_entity_term_petition_grade_counts = function(seqid, input, output) {
  var args = new ActionService_get_entity_term_petition_grade_counts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_entity_term_petition_grade_counts.length === 2) {
    Q.fcall(this._handler.get_entity_term_petition_grade_counts, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_entity_term_petition_grade_counts_result({success: result});
        output.writeMessageBegin("get_entity_term_petition_grade_counts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_get_entity_term_petition_grade_counts_result(err);
          output.writeMessageBegin("get_entity_term_petition_grade_counts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_entity_term_petition_grade_counts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_entity_term_petition_grade_counts(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_get_entity_term_petition_grade_counts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_entity_term_petition_grade_counts", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_entity_term_petition_grade_counts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_receive_event_bus_message_parcel = function(seqid, input, output) {
  var args = new ActionService_receive_event_bus_message_parcel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.receive_event_bus_message_parcel.length === 2) {
    Q.fcall(this._handler.receive_event_bus_message_parcel, args.headers, args.message_parcel)
      .then(function(result) {
        var result_obj = new ActionService_receive_event_bus_message_parcel_result({success: result});
        output.writeMessageBegin("receive_event_bus_message_parcel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("receive_event_bus_message_parcel", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.receive_event_bus_message_parcel(args.headers, args.message_parcel, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ActionService_receive_event_bus_message_parcel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("receive_event_bus_message_parcel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("receive_event_bus_message_parcel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_filter_terms_by_entity_actions = function(seqid, input, output) {
  var args = new ActionService_filter_terms_by_entity_actions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.filter_terms_by_entity_actions.length === 2) {
    Q.fcall(this._handler.filter_terms_by_entity_actions, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_filter_terms_by_entity_actions_result({success: result});
        output.writeMessageBegin("filter_terms_by_entity_actions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_filter_terms_by_entity_actions_result(err);
          output.writeMessageBegin("filter_terms_by_entity_actions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("filter_terms_by_entity_actions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.filter_terms_by_entity_actions(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_filter_terms_by_entity_actions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("filter_terms_by_entity_actions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("filter_terms_by_entity_actions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_petition_target_signatures_count = function(seqid, input, output) {
  var args = new ActionService_get_petition_target_signatures_count_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_petition_target_signatures_count.length === 2) {
    Q.fcall(this._handler.get_petition_target_signatures_count, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_petition_target_signatures_count_result({success: result});
        output.writeMessageBegin("get_petition_target_signatures_count", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_petition_target_signatures_count_result(err);
          output.writeMessageBegin("get_petition_target_signatures_count", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_petition_target_signatures_count", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_petition_target_signatures_count(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_petition_target_signatures_count_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_petition_target_signatures_count", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_petition_target_signatures_count", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_send_grading_notifications = function(seqid, input, output) {
  var args = new ActionService_send_grading_notifications_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.send_grading_notifications.length === 2) {
    Q.fcall(this._handler.send_grading_notifications, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_send_grading_notifications_result({success: result});
        output.writeMessageBegin("send_grading_notifications", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.StateException || err instanceof shared_ttypes.UnauthorizedException || err instanceof ttypes.PetitionStateException) {
          result = new ActionService_send_grading_notifications_result(err);
          output.writeMessageBegin("send_grading_notifications", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("send_grading_notifications", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.send_grading_notifications(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.StateException || err instanceof shared_ttypes.UnauthorizedException || err instanceof ttypes.PetitionStateException) {
        result_obj = new ActionService_send_grading_notifications_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("send_grading_notifications", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("send_grading_notifications", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_events_by_identifiers = function(seqid, input, output) {
  var args = new ActionService_get_events_by_identifiers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_events_by_identifiers.length === 2) {
    Q.fcall(this._handler.get_events_by_identifiers, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_events_by_identifiers_result({success: result});
        output.writeMessageBegin("get_events_by_identifiers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_events_by_identifiers_result(err);
          output.writeMessageBegin("get_events_by_identifiers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_events_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_events_by_identifiers(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_events_by_identifiers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_events_by_identifiers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_events_by_identifiers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_events = function(seqid, input, output) {
  var args = new ActionService_get_events_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_events.length === 2) {
    Q.fcall(this._handler.get_events, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_events_result({success: result});
        output.writeMessageBegin("get_events", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException) {
          result = new ActionService_get_events_result(err);
          output.writeMessageBegin("get_events", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_events", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_events(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException) {
        result_obj = new ActionService_get_events_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_events", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_events", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_create_event = function(seqid, input, output) {
  var args = new ActionService_create_event_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_event.length === 2) {
    Q.fcall(this._handler.create_event, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_create_event_result({success: result});
        output.writeMessageBegin("create_event", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_create_event_result(err);
          output.writeMessageBegin("create_event", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_event", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_event(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_create_event_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_event", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_event", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_delete_event = function(seqid, input, output) {
  var args = new ActionService_delete_event_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_event.length === 2) {
    Q.fcall(this._handler.delete_event, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_delete_event_result({success: result});
        output.writeMessageBegin("delete_event", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.StateException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_delete_event_result(err);
          output.writeMessageBegin("delete_event", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_event", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_event(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.StateException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_delete_event_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_event", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_event", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_get_event_attendee_uids = function(seqid, input, output) {
  var args = new ActionService_get_event_attendee_uids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_event_attendee_uids.length === 2) {
    Q.fcall(this._handler.get_event_attendee_uids, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_get_event_attendee_uids_result({success: result});
        output.writeMessageBegin("get_event_attendee_uids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
          result = new ActionService_get_event_attendee_uids_result(err);
          output.writeMessageBegin("get_event_attendee_uids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_event_attendee_uids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_event_attendee_uids(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.UnauthorizedException) {
        result_obj = new ActionService_get_event_attendee_uids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_event_attendee_uids", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_event_attendee_uids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ActionServiceProcessor.prototype.process_attend_event = function(seqid, input, output) {
  var args = new ActionService_attend_event_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.attend_event.length === 2) {
    Q.fcall(this._handler.attend_event, args.headers, args.request)
      .then(function(result) {
        var result_obj = new ActionService_attend_event_result({success: result});
        output.writeMessageBegin("attend_event", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.StateException) {
          result = new ActionService_attend_event_result(err);
          output.writeMessageBegin("attend_event", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("attend_event", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.attend_event(args.headers, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.ArgumentException || err instanceof shared_ttypes.StateException) {
        result_obj = new ActionService_attend_event_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("attend_event", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("attend_event", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var event_bus_ttypes = require('./event_bus_types');


var ttypes = module.exports = {};
ttypes.DistrictLevel = {
  'FEDERAL' : 1,
  'STATE' : 2,
  'LOCAL' : 3
};
ttypes.DivisionType = {
  'COUNTRY' : 1,
  'STATE' : 2,
  'CD' : 3,
  'SLDU' : 4,
  'SLDL' : 5,
  'COUNTY' : 6,
  'PLACE' : 7,
  'COUNCIL_DISTRICT' : 8
};
ttypes.GoverningEntityRole = {
  'EXECUTIVE_PRIMARY' : 1,
  'EXECUTIVE_SECONDARY' : 2,
  'EXECUTIVE_TERTIARY' : 3,
  'LEGISLATIVE_UPPER' : 4,
  'LEGISLATIVE_LOWER' : 5,
  'JUDICIAL' : 6
};
ttypes.PoliticianChannelType = {
  'ADDRESS' : 1,
  'EMAIL' : 2,
  'FACEBOOK' : 3,
  'GOOGLE_PLUS' : 4,
  'PHONE' : 5,
  'TWITTER' : 6,
  'WEBSITE' : 7,
  'YOUTUBE' : 8
};
ttypes.StateCode = {
  'AL' : 1,
  'AK' : 2,
  'AZ' : 3,
  'AR' : 4,
  'CA' : 5,
  'CO' : 6,
  'CT' : 7,
  'DE' : 8,
  'DC' : 9,
  'FL' : 10,
  'GA' : 11,
  'HI' : 12,
  'ID' : 13,
  'IL' : 14,
  'IN' : 15,
  'IA' : 16,
  'KS' : 17,
  'KY' : 18,
  'LA' : 19,
  'ME' : 20,
  'MD' : 21,
  'MA' : 22,
  'MI' : 23,
  'MN' : 24,
  'MS' : 25,
  'MO' : 26,
  'MT' : 27,
  'NE' : 28,
  'NV' : 29,
  'NH' : 30,
  'NJ' : 31,
  'NM' : 32,
  'NY' : 33,
  'NC' : 34,
  'ND' : 35,
  'OH' : 36,
  'OK' : 37,
  'OR' : 38,
  'PA' : 39,
  'RI' : 40,
  'SC' : 41,
  'SD' : 42,
  'TN' : 43,
  'TX' : 44,
  'UT' : 45,
  'VT' : 46,
  'VA' : 47,
  'WA' : 48,
  'WV' : 49,
  'WI' : 50,
  'WY' : 51
};
ttypes.GetServedTermsSortField = {
  'POLITICIAN_NAME' : 4,
  'SEAT_NAME' : 5
};
ttypes.GetServedTermsByIdentifiersSortField = {
  'DISTRICT_LEVEL' : 1,
  'DIVISION_TYPE' : 2
};
ttypes.GetCandidaciesSortField = {
  'POLITICIAN_NAME' : 1,
  'SEAT_NAME' : 2
};
ttypes.CivicInformationApiExceptionCode = {
  'UNKNOWN' : 1,
  'NOT_FOUND' : 2,
  'INVALID_INPUT' : 3
};
var Candidacy = module.exports.Candidacy = function(args) {
  this.uid = null;
  this.race_uid = null;
  this.politician_uid = null;
  this.political_party_uid = null;
  this.current = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.race_uid !== undefined && args.race_uid !== null) {
      this.race_uid = args.race_uid;
    }
    if (args.politician_uid !== undefined && args.politician_uid !== null) {
      this.politician_uid = args.politician_uid;
    }
    if (args.political_party_uid !== undefined && args.political_party_uid !== null) {
      this.political_party_uid = args.political_party_uid;
    }
    if (args.current !== undefined && args.current !== null) {
      this.current = args.current;
    }
  }
};
Candidacy.prototype = {};
Candidacy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.race_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.politician_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.political_party_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.current = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Candidacy.prototype.write = function(output) {
  output.writeStructBegin('Candidacy');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.race_uid !== null && this.race_uid !== undefined) {
    output.writeFieldBegin('race_uid', Thrift.Type.STRING, 2);
    output.writeString(this.race_uid);
    output.writeFieldEnd();
  }
  if (this.politician_uid !== null && this.politician_uid !== undefined) {
    output.writeFieldBegin('politician_uid', Thrift.Type.STRING, 3);
    output.writeString(this.politician_uid);
    output.writeFieldEnd();
  }
  if (this.political_party_uid !== null && this.political_party_uid !== undefined) {
    output.writeFieldBegin('political_party_uid', Thrift.Type.STRING, 4);
    output.writeString(this.political_party_uid);
    output.writeFieldEnd();
  }
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.BOOL, 5);
    output.writeBool(this.current);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Candidacies = module.exports.Candidacies = function(args) {
  this.candidacies = null;
  if (args) {
    if (args.candidacies !== undefined && args.candidacies !== null) {
      this.candidacies = Thrift.copyList(args.candidacies, [ttypes.Candidacy]);
    }
  }
};
Candidacies.prototype = {};
Candidacies.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.candidacies = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Candidacy();
          elem6.read(input);
          this.candidacies.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Candidacies.prototype.write = function(output) {
  output.writeStructBegin('Candidacies');
  if (this.candidacies !== null && this.candidacies !== undefined) {
    output.writeFieldBegin('candidacies', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.candidacies.length);
    for (var iter7 in this.candidacies)
    {
      if (this.candidacies.hasOwnProperty(iter7))
      {
        iter7 = this.candidacies[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedCandidacies = module.exports.PaginatedCandidacies = function(args) {
  this.page_info = null;
  this.candidacies = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.candidacies !== undefined && args.candidacies !== null) {
      this.candidacies = Thrift.copyList(args.candidacies, [ttypes.Candidacy]);
    }
  }
};
PaginatedCandidacies.prototype = {};
PaginatedCandidacies.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.candidacies = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Candidacy();
          elem14.read(input);
          this.candidacies.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedCandidacies.prototype.write = function(output) {
  output.writeStructBegin('PaginatedCandidacies');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.candidacies !== null && this.candidacies !== undefined) {
    output.writeFieldBegin('candidacies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.candidacies.length);
    for (var iter15 in this.candidacies)
    {
      if (this.candidacies.hasOwnProperty(iter15))
      {
        iter15 = this.candidacies[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CandidacyUniqueIdentifiers = module.exports.CandidacyUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
CandidacyUniqueIdentifiers.prototype = {};
CandidacyUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.uids = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.uids.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CandidacyUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('CandidacyUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter23 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter23))
      {
        iter23 = this.uids[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var District = module.exports.District = function(args) {
  this.uid = null;
  this.name = null;
  this.district_level = null;
  this.ocd_id = null;
  this.division_type = null;
  this.description = null;
  this.short_name = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.district_level !== undefined && args.district_level !== null) {
      this.district_level = args.district_level;
    }
    if (args.ocd_id !== undefined && args.ocd_id !== null) {
      this.ocd_id = args.ocd_id;
    }
    if (args.division_type !== undefined && args.division_type !== null) {
      this.division_type = args.division_type;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.short_name !== undefined && args.short_name !== null) {
      this.short_name = args.short_name;
    }
  }
};
District.prototype = {};
District.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.district_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ocd_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.division_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.short_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

District.prototype.write = function(output) {
  output.writeStructBegin('District');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.district_level !== null && this.district_level !== undefined) {
    output.writeFieldBegin('district_level', Thrift.Type.I32, 3);
    output.writeI32(this.district_level);
    output.writeFieldEnd();
  }
  if (this.ocd_id !== null && this.ocd_id !== undefined) {
    output.writeFieldBegin('ocd_id', Thrift.Type.STRING, 4);
    output.writeString(this.ocd_id);
    output.writeFieldEnd();
  }
  if (this.division_type !== null && this.division_type !== undefined) {
    output.writeFieldBegin('division_type', Thrift.Type.I32, 5);
    output.writeI32(this.division_type);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.short_name !== null && this.short_name !== undefined) {
    output.writeFieldBegin('short_name', Thrift.Type.STRING, 7);
    output.writeString(this.short_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Districts = module.exports.Districts = function(args) {
  this.districts = null;
  if (args) {
    if (args.districts !== undefined && args.districts !== null) {
      this.districts = Thrift.copyList(args.districts, [ttypes.District]);
    }
  }
};
Districts.prototype = {};
Districts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.districts = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.District();
          elem30.read(input);
          this.districts.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Districts.prototype.write = function(output) {
  output.writeStructBegin('Districts');
  if (this.districts !== null && this.districts !== undefined) {
    output.writeFieldBegin('districts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.districts.length);
    for (var iter31 in this.districts)
    {
      if (this.districts.hasOwnProperty(iter31))
      {
        iter31 = this.districts[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoliticalParty = module.exports.PoliticalParty = function(args) {
  this.uid = null;
  this.name = null;
  this.color = null;
  this.image = null;
  this.demonym = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.color !== undefined && args.color !== null) {
      this.color = args.color;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.demonym !== undefined && args.demonym !== null) {
      this.demonym = args.demonym;
    }
  }
};
PoliticalParty.prototype = {};
PoliticalParty.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.color = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.demonym = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoliticalParty.prototype.write = function(output) {
  output.writeStructBegin('PoliticalParty');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.color !== null && this.color !== undefined) {
    output.writeFieldBegin('color', Thrift.Type.STRING, 3);
    output.writeString(this.color);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 4);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.demonym !== null && this.demonym !== undefined) {
    output.writeFieldBegin('demonym', Thrift.Type.STRING, 5);
    output.writeString(this.demonym);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoliticianChannel = module.exports.PoliticianChannel = function(args) {
  this.uid = null;
  this.politician_uid = null;
  this.type = null;
  this.value = null;
  this.href = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.politician_uid !== undefined && args.politician_uid !== null) {
      this.politician_uid = args.politician_uid;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.href !== undefined && args.href !== null) {
      this.href = args.href;
    }
  }
};
PoliticianChannel.prototype = {};
PoliticianChannel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.politician_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.href = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoliticianChannel.prototype.write = function(output) {
  output.writeStructBegin('PoliticianChannel');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.politician_uid !== null && this.politician_uid !== undefined) {
    output.writeFieldBegin('politician_uid', Thrift.Type.STRING, 2);
    output.writeString(this.politician_uid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.href !== null && this.href !== undefined) {
    output.writeFieldBegin('href', Thrift.Type.STRING, 5);
    output.writeString(this.href);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoliticianChannels = module.exports.PoliticianChannels = function(args) {
  this.politician_channels = null;
  if (args) {
    if (args.politician_channels !== undefined && args.politician_channels !== null) {
      this.politician_channels = Thrift.copyList(args.politician_channels, [ttypes.PoliticianChannel]);
    }
  }
};
PoliticianChannels.prototype = {};
PoliticianChannels.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.politician_channels = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.PoliticianChannel();
          elem38.read(input);
          this.politician_channels.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoliticianChannels.prototype.write = function(output) {
  output.writeStructBegin('PoliticianChannels');
  if (this.politician_channels !== null && this.politician_channels !== undefined) {
    output.writeFieldBegin('politician_channels', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.politician_channels.length);
    for (var iter39 in this.politician_channels)
    {
      if (this.politician_channels.hasOwnProperty(iter39))
      {
        iter39 = this.politician_channels[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoliticalParties = module.exports.PoliticalParties = function(args) {
  this.political_parties = null;
  if (args) {
    if (args.political_parties !== undefined && args.political_parties !== null) {
      this.political_parties = Thrift.copyList(args.political_parties, [ttypes.PoliticalParty]);
    }
  }
};
PoliticalParties.prototype = {};
PoliticalParties.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.political_parties = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.PoliticalParty();
          elem46.read(input);
          this.political_parties.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoliticalParties.prototype.write = function(output) {
  output.writeStructBegin('PoliticalParties');
  if (this.political_parties !== null && this.political_parties !== undefined) {
    output.writeFieldBegin('political_parties', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.political_parties.length);
    for (var iter47 in this.political_parties)
    {
      if (this.political_parties.hasOwnProperty(iter47))
      {
        iter47 = this.political_parties[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccountableTo = module.exports.AccountableTo = function(args) {
  this.district_uid = null;
  this.governing_entity_uid = null;
  if (args) {
    if (args.district_uid !== undefined && args.district_uid !== null) {
      this.district_uid = args.district_uid;
    }
    if (args.governing_entity_uid !== undefined && args.governing_entity_uid !== null) {
      this.governing_entity_uid = args.governing_entity_uid;
    }
  }
};
AccountableTo.prototype = {};
AccountableTo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.district_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.governing_entity_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountableTo.prototype.write = function(output) {
  output.writeStructBegin('AccountableTo');
  if (this.district_uid !== null && this.district_uid !== undefined) {
    output.writeFieldBegin('district_uid', Thrift.Type.STRING, 1);
    output.writeString(this.district_uid);
    output.writeFieldEnd();
  }
  if (this.governing_entity_uid !== null && this.governing_entity_uid !== undefined) {
    output.writeFieldBegin('governing_entity_uid', Thrift.Type.STRING, 2);
    output.writeString(this.governing_entity_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Body = module.exports.Body = function(args) {
  this.uid = null;
  this.name = null;
  this.jurisdiction_uid = null;
  this.role = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.jurisdiction_uid !== undefined && args.jurisdiction_uid !== null) {
      this.jurisdiction_uid = args.jurisdiction_uid;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
  }
};
Body.prototype = {};
Body.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jurisdiction_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Body.prototype.write = function(output) {
  output.writeStructBegin('Body');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.jurisdiction_uid !== null && this.jurisdiction_uid !== undefined) {
    output.writeFieldBegin('jurisdiction_uid', Thrift.Type.STRING, 3);
    output.writeString(this.jurisdiction_uid);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 5);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Bodies = module.exports.Bodies = function(args) {
  this.bodies = null;
  if (args) {
    if (args.bodies !== undefined && args.bodies !== null) {
      this.bodies = Thrift.copyList(args.bodies, [ttypes.Body]);
    }
  }
};
Bodies.prototype = {};
Bodies.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.bodies = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.Body();
          elem54.read(input);
          this.bodies.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Bodies.prototype.write = function(output) {
  output.writeStructBegin('Bodies');
  if (this.bodies !== null && this.bodies !== undefined) {
    output.writeFieldBegin('bodies', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.bodies.length);
    for (var iter55 in this.bodies)
    {
      if (this.bodies.hasOwnProperty(iter55))
      {
        iter55 = this.bodies[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedBodies = module.exports.PaginatedBodies = function(args) {
  this.page_info = null;
  this.bodies = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.bodies !== undefined && args.bodies !== null) {
      this.bodies = Thrift.copyList(args.bodies, [ttypes.Body]);
    }
  }
};
PaginatedBodies.prototype = {};
PaginatedBodies.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.bodies = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.Body();
          elem62.read(input);
          this.bodies.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedBodies.prototype.write = function(output) {
  output.writeStructBegin('PaginatedBodies');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.bodies !== null && this.bodies !== undefined) {
    output.writeFieldBegin('bodies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.bodies.length);
    for (var iter63 in this.bodies)
    {
      if (this.bodies.hasOwnProperty(iter63))
      {
        iter63 = this.bodies[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Seat = module.exports.Seat = function(args) {
  this.uid = null;
  this.name = null;
  this.jurisdiction_uid = null;
  this.accountable_to = null;
  this.role = null;
  this.body_uid = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.jurisdiction_uid !== undefined && args.jurisdiction_uid !== null) {
      this.jurisdiction_uid = args.jurisdiction_uid;
    }
    if (args.accountable_to !== undefined && args.accountable_to !== null) {
      this.accountable_to = new ttypes.AccountableTo(args.accountable_to);
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.body_uid !== undefined && args.body_uid !== null) {
      this.body_uid = args.body_uid;
    }
  }
};
Seat.prototype = {};
Seat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jurisdiction_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.accountable_to = new ttypes.AccountableTo();
        this.accountable_to.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.body_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Seat.prototype.write = function(output) {
  output.writeStructBegin('Seat');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.jurisdiction_uid !== null && this.jurisdiction_uid !== undefined) {
    output.writeFieldBegin('jurisdiction_uid', Thrift.Type.STRING, 3);
    output.writeString(this.jurisdiction_uid);
    output.writeFieldEnd();
  }
  if (this.accountable_to !== null && this.accountable_to !== undefined) {
    output.writeFieldBegin('accountable_to', Thrift.Type.STRUCT, 4);
    this.accountable_to.write(output);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 5);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  if (this.body_uid !== null && this.body_uid !== undefined) {
    output.writeFieldBegin('body_uid', Thrift.Type.STRING, 6);
    output.writeString(this.body_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Seats = module.exports.Seats = function(args) {
  this.seats = null;
  if (args) {
    if (args.seats !== undefined && args.seats !== null) {
      this.seats = Thrift.copyList(args.seats, [ttypes.Seat]);
    }
  }
};
Seats.prototype = {};
Seats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.seats = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.Seat();
          elem70.read(input);
          this.seats.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Seats.prototype.write = function(output) {
  output.writeStructBegin('Seats');
  if (this.seats !== null && this.seats !== undefined) {
    output.writeFieldBegin('seats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.seats.length);
    for (var iter71 in this.seats)
    {
      if (this.seats.hasOwnProperty(iter71))
      {
        iter71 = this.seats[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedSeats = module.exports.PaginatedSeats = function(args) {
  this.page_info = null;
  this.seats = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.seats !== undefined && args.seats !== null) {
      this.seats = Thrift.copyList(args.seats, [ttypes.Seat]);
    }
  }
};
PaginatedSeats.prototype = {};
PaginatedSeats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.seats = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.Seat();
          elem78.read(input);
          this.seats.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedSeats.prototype.write = function(output) {
  output.writeStructBegin('PaginatedSeats');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.seats !== null && this.seats !== undefined) {
    output.writeFieldBegin('seats', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.seats.length);
    for (var iter79 in this.seats)
    {
      if (this.seats.hasOwnProperty(iter79))
      {
        iter79 = this.seats[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Section = module.exports.Section = function(args) {
  this.uid = null;
  this.name = null;
  this.jurisdiction_uid = null;
  this.role = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.jurisdiction_uid !== undefined && args.jurisdiction_uid !== null) {
      this.jurisdiction_uid = args.jurisdiction_uid;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
  }
};
Section.prototype = {};
Section.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jurisdiction_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Section.prototype.write = function(output) {
  output.writeStructBegin('Section');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.jurisdiction_uid !== null && this.jurisdiction_uid !== undefined) {
    output.writeFieldBegin('jurisdiction_uid', Thrift.Type.STRING, 3);
    output.writeString(this.jurisdiction_uid);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 5);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GoverningEntity = module.exports.GoverningEntity = function(args) {
  this.seat = null;
  this.section = null;
  this.body = null;
  if (args) {
    if (args.seat !== undefined && args.seat !== null) {
      this.seat = new ttypes.Seat(args.seat);
    }
    if (args.section !== undefined && args.section !== null) {
      this.section = new ttypes.Section(args.section);
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = new ttypes.Body(args.body);
    }
  }
};
GoverningEntity.prototype = {};
GoverningEntity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.seat = new ttypes.Seat();
        this.seat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.section = new ttypes.Section();
        this.section.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.body = new ttypes.Body();
        this.body.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GoverningEntity.prototype.write = function(output) {
  output.writeStructBegin('GoverningEntity');
  if (this.seat !== null && this.seat !== undefined) {
    output.writeFieldBegin('seat', Thrift.Type.STRUCT, 1);
    this.seat.write(output);
    output.writeFieldEnd();
  }
  if (this.section !== null && this.section !== undefined) {
    output.writeFieldBegin('section', Thrift.Type.STRUCT, 2);
    this.section.write(output);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRUCT, 3);
    this.body.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Politician = module.exports.Politician = function(args) {
  this.uid = null;
  this.full_name = null;
  this.short_name = null;
  this.image = null;
  this.pronoun = null;
  this.summary = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.full_name !== undefined && args.full_name !== null) {
      this.full_name = args.full_name;
    }
    if (args.short_name !== undefined && args.short_name !== null) {
      this.short_name = args.short_name;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.pronoun !== undefined && args.pronoun !== null) {
      this.pronoun = args.pronoun;
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = args.summary;
    }
  }
};
Politician.prototype = {};
Politician.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.full_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.short_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.pronoun = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Politician.prototype.write = function(output) {
  output.writeStructBegin('Politician');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.full_name !== null && this.full_name !== undefined) {
    output.writeFieldBegin('full_name', Thrift.Type.STRING, 2);
    output.writeString(this.full_name);
    output.writeFieldEnd();
  }
  if (this.short_name !== null && this.short_name !== undefined) {
    output.writeFieldBegin('short_name', Thrift.Type.STRING, 3);
    output.writeString(this.short_name);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 4);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.pronoun !== null && this.pronoun !== undefined) {
    output.writeFieldBegin('pronoun', Thrift.Type.I32, 5);
    output.writeI32(this.pronoun);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRING, 6);
    output.writeString(this.summary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Politicians = module.exports.Politicians = function(args) {
  this.politicians = null;
  if (args) {
    if (args.politicians !== undefined && args.politicians !== null) {
      this.politicians = Thrift.copyList(args.politicians, [ttypes.Politician]);
    }
  }
};
Politicians.prototype = {};
Politicians.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.politicians = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.Politician();
          elem86.read(input);
          this.politicians.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Politicians.prototype.write = function(output) {
  output.writeStructBegin('Politicians');
  if (this.politicians !== null && this.politicians !== undefined) {
    output.writeFieldBegin('politicians', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.politicians.length);
    for (var iter87 in this.politicians)
    {
      if (this.politicians.hasOwnProperty(iter87))
      {
        iter87 = this.politicians[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedPoliticians = module.exports.PaginatedPoliticians = function(args) {
  this.page_info = null;
  this.politicians = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.politicians !== undefined && args.politicians !== null) {
      this.politicians = Thrift.copyList(args.politicians, [ttypes.Politician]);
    }
  }
};
PaginatedPoliticians.prototype = {};
PaginatedPoliticians.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.politicians = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.Politician();
          elem94.read(input);
          this.politicians.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedPoliticians.prototype.write = function(output) {
  output.writeStructBegin('PaginatedPoliticians');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.politicians !== null && this.politicians !== undefined) {
    output.writeFieldBegin('politicians', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.politicians.length);
    for (var iter95 in this.politicians)
    {
      if (this.politicians.hasOwnProperty(iter95))
      {
        iter95 = this.politicians[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServedTerm = module.exports.ServedTerm = function(args) {
  this.uid = null;
  this.politician_uid = null;
  this.seat_uid = null;
  this.political_party_uid = null;
  this.current = null;
  this.start_date = null;
  this.end_date = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.politician_uid !== undefined && args.politician_uid !== null) {
      this.politician_uid = args.politician_uid;
    }
    if (args.seat_uid !== undefined && args.seat_uid !== null) {
      this.seat_uid = args.seat_uid;
    }
    if (args.political_party_uid !== undefined && args.political_party_uid !== null) {
      this.political_party_uid = args.political_party_uid;
    }
    if (args.current !== undefined && args.current !== null) {
      this.current = args.current;
    }
    if (args.start_date !== undefined && args.start_date !== null) {
      this.start_date = args.start_date;
    }
    if (args.end_date !== undefined && args.end_date !== null) {
      this.end_date = args.end_date;
    }
  }
};
ServedTerm.prototype = {};
ServedTerm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.politician_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.seat_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.political_party_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.current = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.start_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.end_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServedTerm.prototype.write = function(output) {
  output.writeStructBegin('ServedTerm');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.politician_uid !== null && this.politician_uid !== undefined) {
    output.writeFieldBegin('politician_uid', Thrift.Type.STRING, 2);
    output.writeString(this.politician_uid);
    output.writeFieldEnd();
  }
  if (this.seat_uid !== null && this.seat_uid !== undefined) {
    output.writeFieldBegin('seat_uid', Thrift.Type.STRING, 3);
    output.writeString(this.seat_uid);
    output.writeFieldEnd();
  }
  if (this.political_party_uid !== null && this.political_party_uid !== undefined) {
    output.writeFieldBegin('political_party_uid', Thrift.Type.STRING, 4);
    output.writeString(this.political_party_uid);
    output.writeFieldEnd();
  }
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.BOOL, 5);
    output.writeBool(this.current);
    output.writeFieldEnd();
  }
  if (this.start_date !== null && this.start_date !== undefined) {
    output.writeFieldBegin('start_date', Thrift.Type.STRING, 6);
    output.writeString(this.start_date);
    output.writeFieldEnd();
  }
  if (this.end_date !== null && this.end_date !== undefined) {
    output.writeFieldBegin('end_date', Thrift.Type.STRING, 7);
    output.writeString(this.end_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServedTerms = module.exports.ServedTerms = function(args) {
  this.served_terms = null;
  if (args) {
    if (args.served_terms !== undefined && args.served_terms !== null) {
      this.served_terms = Thrift.copyList(args.served_terms, [ttypes.ServedTerm]);
    }
  }
};
ServedTerms.prototype = {};
ServedTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.served_terms = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.ServedTerm();
          elem102.read(input);
          this.served_terms.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServedTerms.prototype.write = function(output) {
  output.writeStructBegin('ServedTerms');
  if (this.served_terms !== null && this.served_terms !== undefined) {
    output.writeFieldBegin('served_terms', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.served_terms.length);
    for (var iter103 in this.served_terms)
    {
      if (this.served_terms.hasOwnProperty(iter103))
      {
        iter103 = this.served_terms[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetServedTermsByIdentifiersSort = module.exports.GetServedTermsByIdentifiersSort = function(args) {
  this.field = null;
  this.sort_order = null;
  if (args) {
    if (args.field !== undefined && args.field !== null) {
      this.field = args.field;
    }
    if (args.sort_order !== undefined && args.sort_order !== null) {
      this.sort_order = args.sort_order;
    }
  }
};
GetServedTermsByIdentifiersSort.prototype = {};
GetServedTermsByIdentifiersSort.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.field = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sort_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServedTermsByIdentifiersSort.prototype.write = function(output) {
  output.writeStructBegin('GetServedTermsByIdentifiersSort');
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.I32, 1);
    output.writeI32(this.field);
    output.writeFieldEnd();
  }
  if (this.sort_order !== null && this.sort_order !== undefined) {
    output.writeFieldBegin('sort_order', Thrift.Type.I32, 2);
    output.writeI32(this.sort_order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedServedTerms = module.exports.PaginatedServedTerms = function(args) {
  this.page_info = null;
  this.served_terms = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.served_terms !== undefined && args.served_terms !== null) {
      this.served_terms = Thrift.copyList(args.served_terms, [ttypes.ServedTerm]);
    }
  }
};
PaginatedServedTerms.prototype = {};
PaginatedServedTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.served_terms = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.ServedTerm();
          elem110.read(input);
          this.served_terms.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedServedTerms.prototype.write = function(output) {
  output.writeStructBegin('PaginatedServedTerms');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.served_terms !== null && this.served_terms !== undefined) {
    output.writeFieldBegin('served_terms', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.served_terms.length);
    for (var iter111 in this.served_terms)
    {
      if (this.served_terms.hasOwnProperty(iter111))
      {
        iter111 = this.served_terms[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Race = module.exports.Race = function(args) {
  this.uid = null;
  this.name = null;
  this.current = null;
  this.seat_uids = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.current !== undefined && args.current !== null) {
      this.current = args.current;
    }
    if (args.seat_uids !== undefined && args.seat_uids !== null) {
      this.seat_uids = Thrift.copyList(args.seat_uids, [null]);
    }
  }
};
Race.prototype = {};
Race.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.current = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.seat_uids = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readString();
          this.seat_uids.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Race.prototype.write = function(output) {
  output.writeStructBegin('Race');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.BOOL, 3);
    output.writeBool(this.current);
    output.writeFieldEnd();
  }
  if (this.seat_uids !== null && this.seat_uids !== undefined) {
    output.writeFieldBegin('seat_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.seat_uids.length);
    for (var iter119 in this.seat_uids)
    {
      if (this.seat_uids.hasOwnProperty(iter119))
      {
        iter119 = this.seat_uids[iter119];
        output.writeString(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Races = module.exports.Races = function(args) {
  this.races = null;
  if (args) {
    if (args.races !== undefined && args.races !== null) {
      this.races = Thrift.copyList(args.races, [ttypes.Race]);
    }
  }
};
Races.prototype = {};
Races.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.races = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.Race();
          elem126.read(input);
          this.races.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Races.prototype.write = function(output) {
  output.writeStructBegin('Races');
  if (this.races !== null && this.races !== undefined) {
    output.writeFieldBegin('races', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.races.length);
    for (var iter127 in this.races)
    {
      if (this.races.hasOwnProperty(iter127))
      {
        iter127 = this.races[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedRaces = module.exports.PaginatedRaces = function(args) {
  this.page_info = null;
  this.races = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.races !== undefined && args.races !== null) {
      this.races = Thrift.copyList(args.races, [ttypes.Race]);
    }
  }
};
PaginatedRaces.prototype = {};
PaginatedRaces.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.races = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new ttypes.Race();
          elem134.read(input);
          this.races.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedRaces.prototype.write = function(output) {
  output.writeStructBegin('PaginatedRaces');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.races !== null && this.races !== undefined) {
    output.writeFieldBegin('races', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.races.length);
    for (var iter135 in this.races)
    {
      if (this.races.hasOwnProperty(iter135))
      {
        iter135 = this.races[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Election = module.exports.Election = function(args) {
  this.uid = null;
  this.name = null;
  this.race_uid = null;
  this.date = null;
  this.political_party_uid = null;
  this.current = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.race_uid !== undefined && args.race_uid !== null) {
      this.race_uid = args.race_uid;
    }
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.political_party_uid !== undefined && args.political_party_uid !== null) {
      this.political_party_uid = args.political_party_uid;
    }
    if (args.current !== undefined && args.current !== null) {
      this.current = args.current;
    }
  }
};
Election.prototype = {};
Election.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.race_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.political_party_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.current = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Election.prototype.write = function(output) {
  output.writeStructBegin('Election');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.race_uid !== null && this.race_uid !== undefined) {
    output.writeFieldBegin('race_uid', Thrift.Type.STRING, 3);
    output.writeString(this.race_uid);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 4);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.political_party_uid !== null && this.political_party_uid !== undefined) {
    output.writeFieldBegin('political_party_uid', Thrift.Type.STRING, 5);
    output.writeString(this.political_party_uid);
    output.writeFieldEnd();
  }
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.BOOL, 6);
    output.writeBool(this.current);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Elections = module.exports.Elections = function(args) {
  this.elections = null;
  if (args) {
    if (args.elections !== undefined && args.elections !== null) {
      this.elections = Thrift.copyList(args.elections, [ttypes.Election]);
    }
  }
};
Elections.prototype = {};
Elections.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.elections = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new ttypes.Election();
          elem142.read(input);
          this.elections.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Elections.prototype.write = function(output) {
  output.writeStructBegin('Elections');
  if (this.elections !== null && this.elections !== undefined) {
    output.writeFieldBegin('elections', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.elections.length);
    for (var iter143 in this.elections)
    {
      if (this.elections.hasOwnProperty(iter143))
      {
        iter143 = this.elections[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedElections = module.exports.PaginatedElections = function(args) {
  this.page_info = null;
  this.elections = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.elections !== undefined && args.elections !== null) {
      this.elections = Thrift.copyList(args.elections, [ttypes.Election]);
    }
  }
};
PaginatedElections.prototype = {};
PaginatedElections.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.elections = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = new ttypes.Election();
          elem150.read(input);
          this.elections.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedElections.prototype.write = function(output) {
  output.writeStructBegin('PaginatedElections');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.elections !== null && this.elections !== undefined) {
    output.writeFieldBegin('elections', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.elections.length);
    for (var iter151 in this.elections)
    {
      if (this.elections.hasOwnProperty(iter151))
      {
        iter151 = this.elections[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBodiesFilterParams = module.exports.GetBodiesFilterParams = function(args) {
  this.jurisdiction_district_levels = null;
  if (args) {
    if (args.jurisdiction_district_levels !== undefined && args.jurisdiction_district_levels !== null) {
      this.jurisdiction_district_levels = Thrift.copyList(args.jurisdiction_district_levels, [null]);
    }
  }
};
GetBodiesFilterParams.prototype = {};
GetBodiesFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.jurisdiction_district_levels = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = input.readI32();
          this.jurisdiction_district_levels.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBodiesFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetBodiesFilterParams');
  if (this.jurisdiction_district_levels !== null && this.jurisdiction_district_levels !== undefined) {
    output.writeFieldBegin('jurisdiction_district_levels', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.jurisdiction_district_levels.length);
    for (var iter159 in this.jurisdiction_district_levels)
    {
      if (this.jurisdiction_district_levels.hasOwnProperty(iter159))
      {
        iter159 = this.jurisdiction_district_levels[iter159];
        output.writeI32(iter159);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCandidaciesFilterParams = module.exports.GetCandidaciesFilterParams = function(args) {
  this.current = null;
  this.district_uids = null;
  this.governing_body_uids = null;
  this.politician_uids = null;
  this.politician_name = null;
  this.political_party_uids = null;
  if (args) {
    if (args.current !== undefined && args.current !== null) {
      this.current = args.current;
    }
    if (args.district_uids !== undefined && args.district_uids !== null) {
      this.district_uids = Thrift.copyList(args.district_uids, [null]);
    }
    if (args.governing_body_uids !== undefined && args.governing_body_uids !== null) {
      this.governing_body_uids = Thrift.copyList(args.governing_body_uids, [null]);
    }
    if (args.politician_uids !== undefined && args.politician_uids !== null) {
      this.politician_uids = Thrift.copyList(args.politician_uids, [null]);
    }
    if (args.politician_name !== undefined && args.politician_name !== null) {
      this.politician_name = args.politician_name;
    }
    if (args.political_party_uids !== undefined && args.political_party_uids !== null) {
      this.political_party_uids = Thrift.copyList(args.political_party_uids, [null]);
    }
  }
};
GetCandidaciesFilterParams.prototype = {};
GetCandidaciesFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.current = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.district_uids = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readString();
          this.district_uids.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size167 = 0;
        var _rtmp3171;
        this.governing_body_uids = [];
        var _etype170 = 0;
        _rtmp3171 = input.readListBegin();
        _etype170 = _rtmp3171.etype;
        _size167 = _rtmp3171.size;
        for (var _i172 = 0; _i172 < _size167; ++_i172)
        {
          var elem173 = null;
          elem173 = input.readString();
          this.governing_body_uids.push(elem173);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size174 = 0;
        var _rtmp3178;
        this.politician_uids = [];
        var _etype177 = 0;
        _rtmp3178 = input.readListBegin();
        _etype177 = _rtmp3178.etype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          var elem180 = null;
          elem180 = input.readString();
          this.politician_uids.push(elem180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.politician_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size181 = 0;
        var _rtmp3185;
        this.political_party_uids = [];
        var _etype184 = 0;
        _rtmp3185 = input.readListBegin();
        _etype184 = _rtmp3185.etype;
        _size181 = _rtmp3185.size;
        for (var _i186 = 0; _i186 < _size181; ++_i186)
        {
          var elem187 = null;
          elem187 = input.readString();
          this.political_party_uids.push(elem187);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCandidaciesFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetCandidaciesFilterParams');
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.BOOL, 1);
    output.writeBool(this.current);
    output.writeFieldEnd();
  }
  if (this.district_uids !== null && this.district_uids !== undefined) {
    output.writeFieldBegin('district_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.district_uids.length);
    for (var iter188 in this.district_uids)
    {
      if (this.district_uids.hasOwnProperty(iter188))
      {
        iter188 = this.district_uids[iter188];
        output.writeString(iter188);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.governing_body_uids !== null && this.governing_body_uids !== undefined) {
    output.writeFieldBegin('governing_body_uids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.governing_body_uids.length);
    for (var iter189 in this.governing_body_uids)
    {
      if (this.governing_body_uids.hasOwnProperty(iter189))
      {
        iter189 = this.governing_body_uids[iter189];
        output.writeString(iter189);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.politician_uids !== null && this.politician_uids !== undefined) {
    output.writeFieldBegin('politician_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.politician_uids.length);
    for (var iter190 in this.politician_uids)
    {
      if (this.politician_uids.hasOwnProperty(iter190))
      {
        iter190 = this.politician_uids[iter190];
        output.writeString(iter190);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.politician_name !== null && this.politician_name !== undefined) {
    output.writeFieldBegin('politician_name', Thrift.Type.STRING, 5);
    output.writeString(this.politician_name);
    output.writeFieldEnd();
  }
  if (this.political_party_uids !== null && this.political_party_uids !== undefined) {
    output.writeFieldBegin('political_party_uids', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.political_party_uids.length);
    for (var iter191 in this.political_party_uids)
    {
      if (this.political_party_uids.hasOwnProperty(iter191))
      {
        iter191 = this.political_party_uids[iter191];
        output.writeString(iter191);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPoliticalPartiesFilterParams = module.exports.GetPoliticalPartiesFilterParams = function(args) {
  this.political_party_uids = null;
  if (args) {
    if (args.political_party_uids !== undefined && args.political_party_uids !== null) {
      this.political_party_uids = Thrift.copyList(args.political_party_uids, [null]);
    }
  }
};
GetPoliticalPartiesFilterParams.prototype = {};
GetPoliticalPartiesFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.political_party_uids = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = input.readString();
          this.political_party_uids.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPoliticalPartiesFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetPoliticalPartiesFilterParams');
  if (this.political_party_uids !== null && this.political_party_uids !== undefined) {
    output.writeFieldBegin('political_party_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.political_party_uids.length);
    for (var iter199 in this.political_party_uids)
    {
      if (this.political_party_uids.hasOwnProperty(iter199))
      {
        iter199 = this.political_party_uids[iter199];
        output.writeString(iter199);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPoliticianChannelsFilterParams = module.exports.GetPoliticianChannelsFilterParams = function(args) {
  this.politician_channel_types = null;
  if (args) {
    if (args.politician_channel_types !== undefined && args.politician_channel_types !== null) {
      this.politician_channel_types = Thrift.copyList(args.politician_channel_types, [null]);
    }
  }
};
GetPoliticianChannelsFilterParams.prototype = {};
GetPoliticianChannelsFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.politician_channel_types = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = input.readI32();
          this.politician_channel_types.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPoliticianChannelsFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetPoliticianChannelsFilterParams');
  if (this.politician_channel_types !== null && this.politician_channel_types !== undefined) {
    output.writeFieldBegin('politician_channel_types', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.politician_channel_types.length);
    for (var iter207 in this.politician_channel_types)
    {
      if (this.politician_channel_types.hasOwnProperty(iter207))
      {
        iter207 = this.politician_channel_types[iter207];
        output.writeI32(iter207);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPoliticiansFilterParams = module.exports.GetPoliticiansFilterParams = function(args) {
  this.matching_name = null;
  if (args) {
    if (args.matching_name !== undefined && args.matching_name !== null) {
      this.matching_name = args.matching_name;
    }
  }
};
GetPoliticiansFilterParams.prototype = {};
GetPoliticiansFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.matching_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPoliticiansFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetPoliticiansFilterParams');
  if (this.matching_name !== null && this.matching_name !== undefined) {
    output.writeFieldBegin('matching_name', Thrift.Type.STRING, 1);
    output.writeString(this.matching_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetSeatsFilterParams = module.exports.GetSeatsFilterParams = function(args) {
  this.accountable_district_division_type = null;
  this.state_code = null;
  this.roles = null;
  if (args) {
    if (args.accountable_district_division_type !== undefined && args.accountable_district_division_type !== null) {
      this.accountable_district_division_type = args.accountable_district_division_type;
    }
    if (args.state_code !== undefined && args.state_code !== null) {
      this.state_code = args.state_code;
    }
    if (args.roles !== undefined && args.roles !== null) {
      this.roles = Thrift.copyList(args.roles, [null]);
    }
  }
};
GetSeatsFilterParams.prototype = {};
GetSeatsFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.accountable_district_division_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state_code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.roles = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = input.readI32();
          this.roles.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSeatsFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetSeatsFilterParams');
  if (this.accountable_district_division_type !== null && this.accountable_district_division_type !== undefined) {
    output.writeFieldBegin('accountable_district_division_type', Thrift.Type.I32, 1);
    output.writeI32(this.accountable_district_division_type);
    output.writeFieldEnd();
  }
  if (this.state_code !== null && this.state_code !== undefined) {
    output.writeFieldBegin('state_code', Thrift.Type.I32, 2);
    output.writeI32(this.state_code);
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.roles.length);
    for (var iter215 in this.roles)
    {
      if (this.roles.hasOwnProperty(iter215))
      {
        iter215 = this.roles[iter215];
        output.writeI32(iter215);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetServedTermsFilterParams = module.exports.GetServedTermsFilterParams = function(args) {
  this.current = null;
  this.district_uids = null;
  this.governing_body_uids = null;
  this.politician_uids = null;
  this.politician_name = null;
  this.political_party_uids = null;
  if (args) {
    if (args.current !== undefined && args.current !== null) {
      this.current = args.current;
    }
    if (args.district_uids !== undefined && args.district_uids !== null) {
      this.district_uids = Thrift.copyList(args.district_uids, [null]);
    }
    if (args.governing_body_uids !== undefined && args.governing_body_uids !== null) {
      this.governing_body_uids = Thrift.copyList(args.governing_body_uids, [null]);
    }
    if (args.politician_uids !== undefined && args.politician_uids !== null) {
      this.politician_uids = Thrift.copyList(args.politician_uids, [null]);
    }
    if (args.politician_name !== undefined && args.politician_name !== null) {
      this.politician_name = args.politician_name;
    }
    if (args.political_party_uids !== undefined && args.political_party_uids !== null) {
      this.political_party_uids = Thrift.copyList(args.political_party_uids, [null]);
    }
  }
};
GetServedTermsFilterParams.prototype = {};
GetServedTermsFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.current = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.district_uids = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = input.readString();
          this.district_uids.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size223 = 0;
        var _rtmp3227;
        this.governing_body_uids = [];
        var _etype226 = 0;
        _rtmp3227 = input.readListBegin();
        _etype226 = _rtmp3227.etype;
        _size223 = _rtmp3227.size;
        for (var _i228 = 0; _i228 < _size223; ++_i228)
        {
          var elem229 = null;
          elem229 = input.readString();
          this.governing_body_uids.push(elem229);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size230 = 0;
        var _rtmp3234;
        this.politician_uids = [];
        var _etype233 = 0;
        _rtmp3234 = input.readListBegin();
        _etype233 = _rtmp3234.etype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var elem236 = null;
          elem236 = input.readString();
          this.politician_uids.push(elem236);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.politician_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size237 = 0;
        var _rtmp3241;
        this.political_party_uids = [];
        var _etype240 = 0;
        _rtmp3241 = input.readListBegin();
        _etype240 = _rtmp3241.etype;
        _size237 = _rtmp3241.size;
        for (var _i242 = 0; _i242 < _size237; ++_i242)
        {
          var elem243 = null;
          elem243 = input.readString();
          this.political_party_uids.push(elem243);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServedTermsFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetServedTermsFilterParams');
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.BOOL, 1);
    output.writeBool(this.current);
    output.writeFieldEnd();
  }
  if (this.district_uids !== null && this.district_uids !== undefined) {
    output.writeFieldBegin('district_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.district_uids.length);
    for (var iter244 in this.district_uids)
    {
      if (this.district_uids.hasOwnProperty(iter244))
      {
        iter244 = this.district_uids[iter244];
        output.writeString(iter244);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.governing_body_uids !== null && this.governing_body_uids !== undefined) {
    output.writeFieldBegin('governing_body_uids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.governing_body_uids.length);
    for (var iter245 in this.governing_body_uids)
    {
      if (this.governing_body_uids.hasOwnProperty(iter245))
      {
        iter245 = this.governing_body_uids[iter245];
        output.writeString(iter245);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.politician_uids !== null && this.politician_uids !== undefined) {
    output.writeFieldBegin('politician_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.politician_uids.length);
    for (var iter246 in this.politician_uids)
    {
      if (this.politician_uids.hasOwnProperty(iter246))
      {
        iter246 = this.politician_uids[iter246];
        output.writeString(iter246);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.politician_name !== null && this.politician_name !== undefined) {
    output.writeFieldBegin('politician_name', Thrift.Type.STRING, 5);
    output.writeString(this.politician_name);
    output.writeFieldEnd();
  }
  if (this.political_party_uids !== null && this.political_party_uids !== undefined) {
    output.writeFieldBegin('political_party_uids', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.political_party_uids.length);
    for (var iter247 in this.political_party_uids)
    {
      if (this.political_party_uids.hasOwnProperty(iter247))
      {
        iter247 = this.political_party_uids[iter247];
        output.writeString(iter247);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetRacesFilterParams = module.exports.GetRacesFilterParams = function(args) {
};
GetRacesFilterParams.prototype = {};
GetRacesFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRacesFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetRacesFilterParams');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetElectionsFilterParams = module.exports.GetElectionsFilterParams = function(args) {
};
GetElectionsFilterParams.prototype = {};
GetElectionsFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetElectionsFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetElectionsFilterParams');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetDistrictsForEntityFilterParams = module.exports.GetDistrictsForEntityFilterParams = function(args) {
  this.district_levels = null;
  if (args) {
    if (args.district_levels !== undefined && args.district_levels !== null) {
      this.district_levels = Thrift.copyList(args.district_levels, [null]);
    }
  }
};
GetDistrictsForEntityFilterParams.prototype = {};
GetDistrictsForEntityFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size248 = 0;
        var _rtmp3252;
        this.district_levels = [];
        var _etype251 = 0;
        _rtmp3252 = input.readListBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = input.readI32();
          this.district_levels.push(elem254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDistrictsForEntityFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetDistrictsForEntityFilterParams');
  if (this.district_levels !== null && this.district_levels !== undefined) {
    output.writeFieldBegin('district_levels', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.district_levels.length);
    for (var iter255 in this.district_levels)
    {
      if (this.district_levels.hasOwnProperty(iter255))
      {
        iter255 = this.district_levels[iter255];
        output.writeI32(iter255);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetServedTermsSortParams = module.exports.GetServedTermsSortParams = function(args) {
  this.sort_fields = null;
  this.sort_order = null;
  if (args) {
    if (args.sort_fields !== undefined && args.sort_fields !== null) {
      this.sort_fields = Thrift.copyList(args.sort_fields, [null]);
    }
    if (args.sort_order !== undefined && args.sort_order !== null) {
      this.sort_order = args.sort_order;
    }
  }
};
GetServedTermsSortParams.prototype = {};
GetServedTermsSortParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.sort_fields = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = input.readI32();
          this.sort_fields.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sort_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServedTermsSortParams.prototype.write = function(output) {
  output.writeStructBegin('GetServedTermsSortParams');
  if (this.sort_fields !== null && this.sort_fields !== undefined) {
    output.writeFieldBegin('sort_fields', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.sort_fields.length);
    for (var iter263 in this.sort_fields)
    {
      if (this.sort_fields.hasOwnProperty(iter263))
      {
        iter263 = this.sort_fields[iter263];
        output.writeI32(iter263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sort_order !== null && this.sort_order !== undefined) {
    output.writeFieldBegin('sort_order', Thrift.Type.I32, 2);
    output.writeI32(this.sort_order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetServedTermsByIdentifiersSortParams = module.exports.GetServedTermsByIdentifiersSortParams = function(args) {
  this.sorts = null;
  if (args) {
    if (args.sorts !== undefined && args.sorts !== null) {
      this.sorts = Thrift.copyList(args.sorts, [ttypes.GetServedTermsByIdentifiersSort]);
    }
  }
};
GetServedTermsByIdentifiersSortParams.prototype = {};
GetServedTermsByIdentifiersSortParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size264 = 0;
        var _rtmp3268;
        this.sorts = [];
        var _etype267 = 0;
        _rtmp3268 = input.readListBegin();
        _etype267 = _rtmp3268.etype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          var elem270 = null;
          elem270 = new ttypes.GetServedTermsByIdentifiersSort();
          elem270.read(input);
          this.sorts.push(elem270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServedTermsByIdentifiersSortParams.prototype.write = function(output) {
  output.writeStructBegin('GetServedTermsByIdentifiersSortParams');
  if (this.sorts !== null && this.sorts !== undefined) {
    output.writeFieldBegin('sorts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.sorts.length);
    for (var iter271 in this.sorts)
    {
      if (this.sorts.hasOwnProperty(iter271))
      {
        iter271 = this.sorts[iter271];
        iter271.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCandidaciesSortParams = module.exports.GetCandidaciesSortParams = function(args) {
  this.sort_fields = null;
  this.sort_order = null;
  if (args) {
    if (args.sort_fields !== undefined && args.sort_fields !== null) {
      this.sort_fields = Thrift.copyList(args.sort_fields, [null]);
    }
    if (args.sort_order !== undefined && args.sort_order !== null) {
      this.sort_order = args.sort_order;
    }
  }
};
GetCandidaciesSortParams.prototype = {};
GetCandidaciesSortParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.sort_fields = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = input.readI32();
          this.sort_fields.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sort_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCandidaciesSortParams.prototype.write = function(output) {
  output.writeStructBegin('GetCandidaciesSortParams');
  if (this.sort_fields !== null && this.sort_fields !== undefined) {
    output.writeFieldBegin('sort_fields', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.sort_fields.length);
    for (var iter279 in this.sort_fields)
    {
      if (this.sort_fields.hasOwnProperty(iter279))
      {
        iter279 = this.sort_fields[iter279];
        output.writeI32(iter279);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sort_order !== null && this.sort_order !== undefined) {
    output.writeFieldBegin('sort_order', Thrift.Type.I32, 2);
    output.writeI32(this.sort_order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BodyUniqueIdentifiers = module.exports.BodyUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
BodyUniqueIdentifiers.prototype = {};
BodyUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.uids = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = input.readString();
          this.uids.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BodyUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('BodyUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter287 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter287))
      {
        iter287 = this.uids[iter287];
        output.writeString(iter287);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SeatUniqueIdentifiers = module.exports.SeatUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
SeatUniqueIdentifiers.prototype = {};
SeatUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.uids = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = input.readString();
          this.uids.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SeatUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('SeatUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter295 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter295))
      {
        iter295 = this.uids[iter295];
        output.writeString(iter295);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PoliticianUniqueIdentifiers = module.exports.PoliticianUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
PoliticianUniqueIdentifiers.prototype = {};
PoliticianUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.uids = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = input.readString();
          this.uids.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoliticianUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('PoliticianUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter303 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter303))
      {
        iter303 = this.uids[iter303];
        output.writeString(iter303);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DistrictUniqueIdentifiers = module.exports.DistrictUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
DistrictUniqueIdentifiers.prototype = {};
DistrictUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.uids = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = input.readString();
          this.uids.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistrictUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('DistrictUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter311 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter311))
      {
        iter311 = this.uids[iter311];
        output.writeString(iter311);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServedTermUniqueIdentifiers = module.exports.ServedTermUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
ServedTermUniqueIdentifiers.prototype = {};
ServedTermUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.uids = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = input.readString();
          this.uids.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServedTermUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('ServedTermUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter319 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter319))
      {
        iter319 = this.uids[iter319];
        output.writeString(iter319);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RaceUniqueIdentifiers = module.exports.RaceUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
RaceUniqueIdentifiers.prototype = {};
RaceUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.uids = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = input.readString();
          this.uids.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RaceUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('RaceUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter327 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter327))
      {
        iter327 = this.uids[iter327];
        output.writeString(iter327);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ElectionUniqueIdentifiers = module.exports.ElectionUniqueIdentifiers = function(args) {
  this.uids = null;
  if (args) {
    if (args.uids !== undefined && args.uids !== null) {
      this.uids = Thrift.copyList(args.uids, [null]);
    }
  }
};
ElectionUniqueIdentifiers.prototype = {};
ElectionUniqueIdentifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size328 = 0;
        var _rtmp3332;
        this.uids = [];
        var _etype331 = 0;
        _rtmp3332 = input.readListBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = input.readString();
          this.uids.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ElectionUniqueIdentifiers.prototype.write = function(output) {
  output.writeStructBegin('ElectionUniqueIdentifiers');
  if (this.uids !== null && this.uids !== undefined) {
    output.writeFieldBegin('uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.uids.length);
    for (var iter335 in this.uids)
    {
      if (this.uids.hasOwnProperty(iter335))
      {
        iter335 = this.uids[iter335];
        output.writeString(iter335);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBodiesRequest = module.exports.GetBodiesRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetBodiesFilterParams(args.filter_params);
    }
  }
};
GetBodiesRequest.prototype = {};
GetBodiesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetBodiesFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBodiesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetBodiesRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBodiesByIdentifiersRequest = module.exports.GetBodiesByIdentifiersRequest = function(args) {
  this.body_identifiers = null;
  if (args) {
    if (args.body_identifiers !== undefined && args.body_identifiers !== null) {
      this.body_identifiers = new ttypes.BodyUniqueIdentifiers(args.body_identifiers);
    }
  }
};
GetBodiesByIdentifiersRequest.prototype = {};
GetBodiesByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.body_identifiers = new ttypes.BodyUniqueIdentifiers();
        this.body_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBodiesByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetBodiesByIdentifiersRequest');
  if (this.body_identifiers !== null && this.body_identifiers !== undefined) {
    output.writeFieldBegin('body_identifiers', Thrift.Type.STRUCT, 1);
    this.body_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCandidaciesRequest = module.exports.GetCandidaciesRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  this.sort_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetCandidaciesFilterParams(args.filter_params);
    }
    if (args.sort_params !== undefined && args.sort_params !== null) {
      this.sort_params = new ttypes.GetCandidaciesSortParams(args.sort_params);
    }
  }
};
GetCandidaciesRequest.prototype = {};
GetCandidaciesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetCandidaciesFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sort_params = new ttypes.GetCandidaciesSortParams();
        this.sort_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCandidaciesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetCandidaciesRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  if (this.sort_params !== null && this.sort_params !== undefined) {
    output.writeFieldBegin('sort_params', Thrift.Type.STRUCT, 3);
    this.sort_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCandidaciesByIdentifiersRequest = module.exports.GetCandidaciesByIdentifiersRequest = function(args) {
  this.candidacy_identifiers = null;
  if (args) {
    if (args.candidacy_identifiers !== undefined && args.candidacy_identifiers !== null) {
      this.candidacy_identifiers = new ttypes.CandidacyUniqueIdentifiers(args.candidacy_identifiers);
    }
  }
};
GetCandidaciesByIdentifiersRequest.prototype = {};
GetCandidaciesByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.candidacy_identifiers = new ttypes.CandidacyUniqueIdentifiers();
        this.candidacy_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCandidaciesByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetCandidaciesByIdentifiersRequest');
  if (this.candidacy_identifiers !== null && this.candidacy_identifiers !== undefined) {
    output.writeFieldBegin('candidacy_identifiers', Thrift.Type.STRUCT, 1);
    this.candidacy_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPoliticianChannelsRequest = module.exports.GetPoliticianChannelsRequest = function(args) {
  this.politician_uid = null;
  this.filter_params = null;
  if (args) {
    if (args.politician_uid !== undefined && args.politician_uid !== null) {
      this.politician_uid = args.politician_uid;
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetPoliticianChannelsFilterParams(args.filter_params);
    }
  }
};
GetPoliticianChannelsRequest.prototype = {};
GetPoliticianChannelsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.politician_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetPoliticianChannelsFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPoliticianChannelsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPoliticianChannelsRequest');
  if (this.politician_uid !== null && this.politician_uid !== undefined) {
    output.writeFieldBegin('politician_uid', Thrift.Type.STRING, 1);
    output.writeString(this.politician_uid);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreatePoliticianChannelRequest = module.exports.CreatePoliticianChannelRequest = function(args) {
  this.politician_uid = null;
  this.type = null;
  this.value = null;
  if (args) {
    if (args.politician_uid !== undefined && args.politician_uid !== null) {
      this.politician_uid = args.politician_uid;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
CreatePoliticianChannelRequest.prototype = {};
CreatePoliticianChannelRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.politician_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreatePoliticianChannelRequest.prototype.write = function(output) {
  output.writeStructBegin('CreatePoliticianChannelRequest');
  if (this.politician_uid !== null && this.politician_uid !== undefined) {
    output.writeFieldBegin('politician_uid', Thrift.Type.STRING, 1);
    output.writeString(this.politician_uid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPoliticalPartiesRequest = module.exports.GetPoliticalPartiesRequest = function(args) {
  this.filter_params = null;
  if (args) {
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetPoliticalPartiesFilterParams(args.filter_params);
    }
  }
};
GetPoliticalPartiesRequest.prototype = {};
GetPoliticalPartiesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetPoliticalPartiesFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPoliticalPartiesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPoliticalPartiesRequest');
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 1);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreatePoliticianRequest = module.exports.CreatePoliticianRequest = function(args) {
  this.full_name = null;
  this.short_name = null;
  this.image = null;
  this.pronoun = null;
  this.summary = null;
  if (args) {
    if (args.full_name !== undefined && args.full_name !== null) {
      this.full_name = args.full_name;
    }
    if (args.short_name !== undefined && args.short_name !== null) {
      this.short_name = args.short_name;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.pronoun !== undefined && args.pronoun !== null) {
      this.pronoun = args.pronoun;
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = args.summary;
    }
  }
};
CreatePoliticianRequest.prototype = {};
CreatePoliticianRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.full_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.short_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pronoun = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreatePoliticianRequest.prototype.write = function(output) {
  output.writeStructBegin('CreatePoliticianRequest');
  if (this.full_name !== null && this.full_name !== undefined) {
    output.writeFieldBegin('full_name', Thrift.Type.STRING, 1);
    output.writeString(this.full_name);
    output.writeFieldEnd();
  }
  if (this.short_name !== null && this.short_name !== undefined) {
    output.writeFieldBegin('short_name', Thrift.Type.STRING, 2);
    output.writeString(this.short_name);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 3);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.pronoun !== null && this.pronoun !== undefined) {
    output.writeFieldBegin('pronoun', Thrift.Type.I32, 4);
    output.writeI32(this.pronoun);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRING, 5);
    output.writeString(this.summary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EditPoliticianRequest = module.exports.EditPoliticianRequest = function(args) {
  this.uid = null;
  this.full_name = null;
  this.short_name = null;
  this.image = null;
  this.pronoun = null;
  this.summary = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.full_name !== undefined && args.full_name !== null) {
      this.full_name = args.full_name;
    }
    if (args.short_name !== undefined && args.short_name !== null) {
      this.short_name = args.short_name;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.pronoun !== undefined && args.pronoun !== null) {
      this.pronoun = args.pronoun;
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = args.summary;
    }
  }
};
EditPoliticianRequest.prototype = {};
EditPoliticianRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.full_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.short_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.pronoun = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.summary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditPoliticianRequest.prototype.write = function(output) {
  output.writeStructBegin('EditPoliticianRequest');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.full_name !== null && this.full_name !== undefined) {
    output.writeFieldBegin('full_name', Thrift.Type.STRING, 2);
    output.writeString(this.full_name);
    output.writeFieldEnd();
  }
  if (this.short_name !== null && this.short_name !== undefined) {
    output.writeFieldBegin('short_name', Thrift.Type.STRING, 3);
    output.writeString(this.short_name);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 4);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.pronoun !== null && this.pronoun !== undefined) {
    output.writeFieldBegin('pronoun', Thrift.Type.I32, 5);
    output.writeI32(this.pronoun);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRING, 6);
    output.writeString(this.summary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPoliticiansRequest = module.exports.GetPoliticiansRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetPoliticiansFilterParams(args.filter_params);
    }
  }
};
GetPoliticiansRequest.prototype = {};
GetPoliticiansRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetPoliticiansFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPoliticiansRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPoliticiansRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPoliticiansByIdentifiersRequest = module.exports.GetPoliticiansByIdentifiersRequest = function(args) {
  this.politician_identifiers = null;
  if (args) {
    if (args.politician_identifiers !== undefined && args.politician_identifiers !== null) {
      this.politician_identifiers = new ttypes.PoliticianUniqueIdentifiers(args.politician_identifiers);
    }
  }
};
GetPoliticiansByIdentifiersRequest.prototype = {};
GetPoliticiansByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.politician_identifiers = new ttypes.PoliticianUniqueIdentifiers();
        this.politician_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPoliticiansByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPoliticiansByIdentifiersRequest');
  if (this.politician_identifiers !== null && this.politician_identifiers !== undefined) {
    output.writeFieldBegin('politician_identifiers', Thrift.Type.STRUCT, 1);
    this.politician_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EditPoliticianChannelRequest = module.exports.EditPoliticianChannelRequest = function(args) {
  this.politician_channel_uid = null;
  this.value = null;
  if (args) {
    if (args.politician_channel_uid !== undefined && args.politician_channel_uid !== null) {
      this.politician_channel_uid = args.politician_channel_uid;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
EditPoliticianChannelRequest.prototype = {};
EditPoliticianChannelRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.politician_channel_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditPoliticianChannelRequest.prototype.write = function(output) {
  output.writeStructBegin('EditPoliticianChannelRequest');
  if (this.politician_channel_uid !== null && this.politician_channel_uid !== undefined) {
    output.writeFieldBegin('politician_channel_uid', Thrift.Type.STRING, 1);
    output.writeString(this.politician_channel_uid);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeletePoliticianChannelRequest = module.exports.DeletePoliticianChannelRequest = function(args) {
  this.politician_channel_uid = null;
  if (args) {
    if (args.politician_channel_uid !== undefined && args.politician_channel_uid !== null) {
      this.politician_channel_uid = args.politician_channel_uid;
    }
  }
};
DeletePoliticianChannelRequest.prototype = {};
DeletePoliticianChannelRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.politician_channel_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeletePoliticianChannelRequest.prototype.write = function(output) {
  output.writeStructBegin('DeletePoliticianChannelRequest');
  if (this.politician_channel_uid !== null && this.politician_channel_uid !== undefined) {
    output.writeFieldBegin('politician_channel_uid', Thrift.Type.STRING, 1);
    output.writeString(this.politician_channel_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetSeatsByIdentifiersRequest = module.exports.GetSeatsByIdentifiersRequest = function(args) {
  this.seat_identifiers = null;
  if (args) {
    if (args.seat_identifiers !== undefined && args.seat_identifiers !== null) {
      this.seat_identifiers = new ttypes.SeatUniqueIdentifiers(args.seat_identifiers);
    }
  }
};
GetSeatsByIdentifiersRequest.prototype = {};
GetSeatsByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.seat_identifiers = new ttypes.SeatUniqueIdentifiers();
        this.seat_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSeatsByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSeatsByIdentifiersRequest');
  if (this.seat_identifiers !== null && this.seat_identifiers !== undefined) {
    output.writeFieldBegin('seat_identifiers', Thrift.Type.STRUCT, 1);
    this.seat_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetSeatsRequest = module.exports.GetSeatsRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetSeatsFilterParams(args.filter_params);
    }
  }
};
GetSeatsRequest.prototype = {};
GetSeatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetSeatsFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetSeatsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetSeatsRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetDistrictsByIdentifiersRequest = module.exports.GetDistrictsByIdentifiersRequest = function(args) {
  this.district_identifiers = null;
  if (args) {
    if (args.district_identifiers !== undefined && args.district_identifiers !== null) {
      this.district_identifiers = new ttypes.DistrictUniqueIdentifiers(args.district_identifiers);
    }
  }
};
GetDistrictsByIdentifiersRequest.prototype = {};
GetDistrictsByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.district_identifiers = new ttypes.DistrictUniqueIdentifiers();
        this.district_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDistrictsByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetDistrictsByIdentifiersRequest');
  if (this.district_identifiers !== null && this.district_identifiers !== undefined) {
    output.writeFieldBegin('district_identifiers', Thrift.Type.STRUCT, 1);
    this.district_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetDefaultFederalDistrictRequest = module.exports.GetDefaultFederalDistrictRequest = function(args) {
};
GetDefaultFederalDistrictRequest.prototype = {};
GetDefaultFederalDistrictRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDefaultFederalDistrictRequest.prototype.write = function(output) {
  output.writeStructBegin('GetDefaultFederalDistrictRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetServedTermsByIdentifiersRequest = module.exports.GetServedTermsByIdentifiersRequest = function(args) {
  this.served_term_identifiers = null;
  this.sort_params = null;
  if (args) {
    if (args.served_term_identifiers !== undefined && args.served_term_identifiers !== null) {
      this.served_term_identifiers = new ttypes.ServedTermUniqueIdentifiers(args.served_term_identifiers);
    }
    if (args.sort_params !== undefined && args.sort_params !== null) {
      this.sort_params = new ttypes.GetServedTermsByIdentifiersSortParams(args.sort_params);
    }
  }
};
GetServedTermsByIdentifiersRequest.prototype = {};
GetServedTermsByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.served_term_identifiers = new ttypes.ServedTermUniqueIdentifiers();
        this.served_term_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sort_params = new ttypes.GetServedTermsByIdentifiersSortParams();
        this.sort_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServedTermsByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetServedTermsByIdentifiersRequest');
  if (this.served_term_identifiers !== null && this.served_term_identifiers !== undefined) {
    output.writeFieldBegin('served_term_identifiers', Thrift.Type.STRUCT, 1);
    this.served_term_identifiers.write(output);
    output.writeFieldEnd();
  }
  if (this.sort_params !== null && this.sort_params !== undefined) {
    output.writeFieldBegin('sort_params', Thrift.Type.STRUCT, 2);
    this.sort_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetServedTermsRequest = module.exports.GetServedTermsRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  this.sort_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetServedTermsFilterParams(args.filter_params);
    }
    if (args.sort_params !== undefined && args.sort_params !== null) {
      this.sort_params = new ttypes.GetServedTermsSortParams(args.sort_params);
    }
  }
};
GetServedTermsRequest.prototype = {};
GetServedTermsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetServedTermsFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sort_params = new ttypes.GetServedTermsSortParams();
        this.sort_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServedTermsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetServedTermsRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  if (this.sort_params !== null && this.sort_params !== undefined) {
    output.writeFieldBegin('sort_params', Thrift.Type.STRUCT, 3);
    this.sort_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetRacesByIdentifiersRequest = module.exports.GetRacesByIdentifiersRequest = function(args) {
  this.race_identifiers = null;
  if (args) {
    if (args.race_identifiers !== undefined && args.race_identifiers !== null) {
      this.race_identifiers = new ttypes.RaceUniqueIdentifiers(args.race_identifiers);
    }
  }
};
GetRacesByIdentifiersRequest.prototype = {};
GetRacesByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.race_identifiers = new ttypes.RaceUniqueIdentifiers();
        this.race_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRacesByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRacesByIdentifiersRequest');
  if (this.race_identifiers !== null && this.race_identifiers !== undefined) {
    output.writeFieldBegin('race_identifiers', Thrift.Type.STRUCT, 1);
    this.race_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetRacesRequest = module.exports.GetRacesRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetRacesFilterParams(args.filter_params);
    }
  }
};
GetRacesRequest.prototype = {};
GetRacesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetRacesFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRacesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRacesRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetElectionsByIdentifiersRequest = module.exports.GetElectionsByIdentifiersRequest = function(args) {
  this.election_identifiers = null;
  if (args) {
    if (args.election_identifiers !== undefined && args.election_identifiers !== null) {
      this.election_identifiers = new ttypes.ElectionUniqueIdentifiers(args.election_identifiers);
    }
  }
};
GetElectionsByIdentifiersRequest.prototype = {};
GetElectionsByIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.election_identifiers = new ttypes.ElectionUniqueIdentifiers();
        this.election_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetElectionsByIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetElectionsByIdentifiersRequest');
  if (this.election_identifiers !== null && this.election_identifiers !== undefined) {
    output.writeFieldBegin('election_identifiers', Thrift.Type.STRUCT, 1);
    this.election_identifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetElectionsRequest = module.exports.GetElectionsRequest = function(args) {
  this.pagination_params = null;
  this.filter_params = null;
  if (args) {
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetElectionsFilterParams(args.filter_params);
    }
  }
};
GetElectionsRequest.prototype = {};
GetElectionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetElectionsFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetElectionsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetElectionsRequest');
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 1);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilterCandidacyIdentifiersRequest = module.exports.FilterCandidacyIdentifiersRequest = function(args) {
  this.candidacy_identifiers = null;
  this.hide_pending = null;
  if (args) {
    if (args.candidacy_identifiers !== undefined && args.candidacy_identifiers !== null) {
      this.candidacy_identifiers = new ttypes.CandidacyUniqueIdentifiers(args.candidacy_identifiers);
    }
    if (args.hide_pending !== undefined && args.hide_pending !== null) {
      this.hide_pending = args.hide_pending;
    }
  }
};
FilterCandidacyIdentifiersRequest.prototype = {};
FilterCandidacyIdentifiersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.candidacy_identifiers = new ttypes.CandidacyUniqueIdentifiers();
        this.candidacy_identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hide_pending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterCandidacyIdentifiersRequest.prototype.write = function(output) {
  output.writeStructBegin('FilterCandidacyIdentifiersRequest');
  if (this.candidacy_identifiers !== null && this.candidacy_identifiers !== undefined) {
    output.writeFieldBegin('candidacy_identifiers', Thrift.Type.STRUCT, 1);
    this.candidacy_identifiers.write(output);
    output.writeFieldEnd();
  }
  if (this.hide_pending !== null && this.hide_pending !== undefined) {
    output.writeFieldBegin('hide_pending', Thrift.Type.BOOL, 2);
    output.writeBool(this.hide_pending);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DistrictEntityByAddressRequest = module.exports.DistrictEntityByAddressRequest = function(args) {
  this.entity_uuid = null;
  this.address = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
DistrictEntityByAddressRequest.prototype = {};
DistrictEntityByAddressRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DistrictEntityByAddressRequest.prototype.write = function(output) {
  output.writeStructBegin('DistrictEntityByAddressRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetDistrictsForEntityRequest = module.exports.GetDistrictsForEntityRequest = function(args) {
  this.entity_uuid = null;
  this.filter_params = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetDistrictsForEntityFilterParams(args.filter_params);
    }
  }
};
GetDistrictsForEntityRequest.prototype = {};
GetDistrictsForEntityRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetDistrictsForEntityFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDistrictsForEntityRequest.prototype.write = function(output) {
  output.writeStructBegin('GetDistrictsForEntityRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 2);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CivicInformationApiException = module.exports.CivicInformationApiException = function(args) {
  Thrift.TException.call(this, "CivicInformationApiException");
  this.name = "CivicInformationApiException";
  this.message = null;
  this.code = null;
  this.exception_class = 2;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.exception_class !== undefined && args.exception_class !== null) {
      this.exception_class = args.exception_class;
    }
  }
};
Thrift.inherits(CivicInformationApiException, Thrift.TException);
CivicInformationApiException.prototype.name = 'CivicInformationApiException';
CivicInformationApiException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.exception_class = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CivicInformationApiException.prototype.write = function(output) {
  output.writeStructBegin('CivicInformationApiException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.exception_class !== null && this.exception_class !== undefined) {
    output.writeFieldBegin('exception_class', Thrift.Type.I32, 3);
    output.writeI32(this.exception_class);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


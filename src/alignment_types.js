//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var event_bus_ttypes = require('./event_bus_types');


var ttypes = module.exports = {};
ttypes.PopulationType = {
  'DISTRICT' : 1,
  'GROUP' : 2,
  'PETITION' : 3,
  'USER' : 4
};
ttypes.PositionAgreement = {
  'AGREE' : 1,
  'DISAGREE' : 2,
  'SKIP' : 3
};
var DeletePositionResponseRequest = module.exports.DeletePositionResponseRequest = function(args) {
  this.entity_uuid = null;
  this.position_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.position_uid !== undefined && args.position_uid !== null) {
      this.position_uid = args.position_uid;
    }
  }
};
DeletePositionResponseRequest.prototype = {};
DeletePositionResponseRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.position_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeletePositionResponseRequest.prototype.write = function(output) {
  output.writeStructBegin('DeletePositionResponseRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.position_uid !== null && this.position_uid !== undefined) {
    output.writeFieldBegin('position_uid', Thrift.Type.STRING, 2);
    output.writeString(this.position_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityAlignment = module.exports.EntityAlignment = function(args) {
  this.entity_uuid = null;
  this.population_uuid = null;
  this.population_type = null;
  this.position_uids = null;
  this.topic_uid = null;
  this.score = null;
  this.overlap_count = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.population_uuid !== undefined && args.population_uuid !== null) {
      this.population_uuid = args.population_uuid;
    }
    if (args.population_type !== undefined && args.population_type !== null) {
      this.population_type = args.population_type;
    }
    if (args.position_uids !== undefined && args.position_uids !== null) {
      this.position_uids = Thrift.copyList(args.position_uids, [null]);
    }
    if (args.topic_uid !== undefined && args.topic_uid !== null) {
      this.topic_uid = args.topic_uid;
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.overlap_count !== undefined && args.overlap_count !== null) {
      this.overlap_count = args.overlap_count;
    }
  }
};
EntityAlignment.prototype = {};
EntityAlignment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.population_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.population_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.position_uids = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.position_uids.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.topic_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.overlap_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityAlignment.prototype.write = function(output) {
  output.writeStructBegin('EntityAlignment');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.population_uuid !== null && this.population_uuid !== undefined) {
    output.writeFieldBegin('population_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.population_uuid);
    output.writeFieldEnd();
  }
  if (this.population_type !== null && this.population_type !== undefined) {
    output.writeFieldBegin('population_type', Thrift.Type.I32, 3);
    output.writeI32(this.population_type);
    output.writeFieldEnd();
  }
  if (this.position_uids !== null && this.position_uids !== undefined) {
    output.writeFieldBegin('position_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.position_uids.length);
    for (var iter7 in this.position_uids)
    {
      if (this.position_uids.hasOwnProperty(iter7))
      {
        iter7 = this.position_uids[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.topic_uid !== null && this.topic_uid !== undefined) {
    output.writeFieldBegin('topic_uid', Thrift.Type.STRING, 5);
    output.writeString(this.topic_uid);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.overlap_count !== null && this.overlap_count !== undefined) {
    output.writeFieldBegin('overlap_count', Thrift.Type.I32, 7);
    output.writeI32(this.overlap_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PositionUpdateAlignment = module.exports.PositionUpdateAlignment = function(args) {
  this.entity_uuid = null;
  this.score = null;
  this.overlap_count = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.overlap_count !== undefined && args.overlap_count !== null) {
      this.overlap_count = args.overlap_count;
    }
  }
};
PositionUpdateAlignment.prototype = {};
PositionUpdateAlignment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.overlap_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PositionUpdateAlignment.prototype.write = function(output) {
  output.writeStructBegin('PositionUpdateAlignment');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.overlap_count !== null && this.overlap_count !== undefined) {
    output.writeFieldBegin('overlap_count', Thrift.Type.I32, 3);
    output.writeI32(this.overlap_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPopulationAlignmentsRequest = module.exports.GetPopulationAlignmentsRequest = function(args) {
  this.viewer_entity_uuid = null;
  this.population_type = null;
  this.population_uids = null;
  this.position_uids = null;
  this.topic_uid = null;
  if (args) {
    if (args.viewer_entity_uuid !== undefined && args.viewer_entity_uuid !== null) {
      this.viewer_entity_uuid = args.viewer_entity_uuid;
    }
    if (args.population_type !== undefined && args.population_type !== null) {
      this.population_type = args.population_type;
    }
    if (args.population_uids !== undefined && args.population_uids !== null) {
      this.population_uids = Thrift.copyList(args.population_uids, [null]);
    }
    if (args.position_uids !== undefined && args.position_uids !== null) {
      this.position_uids = Thrift.copyList(args.position_uids, [null]);
    }
    if (args.topic_uid !== undefined && args.topic_uid !== null) {
      this.topic_uid = args.topic_uid;
    }
  }
};
GetPopulationAlignmentsRequest.prototype = {};
GetPopulationAlignmentsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.viewer_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.population_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.population_uids = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.population_uids.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.position_uids = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readString();
          this.position_uids.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.topic_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPopulationAlignmentsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPopulationAlignmentsRequest');
  if (this.viewer_entity_uuid !== null && this.viewer_entity_uuid !== undefined) {
    output.writeFieldBegin('viewer_entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.viewer_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.population_type !== null && this.population_type !== undefined) {
    output.writeFieldBegin('population_type', Thrift.Type.I32, 2);
    output.writeI32(this.population_type);
    output.writeFieldEnd();
  }
  if (this.population_uids !== null && this.population_uids !== undefined) {
    output.writeFieldBegin('population_uids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.population_uids.length);
    for (var iter22 in this.population_uids)
    {
      if (this.population_uids.hasOwnProperty(iter22))
      {
        iter22 = this.population_uids[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.position_uids !== null && this.position_uids !== undefined) {
    output.writeFieldBegin('position_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.position_uids.length);
    for (var iter23 in this.position_uids)
    {
      if (this.position_uids.hasOwnProperty(iter23))
      {
        iter23 = this.position_uids[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.topic_uid !== null && this.topic_uid !== undefined) {
    output.writeFieldBegin('topic_uid', Thrift.Type.STRING, 5);
    output.writeString(this.topic_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetUserAlignmentsRequest = module.exports.GetUserAlignmentsRequest = function(args) {
  this.viewer_entity_uuid = null;
  this.target_entity_uuids = null;
  this.position_uids = null;
  this.topic_uid = null;
  if (args) {
    if (args.viewer_entity_uuid !== undefined && args.viewer_entity_uuid !== null) {
      this.viewer_entity_uuid = args.viewer_entity_uuid;
    }
    if (args.target_entity_uuids !== undefined && args.target_entity_uuids !== null) {
      this.target_entity_uuids = Thrift.copyList(args.target_entity_uuids, [null]);
    }
    if (args.position_uids !== undefined && args.position_uids !== null) {
      this.position_uids = Thrift.copyList(args.position_uids, [null]);
    }
    if (args.topic_uid !== undefined && args.topic_uid !== null) {
      this.topic_uid = args.topic_uid;
    }
  }
};
GetUserAlignmentsRequest.prototype = {};
GetUserAlignmentsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.viewer_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.target_entity_uuids = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.target_entity_uuids.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.position_uids = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = input.readString();
          this.position_uids.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.topic_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetUserAlignmentsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetUserAlignmentsRequest');
  if (this.viewer_entity_uuid !== null && this.viewer_entity_uuid !== undefined) {
    output.writeFieldBegin('viewer_entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.viewer_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.target_entity_uuids !== null && this.target_entity_uuids !== undefined) {
    output.writeFieldBegin('target_entity_uuids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.target_entity_uuids.length);
    for (var iter38 in this.target_entity_uuids)
    {
      if (this.target_entity_uuids.hasOwnProperty(iter38))
      {
        iter38 = this.target_entity_uuids[iter38];
        output.writeString(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.position_uids !== null && this.position_uids !== undefined) {
    output.writeFieldBegin('position_uids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.position_uids.length);
    for (var iter39 in this.position_uids)
    {
      if (this.position_uids.hasOwnProperty(iter39))
      {
        iter39 = this.position_uids[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.topic_uid !== null && this.topic_uid !== undefined) {
    output.writeFieldBegin('topic_uid', Thrift.Type.STRING, 4);
    output.writeString(this.topic_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdatePositionResponseRequest = module.exports.UpdatePositionResponseRequest = function(args) {
  this.entity_uuid = null;
  this.position_uid = null;
  this.agreement = null;
  this.population_uid = null;
  this.population_type = null;
  this.position_uids = null;
  this.topic_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.position_uid !== undefined && args.position_uid !== null) {
      this.position_uid = args.position_uid;
    }
    if (args.agreement !== undefined && args.agreement !== null) {
      this.agreement = args.agreement;
    }
    if (args.population_uid !== undefined && args.population_uid !== null) {
      this.population_uid = args.population_uid;
    }
    if (args.population_type !== undefined && args.population_type !== null) {
      this.population_type = args.population_type;
    }
    if (args.position_uids !== undefined && args.position_uids !== null) {
      this.position_uids = Thrift.copyList(args.position_uids, [null]);
    }
    if (args.topic_uid !== undefined && args.topic_uid !== null) {
      this.topic_uid = args.topic_uid;
    }
  }
};
UpdatePositionResponseRequest.prototype = {};
UpdatePositionResponseRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.position_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.agreement = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.population_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.population_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.position_uids = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.position_uids.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.topic_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdatePositionResponseRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdatePositionResponseRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.position_uid !== null && this.position_uid !== undefined) {
    output.writeFieldBegin('position_uid', Thrift.Type.STRING, 2);
    output.writeString(this.position_uid);
    output.writeFieldEnd();
  }
  if (this.agreement !== null && this.agreement !== undefined) {
    output.writeFieldBegin('agreement', Thrift.Type.I32, 3);
    output.writeI32(this.agreement);
    output.writeFieldEnd();
  }
  if (this.population_uid !== null && this.population_uid !== undefined) {
    output.writeFieldBegin('population_uid', Thrift.Type.STRING, 4);
    output.writeString(this.population_uid);
    output.writeFieldEnd();
  }
  if (this.population_type !== null && this.population_type !== undefined) {
    output.writeFieldBegin('population_type', Thrift.Type.I32, 5);
    output.writeI32(this.population_type);
    output.writeFieldEnd();
  }
  if (this.position_uids !== null && this.position_uids !== undefined) {
    output.writeFieldBegin('position_uids', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.position_uids.length);
    for (var iter47 in this.position_uids)
    {
      if (this.position_uids.hasOwnProperty(iter47))
      {
        iter47 = this.position_uids[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.topic_uid !== null && this.topic_uid !== undefined) {
    output.writeFieldBegin('topic_uid', Thrift.Type.STRING, 7);
    output.writeString(this.topic_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPopulationAlignmentsForTopicsRequest = module.exports.GetPopulationAlignmentsForTopicsRequest = function(args) {
  this.viewer_entity_uuid = null;
  this.population_type = null;
  this.population_uid = null;
  this.position_uids = null;
  this.topic_uids = null;
  if (args) {
    if (args.viewer_entity_uuid !== undefined && args.viewer_entity_uuid !== null) {
      this.viewer_entity_uuid = args.viewer_entity_uuid;
    }
    if (args.population_type !== undefined && args.population_type !== null) {
      this.population_type = args.population_type;
    }
    if (args.population_uid !== undefined && args.population_uid !== null) {
      this.population_uid = args.population_uid;
    }
    if (args.position_uids !== undefined && args.position_uids !== null) {
      this.position_uids = Thrift.copyList(args.position_uids, [null]);
    }
    if (args.topic_uids !== undefined && args.topic_uids !== null) {
      this.topic_uids = Thrift.copyList(args.topic_uids, [null]);
    }
  }
};
GetPopulationAlignmentsForTopicsRequest.prototype = {};
GetPopulationAlignmentsForTopicsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.viewer_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.population_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.population_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.position_uids = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString();
          this.position_uids.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size55 = 0;
        var _rtmp359;
        this.topic_uids = [];
        var _etype58 = 0;
        _rtmp359 = input.readListBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = input.readString();
          this.topic_uids.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPopulationAlignmentsForTopicsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPopulationAlignmentsForTopicsRequest');
  if (this.viewer_entity_uuid !== null && this.viewer_entity_uuid !== undefined) {
    output.writeFieldBegin('viewer_entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.viewer_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.population_type !== null && this.population_type !== undefined) {
    output.writeFieldBegin('population_type', Thrift.Type.I32, 2);
    output.writeI32(this.population_type);
    output.writeFieldEnd();
  }
  if (this.population_uid !== null && this.population_uid !== undefined) {
    output.writeFieldBegin('population_uid', Thrift.Type.STRING, 3);
    output.writeString(this.population_uid);
    output.writeFieldEnd();
  }
  if (this.position_uids !== null && this.position_uids !== undefined) {
    output.writeFieldBegin('position_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.position_uids.length);
    for (var iter62 in this.position_uids)
    {
      if (this.position_uids.hasOwnProperty(iter62))
      {
        iter62 = this.position_uids[iter62];
        output.writeString(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.topic_uids !== null && this.topic_uids !== undefined) {
    output.writeFieldBegin('topic_uids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.topic_uids.length);
    for (var iter63 in this.topic_uids)
    {
      if (this.topic_uids.hasOwnProperty(iter63))
      {
        iter63 = this.topic_uids[iter63];
        output.writeString(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetUserAlignmentsForTopicsRequest = module.exports.GetUserAlignmentsForTopicsRequest = function(args) {
  this.viewer_entity_uuid = null;
  this.target_entity_uuid = null;
  this.position_uids = null;
  this.topic_uids = null;
  if (args) {
    if (args.viewer_entity_uuid !== undefined && args.viewer_entity_uuid !== null) {
      this.viewer_entity_uuid = args.viewer_entity_uuid;
    }
    if (args.target_entity_uuid !== undefined && args.target_entity_uuid !== null) {
      this.target_entity_uuid = args.target_entity_uuid;
    }
    if (args.position_uids !== undefined && args.position_uids !== null) {
      this.position_uids = Thrift.copyList(args.position_uids, [null]);
    }
    if (args.topic_uids !== undefined && args.topic_uids !== null) {
      this.topic_uids = Thrift.copyList(args.topic_uids, [null]);
    }
  }
};
GetUserAlignmentsForTopicsRequest.prototype = {};
GetUserAlignmentsForTopicsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.viewer_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.target_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.position_uids = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.position_uids.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.topic_uids = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = input.readString();
          this.topic_uids.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetUserAlignmentsForTopicsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetUserAlignmentsForTopicsRequest');
  if (this.viewer_entity_uuid !== null && this.viewer_entity_uuid !== undefined) {
    output.writeFieldBegin('viewer_entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.viewer_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.target_entity_uuid !== null && this.target_entity_uuid !== undefined) {
    output.writeFieldBegin('target_entity_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.target_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.position_uids !== null && this.position_uids !== undefined) {
    output.writeFieldBegin('position_uids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.position_uids.length);
    for (var iter78 in this.position_uids)
    {
      if (this.position_uids.hasOwnProperty(iter78))
      {
        iter78 = this.position_uids[iter78];
        output.writeString(iter78);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.topic_uids !== null && this.topic_uids !== undefined) {
    output.writeFieldBegin('topic_uids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.topic_uids.length);
    for (var iter79 in this.topic_uids)
    {
      if (this.topic_uids.hasOwnProperty(iter79))
      {
        iter79 = this.topic_uids[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var accounts_ttypes = require('./accounts_types');
var actions_ttypes = require('./actions_types');
var campaigns_ttypes = require('./campaigns_types');
var content_topics_ttypes = require('./content_topics_types');
var entities_ttypes = require('./entities_types');
var groups_ttypes = require('./groups_types');
var invitations_ttypes = require('./invitations_types');
var positions_ttypes = require('./positions_types');
var profile_districts_ttypes = require('./profile_districts_types');
var profiles_ttypes = require('./profiles_types');
var shares_ttypes = require('./shares_types');


var ttypes = module.exports = {};
var Message = module.exports.Message = function(args) {
  this.causes_account_linked = null;
  this.facebook_account_linked = null;
  this.entity_changed = null;
  this.action_taken = null;
  this.action_requested = null;
  this.petition_launched = null;
  this.petition_signed = null;
  this.petition_grades_published = null;
  this.petition_grading_notifications_triggered = null;
  this.campaign_created = null;
  this.campaign_deleted = null;
  this.campaign_updated_topics = null;
  this.campaign_launched = null;
  this.campaign_update_created = null;
  this.campaign_supporter_changed = null;
  this.campaign_poll_triggered = null;
  this.content_topic_changed = null;
  this.invitation_created = null;
  this.invitation_accepted = null;
  this.invitation_deactivated = null;
  this.invitation_conversion_changed = null;
  this.position_changed = null;
  this.position_response_created = null;
  this.position_response_deleted = null;
  this.position_response_updated = null;
  this.profile_district_changed = null;
  this.profile_created = null;
  this.profile_updated = null;
  this.profile_deleted = null;
  this.profile_changed = null;
  this.group_membership_changed = null;
  this.group_petition_adoption_changed = null;
  this.contact_async_job = null;
  this.alignment_async_job = null;
  this.share_changed = null;
  this.share_conversion_changed = null;
  if (args) {
    if (args.causes_account_linked !== undefined && args.causes_account_linked !== null) {
      this.causes_account_linked = new accounts_ttypes.CausesAccountLinked(args.causes_account_linked);
    }
    if (args.facebook_account_linked !== undefined && args.facebook_account_linked !== null) {
      this.facebook_account_linked = new accounts_ttypes.FacebookAccountLinked(args.facebook_account_linked);
    }
    if (args.entity_changed !== undefined && args.entity_changed !== null) {
      this.entity_changed = new entities_ttypes.EntityChanged(args.entity_changed);
    }
    if (args.action_taken !== undefined && args.action_taken !== null) {
      this.action_taken = new actions_ttypes.ActionTaken(args.action_taken);
    }
    if (args.action_requested !== undefined && args.action_requested !== null) {
      this.action_requested = new actions_ttypes.ActionRequested(args.action_requested);
    }
    if (args.petition_launched !== undefined && args.petition_launched !== null) {
      this.petition_launched = new actions_ttypes.PetitionLaunched(args.petition_launched);
    }
    if (args.petition_signed !== undefined && args.petition_signed !== null) {
      this.petition_signed = new actions_ttypes.PetitionSigned(args.petition_signed);
    }
    if (args.petition_grades_published !== undefined && args.petition_grades_published !== null) {
      this.petition_grades_published = new actions_ttypes.PetitionGradesPublished(args.petition_grades_published);
    }
    if (args.petition_grading_notifications_triggered !== undefined && args.petition_grading_notifications_triggered !== null) {
      this.petition_grading_notifications_triggered = new actions_ttypes.PetitionGradingNotificationsTriggered(args.petition_grading_notifications_triggered);
    }
    if (args.campaign_created !== undefined && args.campaign_created !== null) {
      this.campaign_created = new campaigns_ttypes.CampaignCreated(args.campaign_created);
    }
    if (args.campaign_deleted !== undefined && args.campaign_deleted !== null) {
      this.campaign_deleted = new campaigns_ttypes.CampaignDeleted(args.campaign_deleted);
    }
    if (args.campaign_updated_topics !== undefined && args.campaign_updated_topics !== null) {
      this.campaign_updated_topics = new campaigns_ttypes.CampaignUpdatedTopics(args.campaign_updated_topics);
    }
    if (args.campaign_launched !== undefined && args.campaign_launched !== null) {
      this.campaign_launched = new campaigns_ttypes.CampaignLaunched(args.campaign_launched);
    }
    if (args.campaign_update_created !== undefined && args.campaign_update_created !== null) {
      this.campaign_update_created = new campaigns_ttypes.CampaignUpdateCreated(args.campaign_update_created);
    }
    if (args.campaign_supporter_changed !== undefined && args.campaign_supporter_changed !== null) {
      this.campaign_supporter_changed = new campaigns_ttypes.CampaignSupporterChanged(args.campaign_supporter_changed);
    }
    if (args.campaign_poll_triggered !== undefined && args.campaign_poll_triggered !== null) {
      this.campaign_poll_triggered = new campaigns_ttypes.CampaignPollTriggered(args.campaign_poll_triggered);
    }
    if (args.content_topic_changed !== undefined && args.content_topic_changed !== null) {
      this.content_topic_changed = new content_topics_ttypes.ContentTopicChanged(args.content_topic_changed);
    }
    if (args.invitation_created !== undefined && args.invitation_created !== null) {
      this.invitation_created = new invitations_ttypes.InvitationCreated(args.invitation_created);
    }
    if (args.invitation_accepted !== undefined && args.invitation_accepted !== null) {
      this.invitation_accepted = new invitations_ttypes.InvitationAccepted(args.invitation_accepted);
    }
    if (args.invitation_deactivated !== undefined && args.invitation_deactivated !== null) {
      this.invitation_deactivated = new invitations_ttypes.InvitationDeactivated(args.invitation_deactivated);
    }
    if (args.invitation_conversion_changed !== undefined && args.invitation_conversion_changed !== null) {
      this.invitation_conversion_changed = new invitations_ttypes.InvitationConversionChanged(args.invitation_conversion_changed);
    }
    if (args.position_changed !== undefined && args.position_changed !== null) {
      this.position_changed = new positions_ttypes.PositionChanged(args.position_changed);
    }
    if (args.position_response_created !== undefined && args.position_response_created !== null) {
      this.position_response_created = new positions_ttypes.PositionResponseCreated(args.position_response_created);
    }
    if (args.position_response_deleted !== undefined && args.position_response_deleted !== null) {
      this.position_response_deleted = new positions_ttypes.PositionResponseDeleted(args.position_response_deleted);
    }
    if (args.position_response_updated !== undefined && args.position_response_updated !== null) {
      this.position_response_updated = new positions_ttypes.PositionResponseUpdated(args.position_response_updated);
    }
    if (args.profile_district_changed !== undefined && args.profile_district_changed !== null) {
      this.profile_district_changed = new profile_districts_ttypes.ProfileDistrictChanged(args.profile_district_changed);
    }
    if (args.profile_created !== undefined && args.profile_created !== null) {
      this.profile_created = new profiles_ttypes.ProfileCreated(args.profile_created);
    }
    if (args.profile_updated !== undefined && args.profile_updated !== null) {
      this.profile_updated = new profiles_ttypes.ProfileUpdated(args.profile_updated);
    }
    if (args.profile_deleted !== undefined && args.profile_deleted !== null) {
      this.profile_deleted = new profiles_ttypes.ProfileDeleted(args.profile_deleted);
    }
    if (args.profile_changed !== undefined && args.profile_changed !== null) {
      this.profile_changed = new profiles_ttypes.ProfileChanged(args.profile_changed);
    }
    if (args.group_membership_changed !== undefined && args.group_membership_changed !== null) {
      this.group_membership_changed = new groups_ttypes.GroupMembershipChanged(args.group_membership_changed);
    }
    if (args.group_petition_adoption_changed !== undefined && args.group_petition_adoption_changed !== null) {
      this.group_petition_adoption_changed = new groups_ttypes.GroupPetitionAdoptionChanged(args.group_petition_adoption_changed);
    }
    if (args.contact_async_job !== undefined && args.contact_async_job !== null) {
      this.contact_async_job = new shared_ttypes.JobExecutionParams(args.contact_async_job);
    }
    if (args.alignment_async_job !== undefined && args.alignment_async_job !== null) {
      this.alignment_async_job = new shared_ttypes.JobExecutionParams(args.alignment_async_job);
    }
    if (args.share_changed !== undefined && args.share_changed !== null) {
      this.share_changed = new shares_ttypes.ShareChanged(args.share_changed);
    }
    if (args.share_conversion_changed !== undefined && args.share_conversion_changed !== null) {
      this.share_conversion_changed = new shares_ttypes.ShareConversionChanged(args.share_conversion_changed);
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.causes_account_linked = new accounts_ttypes.CausesAccountLinked();
        this.causes_account_linked.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.facebook_account_linked = new accounts_ttypes.FacebookAccountLinked();
        this.facebook_account_linked.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.entity_changed = new entities_ttypes.EntityChanged();
        this.entity_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.action_taken = new actions_ttypes.ActionTaken();
        this.action_taken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.action_requested = new actions_ttypes.ActionRequested();
        this.action_requested.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.petition_launched = new actions_ttypes.PetitionLaunched();
        this.petition_launched.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.petition_signed = new actions_ttypes.PetitionSigned();
        this.petition_signed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.petition_grades_published = new actions_ttypes.PetitionGradesPublished();
        this.petition_grades_published.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRUCT) {
        this.petition_grading_notifications_triggered = new actions_ttypes.PetitionGradingNotificationsTriggered();
        this.petition_grading_notifications_triggered.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.campaign_created = new campaigns_ttypes.CampaignCreated();
        this.campaign_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.campaign_deleted = new campaigns_ttypes.CampaignDeleted();
        this.campaign_deleted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.campaign_updated_topics = new campaigns_ttypes.CampaignUpdatedTopics();
        this.campaign_updated_topics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.campaign_launched = new campaigns_ttypes.CampaignLaunched();
        this.campaign_launched.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.campaign_update_created = new campaigns_ttypes.CampaignUpdateCreated();
        this.campaign_update_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.campaign_supporter_changed = new campaigns_ttypes.CampaignSupporterChanged();
        this.campaign_supporter_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRUCT) {
        this.campaign_poll_triggered = new campaigns_ttypes.CampaignPollTriggered();
        this.campaign_poll_triggered.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.content_topic_changed = new content_topics_ttypes.ContentTopicChanged();
        this.content_topic_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitation_created = new invitations_ttypes.InvitationCreated();
        this.invitation_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitation_accepted = new invitations_ttypes.InvitationAccepted();
        this.invitation_accepted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitation_deactivated = new invitations_ttypes.InvitationDeactivated();
        this.invitation_deactivated.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitation_conversion_changed = new invitations_ttypes.InvitationConversionChanged();
        this.invitation_conversion_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRUCT) {
        this.position_changed = new positions_ttypes.PositionChanged();
        this.position_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.position_response_created = new positions_ttypes.PositionResponseCreated();
        this.position_response_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.position_response_deleted = new positions_ttypes.PositionResponseDeleted();
        this.position_response_deleted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.position_response_updated = new positions_ttypes.PositionResponseUpdated();
        this.position_response_updated.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile_district_changed = new profile_districts_ttypes.ProfileDistrictChanged();
        this.profile_district_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile_created = new profiles_ttypes.ProfileCreated();
        this.profile_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile_updated = new profiles_ttypes.ProfileUpdated();
        this.profile_updated.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile_deleted = new profiles_ttypes.ProfileDeleted();
        this.profile_deleted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile_changed = new profiles_ttypes.ProfileChanged();
        this.profile_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.group_membership_changed = new groups_ttypes.GroupMembershipChanged();
        this.group_membership_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.group_petition_adoption_changed = new groups_ttypes.GroupPetitionAdoptionChanged();
        this.group_petition_adoption_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_async_job = new shared_ttypes.JobExecutionParams();
        this.contact_async_job.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.alignment_async_job = new shared_ttypes.JobExecutionParams();
        this.alignment_async_job.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.share_changed = new shares_ttypes.ShareChanged();
        this.share_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.share_conversion_changed = new shares_ttypes.ShareConversionChanged();
        this.share_conversion_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.causes_account_linked !== null && this.causes_account_linked !== undefined) {
    output.writeFieldBegin('causes_account_linked', Thrift.Type.STRUCT, 13);
    this.causes_account_linked.write(output);
    output.writeFieldEnd();
  }
  if (this.facebook_account_linked !== null && this.facebook_account_linked !== undefined) {
    output.writeFieldBegin('facebook_account_linked', Thrift.Type.STRUCT, 16);
    this.facebook_account_linked.write(output);
    output.writeFieldEnd();
  }
  if (this.entity_changed !== null && this.entity_changed !== undefined) {
    output.writeFieldBegin('entity_changed', Thrift.Type.STRUCT, 26);
    this.entity_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.action_taken !== null && this.action_taken !== undefined) {
    output.writeFieldBegin('action_taken', Thrift.Type.STRUCT, 1);
    this.action_taken.write(output);
    output.writeFieldEnd();
  }
  if (this.action_requested !== null && this.action_requested !== undefined) {
    output.writeFieldBegin('action_requested', Thrift.Type.STRUCT, 2);
    this.action_requested.write(output);
    output.writeFieldEnd();
  }
  if (this.petition_launched !== null && this.petition_launched !== undefined) {
    output.writeFieldBegin('petition_launched', Thrift.Type.STRUCT, 8);
    this.petition_launched.write(output);
    output.writeFieldEnd();
  }
  if (this.petition_signed !== null && this.petition_signed !== undefined) {
    output.writeFieldBegin('petition_signed', Thrift.Type.STRUCT, 9);
    this.petition_signed.write(output);
    output.writeFieldEnd();
  }
  if (this.petition_grades_published !== null && this.petition_grades_published !== undefined) {
    output.writeFieldBegin('petition_grades_published', Thrift.Type.STRUCT, 20);
    this.petition_grades_published.write(output);
    output.writeFieldEnd();
  }
  if (this.petition_grading_notifications_triggered !== null && this.petition_grading_notifications_triggered !== undefined) {
    output.writeFieldBegin('petition_grading_notifications_triggered', Thrift.Type.STRUCT, 36);
    this.petition_grading_notifications_triggered.write(output);
    output.writeFieldEnd();
  }
  if (this.campaign_created !== null && this.campaign_created !== undefined) {
    output.writeFieldBegin('campaign_created', Thrift.Type.STRUCT, 3);
    this.campaign_created.write(output);
    output.writeFieldEnd();
  }
  if (this.campaign_deleted !== null && this.campaign_deleted !== undefined) {
    output.writeFieldBegin('campaign_deleted', Thrift.Type.STRUCT, 4);
    this.campaign_deleted.write(output);
    output.writeFieldEnd();
  }
  if (this.campaign_updated_topics !== null && this.campaign_updated_topics !== undefined) {
    output.writeFieldBegin('campaign_updated_topics', Thrift.Type.STRUCT, 5);
    this.campaign_updated_topics.write(output);
    output.writeFieldEnd();
  }
  if (this.campaign_launched !== null && this.campaign_launched !== undefined) {
    output.writeFieldBegin('campaign_launched', Thrift.Type.STRUCT, 6);
    this.campaign_launched.write(output);
    output.writeFieldEnd();
  }
  if (this.campaign_update_created !== null && this.campaign_update_created !== undefined) {
    output.writeFieldBegin('campaign_update_created', Thrift.Type.STRUCT, 7);
    this.campaign_update_created.write(output);
    output.writeFieldEnd();
  }
  if (this.campaign_supporter_changed !== null && this.campaign_supporter_changed !== undefined) {
    output.writeFieldBegin('campaign_supporter_changed', Thrift.Type.STRUCT, 32);
    this.campaign_supporter_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.campaign_poll_triggered !== null && this.campaign_poll_triggered !== undefined) {
    output.writeFieldBegin('campaign_poll_triggered', Thrift.Type.STRUCT, 34);
    this.campaign_poll_triggered.write(output);
    output.writeFieldEnd();
  }
  if (this.content_topic_changed !== null && this.content_topic_changed !== undefined) {
    output.writeFieldBegin('content_topic_changed', Thrift.Type.STRUCT, 23);
    this.content_topic_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.invitation_created !== null && this.invitation_created !== undefined) {
    output.writeFieldBegin('invitation_created', Thrift.Type.STRUCT, 21);
    this.invitation_created.write(output);
    output.writeFieldEnd();
  }
  if (this.invitation_accepted !== null && this.invitation_accepted !== undefined) {
    output.writeFieldBegin('invitation_accepted', Thrift.Type.STRUCT, 14);
    this.invitation_accepted.write(output);
    output.writeFieldEnd();
  }
  if (this.invitation_deactivated !== null && this.invitation_deactivated !== undefined) {
    output.writeFieldBegin('invitation_deactivated', Thrift.Type.STRUCT, 15);
    this.invitation_deactivated.write(output);
    output.writeFieldEnd();
  }
  if (this.invitation_conversion_changed !== null && this.invitation_conversion_changed !== undefined) {
    output.writeFieldBegin('invitation_conversion_changed', Thrift.Type.STRUCT, 35);
    this.invitation_conversion_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.position_changed !== null && this.position_changed !== undefined) {
    output.writeFieldBegin('position_changed', Thrift.Type.STRUCT, 33);
    this.position_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.position_response_created !== null && this.position_response_created !== undefined) {
    output.writeFieldBegin('position_response_created', Thrift.Type.STRUCT, 10);
    this.position_response_created.write(output);
    output.writeFieldEnd();
  }
  if (this.position_response_deleted !== null && this.position_response_deleted !== undefined) {
    output.writeFieldBegin('position_response_deleted', Thrift.Type.STRUCT, 11);
    this.position_response_deleted.write(output);
    output.writeFieldEnd();
  }
  if (this.position_response_updated !== null && this.position_response_updated !== undefined) {
    output.writeFieldBegin('position_response_updated', Thrift.Type.STRUCT, 12);
    this.position_response_updated.write(output);
    output.writeFieldEnd();
  }
  if (this.profile_district_changed !== null && this.profile_district_changed !== undefined) {
    output.writeFieldBegin('profile_district_changed', Thrift.Type.STRUCT, 24);
    this.profile_district_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.profile_created !== null && this.profile_created !== undefined) {
    output.writeFieldBegin('profile_created', Thrift.Type.STRUCT, 17);
    this.profile_created.write(output);
    output.writeFieldEnd();
  }
  if (this.profile_updated !== null && this.profile_updated !== undefined) {
    output.writeFieldBegin('profile_updated', Thrift.Type.STRUCT, 18);
    this.profile_updated.write(output);
    output.writeFieldEnd();
  }
  if (this.profile_deleted !== null && this.profile_deleted !== undefined) {
    output.writeFieldBegin('profile_deleted', Thrift.Type.STRUCT, 19);
    this.profile_deleted.write(output);
    output.writeFieldEnd();
  }
  if (this.profile_changed !== null && this.profile_changed !== undefined) {
    output.writeFieldBegin('profile_changed', Thrift.Type.STRUCT, 27);
    this.profile_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.group_membership_changed !== null && this.group_membership_changed !== undefined) {
    output.writeFieldBegin('group_membership_changed', Thrift.Type.STRUCT, 28);
    this.group_membership_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.group_petition_adoption_changed !== null && this.group_petition_adoption_changed !== undefined) {
    output.writeFieldBegin('group_petition_adoption_changed', Thrift.Type.STRUCT, 31);
    this.group_petition_adoption_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.contact_async_job !== null && this.contact_async_job !== undefined) {
    output.writeFieldBegin('contact_async_job', Thrift.Type.STRUCT, 22);
    this.contact_async_job.write(output);
    output.writeFieldEnd();
  }
  if (this.alignment_async_job !== null && this.alignment_async_job !== undefined) {
    output.writeFieldBegin('alignment_async_job', Thrift.Type.STRUCT, 25);
    this.alignment_async_job.write(output);
    output.writeFieldEnd();
  }
  if (this.share_changed !== null && this.share_changed !== undefined) {
    output.writeFieldBegin('share_changed', Thrift.Type.STRUCT, 29);
    this.share_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.share_conversion_changed !== null && this.share_conversion_changed !== undefined) {
    output.writeFieldBegin('share_conversion_changed', Thrift.Type.STRUCT, 30);
    this.share_conversion_changed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageParcel = module.exports.MessageParcel = function(args) {
  this.published_at = null;
  this.publisher = null;
  this.messages = null;
  if (args) {
    if (args.published_at !== undefined && args.published_at !== null) {
      this.published_at = args.published_at;
    }
    if (args.publisher !== undefined && args.publisher !== null) {
      this.publisher = args.publisher;
    }
    if (args.messages !== undefined && args.messages !== null) {
      this.messages = Thrift.copyList(args.messages, [ttypes.Message]);
    }
  }
};
MessageParcel.prototype = {};
MessageParcel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.published_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.publisher = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.messages = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Message();
          elem6.read(input);
          this.messages.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageParcel.prototype.write = function(output) {
  output.writeStructBegin('MessageParcel');
  if (this.published_at !== null && this.published_at !== undefined) {
    output.writeFieldBegin('published_at', Thrift.Type.STRING, 3);
    output.writeString(this.published_at);
    output.writeFieldEnd();
  }
  if (this.publisher !== null && this.publisher !== undefined) {
    output.writeFieldBegin('publisher', Thrift.Type.I32, 4);
    output.writeI32(this.publisher);
    output.writeFieldEnd();
  }
  if (this.messages !== null && this.messages !== undefined) {
    output.writeFieldBegin('messages', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.messages.length);
    for (var iter7 in this.messages)
    {
      if (this.messages.hasOwnProperty(iter7))
      {
        iter7 = this.messages[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueuedMessage = module.exports.QueuedMessage = function(args) {
  this.published_at = null;
  this.publisher = null;
  this.request_id = null;
  this.request_context = null;
  this.message = null;
  if (args) {
    if (args.published_at !== undefined && args.published_at !== null) {
      this.published_at = args.published_at;
    }
    if (args.publisher !== undefined && args.publisher !== null) {
      this.publisher = args.publisher;
    }
    if (args.request_id !== undefined && args.request_id !== null) {
      this.request_id = args.request_id;
    }
    if (args.request_context !== undefined && args.request_context !== null) {
      this.request_context = new shared_ttypes.RequestContext(args.request_context);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
QueuedMessage.prototype = {};
QueuedMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.published_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.publisher = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.request_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.request_context = new shared_ttypes.RequestContext();
        this.request_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueuedMessage.prototype.write = function(output) {
  output.writeStructBegin('QueuedMessage');
  if (this.published_at !== null && this.published_at !== undefined) {
    output.writeFieldBegin('published_at', Thrift.Type.STRING, 1);
    output.writeString(this.published_at);
    output.writeFieldEnd();
  }
  if (this.publisher !== null && this.publisher !== undefined) {
    output.writeFieldBegin('publisher', Thrift.Type.I32, 2);
    output.writeI32(this.publisher);
    output.writeFieldEnd();
  }
  if (this.request_id !== null && this.request_id !== undefined) {
    output.writeFieldBegin('request_id', Thrift.Type.STRING, 3);
    output.writeString(this.request_id);
    output.writeFieldEnd();
  }
  if (this.request_context !== null && this.request_context !== undefined) {
    output.writeFieldBegin('request_context', Thrift.Type.STRUCT, 5);
    this.request_context.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 4);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueueFullException = module.exports.QueueFullException = function(args) {
  Thrift.TException.call(this, "QueueFullException");
  this.name = "QueueFullException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(QueueFullException, Thrift.TException);
QueueFullException.prototype.name = 'QueueFullException';
QueueFullException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueFullException.prototype.write = function(output) {
  output.writeStructBegin('QueueFullException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.MESSAGE_KEY = {
  'causes_account_linked' : ['entity_uuid'],
  'facebook_account_linked' : ['entity_uuid'],
  'entity_changed' : ['entity_uuid'],
  'action_taken' : [],
  'action_requested' : [],
  'petition_signed' : ['entity_uuid','petition_uid'],
  'petition_launched' : ['petition_uid'],
  'petition_grades_published' : ['petition_uid'],
  'petition_grading_notifications_triggered' : ['petition_uid'],
  'campaign_created' : ['campaign_uid'],
  'campaign_deleted' : ['campaign_uid'],
  'campaign_updated_topics' : ['campaign_uid'],
  'campaign_launched' : ['campaign_uid'],
  'campaign_update_created' : [],
  'campaign_poll_triggered' : ['campaign_poll_uid'],
  'campaign_supporter_changed' : ['entity_uuid','campaign_uid'],
  'content_topic_changed' : ['topic_uid','content_uid','content_type','change_type'],
  'invitation_created' : ['invitation_uid'],
  'invitation_accepted' : ['invitation_uid'],
  'invitation_deactivated' : ['invitation_uid'],
  'invitation_conversion_changed' : ['invitation_conversion_uid'],
  'position_changed' : ['position_uid'],
  'position_response_created' : ['position_uid','entity_uuid'],
  'position_response_deleted' : ['position_uid','entity_uuid'],
  'position_response_updated' : ['position_uid','entity_uuid'],
  'profile_district_changed' : ['entity_uuid','district_uid','change_type'],
  'profile_created' : ['entity_uuid'],
  'profile_updated' : ['entity_uuid'],
  'profile_deleted' : ['entity_uuid'],
  'profile_changed' : ['entity_uuid'],
  'group_membership_changed' : ['uid'],
  'group_petition_adoption_changed' : ['group_petition_adoption_uid'],
  'contact_async_job' : [],
  'alignment_async_job' : [],
  'share_changed' : ['share_uid'],
  'share_conversion_changed' : ['share_conversion_uid']
};

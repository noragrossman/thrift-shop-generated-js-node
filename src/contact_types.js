//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var contact_types_ttypes = require('./contact_types_types');
var campaign_ttypes = require('./campaign_types');
var shared_ttypes = require('./shared_types');
var event_bus_ttypes = require('./event_bus_types');
var experiment_ttypes = require('./experiment_types');


var ttypes = module.exports = {};
ttypes.ContactSource = {
  'FACEBOOK' : 0,
  'CAUSES' : 1,
  'IOS' : 2,
  'ANDROID' : 3,
  'GMAIL' : 4,
  'YAHOO' : 5,
  'MANUAL' : 6,
  'BRIGADE' : 7
};
ttypes.RankingContext = {
  'ACTION_PETITION' : 0,
  'POSITIONS_FOR_TOPIC' : 1
};
ttypes.RankingContextAssociationType = {
  'PETITION' : 0,
  'TOPIC' : 1
};
ttypes.ContactFilter = {
  'EMAIL' : 0,
  'PHONE_NUMBER' : 1
};
ttypes.OnPlatformFilter = {
  'BRIGADE' : 0,
  'CAUSES' : 1,
  'OFF_SITE' : 2,
  'OFF_SITE_WITH_CAUSES' : 3
};
var PoliticalContext = module.exports.PoliticalContext = function(args) {
  this.topic_uids = null;
  this.campaign_ideology_buckets = null;
  if (args) {
    if (args.topic_uids !== undefined && args.topic_uids !== null) {
      this.topic_uids = Thrift.copyList(args.topic_uids, [null]);
    }
    if (args.campaign_ideology_buckets !== undefined && args.campaign_ideology_buckets !== null) {
      this.campaign_ideology_buckets = Thrift.copyList(args.campaign_ideology_buckets, [null]);
    }
  }
};
PoliticalContext.prototype = {};
PoliticalContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.topic_uids = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.topic_uids.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.campaign_ideology_buckets = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI32();
          this.campaign_ideology_buckets.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoliticalContext.prototype.write = function(output) {
  output.writeStructBegin('PoliticalContext');
  if (this.topic_uids !== null && this.topic_uids !== undefined) {
    output.writeFieldBegin('topic_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.topic_uids.length);
    for (var iter14 in this.topic_uids)
    {
      if (this.topic_uids.hasOwnProperty(iter14))
      {
        iter14 = this.topic_uids[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.campaign_ideology_buckets !== null && this.campaign_ideology_buckets !== undefined) {
    output.writeFieldBegin('campaign_ideology_buckets', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.campaign_ideology_buckets.length);
    for (var iter15 in this.campaign_ideology_buckets)
    {
      if (this.campaign_ideology_buckets.hasOwnProperty(iter15))
      {
        iter15 = this.campaign_ideology_buckets[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RankingMetadata = module.exports.RankingMetadata = function(args) {
  this.political_context = null;
  if (args) {
    if (args.political_context !== undefined && args.political_context !== null) {
      this.political_context = new ttypes.PoliticalContext(args.political_context);
    }
  }
};
RankingMetadata.prototype = {};
RankingMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.political_context = new ttypes.PoliticalContext();
        this.political_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RankingMetadata.prototype.write = function(output) {
  output.writeStructBegin('RankingMetadata');
  if (this.political_context !== null && this.political_context !== undefined) {
    output.writeFieldBegin('political_context', Thrift.Type.STRUCT, 1);
    this.political_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EmailDetail = module.exports.EmailDetail = function(args) {
  this.contact_instance_email_address_uid = null;
  this.context = null;
  this.email_address = null;
  if (args) {
    if (args.contact_instance_email_address_uid !== undefined && args.contact_instance_email_address_uid !== null) {
      this.contact_instance_email_address_uid = args.contact_instance_email_address_uid;
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = args.context;
    }
    if (args.email_address !== undefined && args.email_address !== null) {
      this.email_address = args.email_address;
    }
  }
};
EmailDetail.prototype = {};
EmailDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contact_instance_email_address_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.context = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailDetail.prototype.write = function(output) {
  output.writeStructBegin('EmailDetail');
  if (this.contact_instance_email_address_uid !== null && this.contact_instance_email_address_uid !== undefined) {
    output.writeFieldBegin('contact_instance_email_address_uid', Thrift.Type.STRING, 1);
    output.writeString(this.contact_instance_email_address_uid);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRING, 2);
    output.writeString(this.context);
    output.writeFieldEnd();
  }
  if (this.email_address !== null && this.email_address !== undefined) {
    output.writeFieldBegin('email_address', Thrift.Type.STRING, 3);
    output.writeString(this.email_address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactInstance = module.exports.ContactInstance = function(args) {
  this.uid = null;
  this.display_name = null;
  this.recommendation_context = null;
  this.recommended = null;
  this.first_name = null;
  this.last_name = null;
  this.causes_id = null;
  this.facebook_id = null;
  this.entity_uuid = null;
  this.avatar_url = null;
  this.email_details = null;
  this.phone_numbers = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.display_name !== undefined && args.display_name !== null) {
      this.display_name = args.display_name;
    }
    if (args.recommendation_context !== undefined && args.recommendation_context !== null) {
      this.recommendation_context = args.recommendation_context;
    }
    if (args.recommended !== undefined && args.recommended !== null) {
      this.recommended = args.recommended;
    }
    if (args.first_name !== undefined && args.first_name !== null) {
      this.first_name = args.first_name;
    }
    if (args.last_name !== undefined && args.last_name !== null) {
      this.last_name = args.last_name;
    }
    if (args.causes_id !== undefined && args.causes_id !== null) {
      this.causes_id = args.causes_id;
    }
    if (args.facebook_id !== undefined && args.facebook_id !== null) {
      this.facebook_id = args.facebook_id;
    }
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.avatar_url !== undefined && args.avatar_url !== null) {
      this.avatar_url = args.avatar_url;
    }
    if (args.email_details !== undefined && args.email_details !== null) {
      this.email_details = Thrift.copyList(args.email_details, [ttypes.EmailDetail]);
    }
    if (args.phone_numbers !== undefined && args.phone_numbers !== null) {
      this.phone_numbers = Thrift.copyList(args.phone_numbers, [null]);
    }
  }
};
ContactInstance.prototype = {};
ContactInstance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.display_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.recommendation_context = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.recommended = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.first_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.last_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.causes_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.facebook_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.avatar_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.email_details = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.EmailDetail();
          elem22.read(input);
          this.email_details.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.phone_numbers = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readString();
          this.phone_numbers.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactInstance.prototype.write = function(output) {
  output.writeStructBegin('ContactInstance');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.display_name !== null && this.display_name !== undefined) {
    output.writeFieldBegin('display_name', Thrift.Type.STRING, 2);
    output.writeString(this.display_name);
    output.writeFieldEnd();
  }
  if (this.recommendation_context !== null && this.recommendation_context !== undefined) {
    output.writeFieldBegin('recommendation_context', Thrift.Type.STRING, 3);
    output.writeString(this.recommendation_context);
    output.writeFieldEnd();
  }
  if (this.recommended !== null && this.recommended !== undefined) {
    output.writeFieldBegin('recommended', Thrift.Type.BOOL, 4);
    output.writeBool(this.recommended);
    output.writeFieldEnd();
  }
  if (this.first_name !== null && this.first_name !== undefined) {
    output.writeFieldBegin('first_name', Thrift.Type.STRING, 5);
    output.writeString(this.first_name);
    output.writeFieldEnd();
  }
  if (this.last_name !== null && this.last_name !== undefined) {
    output.writeFieldBegin('last_name', Thrift.Type.STRING, 6);
    output.writeString(this.last_name);
    output.writeFieldEnd();
  }
  if (this.causes_id !== null && this.causes_id !== undefined) {
    output.writeFieldBegin('causes_id', Thrift.Type.I32, 7);
    output.writeI32(this.causes_id);
    output.writeFieldEnd();
  }
  if (this.facebook_id !== null && this.facebook_id !== undefined) {
    output.writeFieldBegin('facebook_id', Thrift.Type.STRING, 8);
    output.writeString(this.facebook_id);
    output.writeFieldEnd();
  }
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 9);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.avatar_url !== null && this.avatar_url !== undefined) {
    output.writeFieldBegin('avatar_url', Thrift.Type.STRING, 10);
    output.writeString(this.avatar_url);
    output.writeFieldEnd();
  }
  if (this.email_details !== null && this.email_details !== undefined) {
    output.writeFieldBegin('email_details', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.email_details.length);
    for (var iter30 in this.email_details)
    {
      if (this.email_details.hasOwnProperty(iter30))
      {
        iter30 = this.email_details[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.phone_numbers !== null && this.phone_numbers !== undefined) {
    output.writeFieldBegin('phone_numbers', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.phone_numbers.length);
    for (var iter31 in this.phone_numbers)
    {
      if (this.phone_numbers.hasOwnProperty(iter31))
      {
        iter31 = this.phone_numbers[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EmailLookup = module.exports.EmailLookup = function(args) {
  this.contact_instance_email_address_uid = null;
  this.email_address = null;
  this.contact_instance_uid = null;
  this.full_name = null;
  if (args) {
    if (args.contact_instance_email_address_uid !== undefined && args.contact_instance_email_address_uid !== null) {
      this.contact_instance_email_address_uid = args.contact_instance_email_address_uid;
    }
    if (args.email_address !== undefined && args.email_address !== null) {
      this.email_address = args.email_address;
    }
    if (args.contact_instance_uid !== undefined && args.contact_instance_uid !== null) {
      this.contact_instance_uid = args.contact_instance_uid;
    }
    if (args.full_name !== undefined && args.full_name !== null) {
      this.full_name = args.full_name;
    }
  }
};
EmailLookup.prototype = {};
EmailLookup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contact_instance_email_address_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contact_instance_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.full_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailLookup.prototype.write = function(output) {
  output.writeStructBegin('EmailLookup');
  if (this.contact_instance_email_address_uid !== null && this.contact_instance_email_address_uid !== undefined) {
    output.writeFieldBegin('contact_instance_email_address_uid', Thrift.Type.STRING, 1);
    output.writeString(this.contact_instance_email_address_uid);
    output.writeFieldEnd();
  }
  if (this.email_address !== null && this.email_address !== undefined) {
    output.writeFieldBegin('email_address', Thrift.Type.STRING, 2);
    output.writeString(this.email_address);
    output.writeFieldEnd();
  }
  if (this.contact_instance_uid !== null && this.contact_instance_uid !== undefined) {
    output.writeFieldBegin('contact_instance_uid', Thrift.Type.STRING, 3);
    output.writeString(this.contact_instance_uid);
    output.writeFieldEnd();
  }
  if (this.full_name !== null && this.full_name !== undefined) {
    output.writeFieldBegin('full_name', Thrift.Type.STRING, 4);
    output.writeString(this.full_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactLocation = module.exports.ContactLocation = function(args) {
  this.location = null;
  this.location_blob = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new contact_types_ttypes.Location(args.location);
    }
    if (args.location_blob !== undefined && args.location_blob !== null) {
      this.location_blob = args.location_blob;
    }
  }
};
ContactLocation.prototype = {};
ContactLocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new contact_types_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location_blob = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactLocation.prototype.write = function(output) {
  output.writeStructBegin('ContactLocation');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.location_blob !== null && this.location_blob !== undefined) {
    output.writeFieldBegin('location_blob', Thrift.Type.STRING, 2);
    output.writeString(this.location_blob);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactAddition = module.exports.ContactAddition = function(args) {
  this.owner_entity_uuid = null;
  this.source = null;
  this.email_addresses = null;
  this.phone_numbers = null;
  this.full_name = null;
  this.times_contacted = null;
  this.most_recent_contact = null;
  this.most_recent_recruit_at = null;
  this.last_active_at = null;
  this.times_recruiting = null;
  this.causes_id = null;
  this.entity_uuid = null;
  this.first_name = null;
  this.last_name = null;
  this.location = null;
  this.facebook_id = null;
  this.avatar_url = null;
  if (args) {
    if (args.owner_entity_uuid !== undefined && args.owner_entity_uuid !== null) {
      this.owner_entity_uuid = args.owner_entity_uuid;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.email_addresses !== undefined && args.email_addresses !== null) {
      this.email_addresses = Thrift.copyList(args.email_addresses, [null]);
    }
    if (args.phone_numbers !== undefined && args.phone_numbers !== null) {
      this.phone_numbers = Thrift.copyList(args.phone_numbers, [null]);
    }
    if (args.full_name !== undefined && args.full_name !== null) {
      this.full_name = args.full_name;
    }
    if (args.times_contacted !== undefined && args.times_contacted !== null) {
      this.times_contacted = args.times_contacted;
    }
    if (args.most_recent_contact !== undefined && args.most_recent_contact !== null) {
      this.most_recent_contact = args.most_recent_contact;
    }
    if (args.most_recent_recruit_at !== undefined && args.most_recent_recruit_at !== null) {
      this.most_recent_recruit_at = args.most_recent_recruit_at;
    }
    if (args.last_active_at !== undefined && args.last_active_at !== null) {
      this.last_active_at = args.last_active_at;
    }
    if (args.times_recruiting !== undefined && args.times_recruiting !== null) {
      this.times_recruiting = args.times_recruiting;
    }
    if (args.causes_id !== undefined && args.causes_id !== null) {
      this.causes_id = args.causes_id;
    }
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.first_name !== undefined && args.first_name !== null) {
      this.first_name = args.first_name;
    }
    if (args.last_name !== undefined && args.last_name !== null) {
      this.last_name = args.last_name;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.ContactLocation(args.location);
    }
    if (args.facebook_id !== undefined && args.facebook_id !== null) {
      this.facebook_id = args.facebook_id;
    }
    if (args.avatar_url !== undefined && args.avatar_url !== null) {
      this.avatar_url = args.avatar_url;
    }
  }
};
ContactAddition.prototype = {};
ContactAddition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.owner_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.email_addresses = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString();
          this.email_addresses.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.phone_numbers = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readString();
          this.phone_numbers.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.full_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.times_contacted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.most_recent_contact = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.most_recent_recruit_at = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.last_active_at = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.times_recruiting = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.causes_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.first_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.last_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.ContactLocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.facebook_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.avatar_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactAddition.prototype.write = function(output) {
  output.writeStructBegin('ContactAddition');
  if (this.owner_entity_uuid !== null && this.owner_entity_uuid !== undefined) {
    output.writeFieldBegin('owner_entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.owner_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 2);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  if (this.email_addresses !== null && this.email_addresses !== undefined) {
    output.writeFieldBegin('email_addresses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.email_addresses.length);
    for (var iter46 in this.email_addresses)
    {
      if (this.email_addresses.hasOwnProperty(iter46))
      {
        iter46 = this.email_addresses[iter46];
        output.writeString(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.phone_numbers !== null && this.phone_numbers !== undefined) {
    output.writeFieldBegin('phone_numbers', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.phone_numbers.length);
    for (var iter47 in this.phone_numbers)
    {
      if (this.phone_numbers.hasOwnProperty(iter47))
      {
        iter47 = this.phone_numbers[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.full_name !== null && this.full_name !== undefined) {
    output.writeFieldBegin('full_name', Thrift.Type.STRING, 5);
    output.writeString(this.full_name);
    output.writeFieldEnd();
  }
  if (this.times_contacted !== null && this.times_contacted !== undefined) {
    output.writeFieldBegin('times_contacted', Thrift.Type.I32, 6);
    output.writeI32(this.times_contacted);
    output.writeFieldEnd();
  }
  if (this.most_recent_contact !== null && this.most_recent_contact !== undefined) {
    output.writeFieldBegin('most_recent_contact', Thrift.Type.I64, 7);
    output.writeI64(this.most_recent_contact);
    output.writeFieldEnd();
  }
  if (this.most_recent_recruit_at !== null && this.most_recent_recruit_at !== undefined) {
    output.writeFieldBegin('most_recent_recruit_at', Thrift.Type.I64, 16);
    output.writeI64(this.most_recent_recruit_at);
    output.writeFieldEnd();
  }
  if (this.last_active_at !== null && this.last_active_at !== undefined) {
    output.writeFieldBegin('last_active_at', Thrift.Type.I64, 17);
    output.writeI64(this.last_active_at);
    output.writeFieldEnd();
  }
  if (this.times_recruiting !== null && this.times_recruiting !== undefined) {
    output.writeFieldBegin('times_recruiting', Thrift.Type.I32, 18);
    output.writeI32(this.times_recruiting);
    output.writeFieldEnd();
  }
  if (this.causes_id !== null && this.causes_id !== undefined) {
    output.writeFieldBegin('causes_id', Thrift.Type.I32, 8);
    output.writeI32(this.causes_id);
    output.writeFieldEnd();
  }
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 10);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.first_name !== null && this.first_name !== undefined) {
    output.writeFieldBegin('first_name', Thrift.Type.STRING, 11);
    output.writeString(this.first_name);
    output.writeFieldEnd();
  }
  if (this.last_name !== null && this.last_name !== undefined) {
    output.writeFieldBegin('last_name', Thrift.Type.STRING, 12);
    output.writeString(this.last_name);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 13);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.facebook_id !== null && this.facebook_id !== undefined) {
    output.writeFieldBegin('facebook_id', Thrift.Type.STRING, 14);
    output.writeString(this.facebook_id);
    output.writeFieldEnd();
  }
  if (this.avatar_url !== null && this.avatar_url !== undefined) {
    output.writeFieldBegin('avatar_url', Thrift.Type.STRING, 15);
    output.writeString(this.avatar_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactRanking = module.exports.ContactRanking = function(args) {
  this.contact_instances = null;
  if (args) {
    if (args.contact_instances !== undefined && args.contact_instances !== null) {
      this.contact_instances = Thrift.copyList(args.contact_instances, [ttypes.ContactInstance]);
    }
  }
};
ContactRanking.prototype = {};
ContactRanking.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.contact_instances = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.ContactInstance();
          elem54.read(input);
          this.contact_instances.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactRanking.prototype.write = function(output) {
  output.writeStructBegin('ContactRanking');
  if (this.contact_instances !== null && this.contact_instances !== undefined) {
    output.writeFieldBegin('contact_instances', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.contact_instances.length);
    for (var iter55 in this.contact_instances)
    {
      if (this.contact_instances.hasOwnProperty(iter55))
      {
        iter55 = this.contact_instances[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedContactSet = module.exports.PaginatedContactSet = function(args) {
  this.page_info = null;
  this.contact_instances = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.contact_instances !== undefined && args.contact_instances !== null) {
      this.contact_instances = Thrift.copyList(args.contact_instances, [ttypes.ContactInstance]);
    }
  }
};
PaginatedContactSet.prototype = {};
PaginatedContactSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.contact_instances = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.ContactInstance();
          elem62.read(input);
          this.contact_instances.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedContactSet.prototype.write = function(output) {
  output.writeStructBegin('PaginatedContactSet');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.contact_instances !== null && this.contact_instances !== undefined) {
    output.writeFieldBegin('contact_instances', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.contact_instances.length);
    for (var iter63 in this.contact_instances)
    {
      if (this.contact_instances.hasOwnProperty(iter63))
      {
        iter63 = this.contact_instances[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddContactsRequest = module.exports.AddContactsRequest = function(args) {
  this.contact_additions = null;
  this.owner_entity_uuid = null;
  if (args) {
    if (args.contact_additions !== undefined && args.contact_additions !== null) {
      this.contact_additions = Thrift.copyList(args.contact_additions, [ttypes.ContactAddition]);
    }
    if (args.owner_entity_uuid !== undefined && args.owner_entity_uuid !== null) {
      this.owner_entity_uuid = args.owner_entity_uuid;
    }
  }
};
AddContactsRequest.prototype = {};
AddContactsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.contact_additions = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.ContactAddition();
          elem70.read(input);
          this.contact_additions.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.owner_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddContactsRequest.prototype.write = function(output) {
  output.writeStructBegin('AddContactsRequest');
  if (this.contact_additions !== null && this.contact_additions !== undefined) {
    output.writeFieldBegin('contact_additions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.contact_additions.length);
    for (var iter71 in this.contact_additions)
    {
      if (this.contact_additions.hasOwnProperty(iter71))
      {
        iter71 = this.contact_additions[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.owner_entity_uuid !== null && this.owner_entity_uuid !== undefined) {
    output.writeFieldBegin('owner_entity_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.owner_entity_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteContactMethodsRequest = module.exports.DeleteContactMethodsRequest = function(args) {
  this.owner_entity_uuid = null;
  this.contact_instance_uids = null;
  if (args) {
    if (args.owner_entity_uuid !== undefined && args.owner_entity_uuid !== null) {
      this.owner_entity_uuid = args.owner_entity_uuid;
    }
    if (args.contact_instance_uids !== undefined && args.contact_instance_uids !== null) {
      this.contact_instance_uids = Thrift.copyList(args.contact_instance_uids, [null]);
    }
  }
};
DeleteContactMethodsRequest.prototype = {};
DeleteContactMethodsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.owner_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.contact_instance_uids = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readString();
          this.contact_instance_uids.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteContactMethodsRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteContactMethodsRequest');
  if (this.owner_entity_uuid !== null && this.owner_entity_uuid !== undefined) {
    output.writeFieldBegin('owner_entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.owner_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.contact_instance_uids !== null && this.contact_instance_uids !== undefined) {
    output.writeFieldBegin('contact_instance_uids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.contact_instance_uids.length);
    for (var iter79 in this.contact_instance_uids)
    {
      if (this.contact_instance_uids.hasOwnProperty(iter79))
      {
        iter79 = this.contact_instance_uids[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetContactRankingRequest = module.exports.GetContactRankingRequest = function(args) {
  this.ranking_context = null;
  this.ranking_context_association_type = null;
  this.ranking_context_association_uid = null;
  this.search_filter = null;
  this.contact_filters = null;
  this.owner_entity_uuid = null;
  this.owner_experiment_assignments = null;
  this.ranking_metadata = null;
  if (args) {
    if (args.ranking_context !== undefined && args.ranking_context !== null) {
      this.ranking_context = args.ranking_context;
    }
    if (args.ranking_context_association_type !== undefined && args.ranking_context_association_type !== null) {
      this.ranking_context_association_type = args.ranking_context_association_type;
    }
    if (args.ranking_context_association_uid !== undefined && args.ranking_context_association_uid !== null) {
      this.ranking_context_association_uid = args.ranking_context_association_uid;
    }
    if (args.search_filter !== undefined && args.search_filter !== null) {
      this.search_filter = args.search_filter;
    }
    if (args.contact_filters !== undefined && args.contact_filters !== null) {
      this.contact_filters = Thrift.copyList(args.contact_filters, [null]);
    }
    if (args.owner_entity_uuid !== undefined && args.owner_entity_uuid !== null) {
      this.owner_entity_uuid = args.owner_entity_uuid;
    }
    if (args.owner_experiment_assignments !== undefined && args.owner_experiment_assignments !== null) {
      this.owner_experiment_assignments = Thrift.copyMap(args.owner_experiment_assignments, [null]);
    }
    if (args.ranking_metadata !== undefined && args.ranking_metadata !== null) {
      this.ranking_metadata = Thrift.copyList(args.ranking_metadata, [ttypes.RankingMetadata]);
    }
  }
};
GetContactRankingRequest.prototype = {};
GetContactRankingRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ranking_context = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.ranking_context_association_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ranking_context_association_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.search_filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.contact_filters = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readI32();
          this.contact_filters.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.owner_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size87 = 0;
        var _rtmp391;
        this.owner_experiment_assignments = {};
        var _ktype88 = 0;
        var _vtype89 = 0;
        _rtmp391 = input.readMapBegin();
        _ktype88 = _rtmp391.ktype;
        _vtype89 = _rtmp391.vtype;
        _size87 = _rtmp391.size;
        for (var _i92 = 0; _i92 < _size87; ++_i92)
        {
          var key93 = null;
          var val94 = null;
          key93 = input.readString();
          val94 = input.readString();
          this.owner_experiment_assignments[key93] = val94;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.ranking_metadata = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = new ttypes.RankingMetadata();
          elem101.read(input);
          this.ranking_metadata.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetContactRankingRequest.prototype.write = function(output) {
  output.writeStructBegin('GetContactRankingRequest');
  if (this.ranking_context !== null && this.ranking_context !== undefined) {
    output.writeFieldBegin('ranking_context', Thrift.Type.I32, 1);
    output.writeI32(this.ranking_context);
    output.writeFieldEnd();
  }
  if (this.ranking_context_association_type !== null && this.ranking_context_association_type !== undefined) {
    output.writeFieldBegin('ranking_context_association_type', Thrift.Type.I32, 2);
    output.writeI32(this.ranking_context_association_type);
    output.writeFieldEnd();
  }
  if (this.ranking_context_association_uid !== null && this.ranking_context_association_uid !== undefined) {
    output.writeFieldBegin('ranking_context_association_uid', Thrift.Type.STRING, 3);
    output.writeString(this.ranking_context_association_uid);
    output.writeFieldEnd();
  }
  if (this.search_filter !== null && this.search_filter !== undefined) {
    output.writeFieldBegin('search_filter', Thrift.Type.STRING, 4);
    output.writeString(this.search_filter);
    output.writeFieldEnd();
  }
  if (this.contact_filters !== null && this.contact_filters !== undefined) {
    output.writeFieldBegin('contact_filters', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.contact_filters.length);
    for (var iter102 in this.contact_filters)
    {
      if (this.contact_filters.hasOwnProperty(iter102))
      {
        iter102 = this.contact_filters[iter102];
        output.writeI32(iter102);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.owner_entity_uuid !== null && this.owner_entity_uuid !== undefined) {
    output.writeFieldBegin('owner_entity_uuid', Thrift.Type.STRING, 6);
    output.writeString(this.owner_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.owner_experiment_assignments !== null && this.owner_experiment_assignments !== undefined) {
    output.writeFieldBegin('owner_experiment_assignments', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.owner_experiment_assignments));
    for (var kiter103 in this.owner_experiment_assignments)
    {
      if (this.owner_experiment_assignments.hasOwnProperty(kiter103))
      {
        var viter104 = this.owner_experiment_assignments[kiter103];
        output.writeString(kiter103);
        output.writeString(viter104);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ranking_metadata !== null && this.ranking_metadata !== undefined) {
    output.writeFieldBegin('ranking_metadata', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.ranking_metadata.length);
    for (var iter105 in this.ranking_metadata)
    {
      if (this.ranking_metadata.hasOwnProperty(iter105))
      {
        iter105 = this.ranking_metadata[iter105];
        iter105.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEmailLookupsRequest = module.exports.GetEmailLookupsRequest = function(args) {
  this.contact_instance_email_address_uids = null;
  this.owner_entity_uuid = null;
  if (args) {
    if (args.contact_instance_email_address_uids !== undefined && args.contact_instance_email_address_uids !== null) {
      this.contact_instance_email_address_uids = Thrift.copyList(args.contact_instance_email_address_uids, [null]);
    }
    if (args.owner_entity_uuid !== undefined && args.owner_entity_uuid !== null) {
      this.owner_entity_uuid = args.owner_entity_uuid;
    }
  }
};
GetEmailLookupsRequest.prototype = {};
GetEmailLookupsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.contact_instance_email_address_uids = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = input.readString();
          this.contact_instance_email_address_uids.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.owner_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEmailLookupsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetEmailLookupsRequest');
  if (this.contact_instance_email_address_uids !== null && this.contact_instance_email_address_uids !== undefined) {
    output.writeFieldBegin('contact_instance_email_address_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.contact_instance_email_address_uids.length);
    for (var iter113 in this.contact_instance_email_address_uids)
    {
      if (this.contact_instance_email_address_uids.hasOwnProperty(iter113))
      {
        iter113 = this.contact_instance_email_address_uids[iter113];
        output.writeString(iter113);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.owner_entity_uuid !== null && this.owner_entity_uuid !== undefined) {
    output.writeFieldBegin('owner_entity_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.owner_entity_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactSetRequest = module.exports.ContactSetRequest = function(args) {
  this.search_filter = null;
  this.contact_filters = null;
  this.owner_entity_uuid = null;
  this.pagination_params = null;
  this.on_platform_filters = null;
  this.source_filters = null;
  this.entity_uuids = null;
  this.contact_uids = null;
  if (args) {
    if (args.search_filter !== undefined && args.search_filter !== null) {
      this.search_filter = args.search_filter;
    }
    if (args.contact_filters !== undefined && args.contact_filters !== null) {
      this.contact_filters = Thrift.copyList(args.contact_filters, [null]);
    }
    if (args.owner_entity_uuid !== undefined && args.owner_entity_uuid !== null) {
      this.owner_entity_uuid = args.owner_entity_uuid;
    }
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
    if (args.on_platform_filters !== undefined && args.on_platform_filters !== null) {
      this.on_platform_filters = Thrift.copyList(args.on_platform_filters, [null]);
    }
    if (args.source_filters !== undefined && args.source_filters !== null) {
      this.source_filters = Thrift.copyList(args.source_filters, [null]);
    }
    if (args.entity_uuids !== undefined && args.entity_uuids !== null) {
      this.entity_uuids = Thrift.copyList(args.entity_uuids, [null]);
    }
    if (args.contact_uids !== undefined && args.contact_uids !== null) {
      this.contact_uids = Thrift.copyList(args.contact_uids, [null]);
    }
  }
};
ContactSetRequest.prototype = {};
ContactSetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.search_filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.contact_filters = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = input.readI32();
          this.contact_filters.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.owner_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size121 = 0;
        var _rtmp3125;
        this.on_platform_filters = [];
        var _etype124 = 0;
        _rtmp3125 = input.readListBegin();
        _etype124 = _rtmp3125.etype;
        _size121 = _rtmp3125.size;
        for (var _i126 = 0; _i126 < _size121; ++_i126)
        {
          var elem127 = null;
          elem127 = input.readI32();
          this.on_platform_filters.push(elem127);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.source_filters = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readI32();
          this.source_filters.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size135 = 0;
        var _rtmp3139;
        this.entity_uuids = [];
        var _etype138 = 0;
        _rtmp3139 = input.readListBegin();
        _etype138 = _rtmp3139.etype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var elem141 = null;
          elem141 = input.readString();
          this.entity_uuids.push(elem141);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size142 = 0;
        var _rtmp3146;
        this.contact_uids = [];
        var _etype145 = 0;
        _rtmp3146 = input.readListBegin();
        _etype145 = _rtmp3146.etype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var elem148 = null;
          elem148 = input.readString();
          this.contact_uids.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactSetRequest.prototype.write = function(output) {
  output.writeStructBegin('ContactSetRequest');
  if (this.search_filter !== null && this.search_filter !== undefined) {
    output.writeFieldBegin('search_filter', Thrift.Type.STRING, 1);
    output.writeString(this.search_filter);
    output.writeFieldEnd();
  }
  if (this.contact_filters !== null && this.contact_filters !== undefined) {
    output.writeFieldBegin('contact_filters', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.contact_filters.length);
    for (var iter149 in this.contact_filters)
    {
      if (this.contact_filters.hasOwnProperty(iter149))
      {
        iter149 = this.contact_filters[iter149];
        output.writeI32(iter149);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.owner_entity_uuid !== null && this.owner_entity_uuid !== undefined) {
    output.writeFieldBegin('owner_entity_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.owner_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 4);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  if (this.on_platform_filters !== null && this.on_platform_filters !== undefined) {
    output.writeFieldBegin('on_platform_filters', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.on_platform_filters.length);
    for (var iter150 in this.on_platform_filters)
    {
      if (this.on_platform_filters.hasOwnProperty(iter150))
      {
        iter150 = this.on_platform_filters[iter150];
        output.writeI32(iter150);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.source_filters !== null && this.source_filters !== undefined) {
    output.writeFieldBegin('source_filters', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.source_filters.length);
    for (var iter151 in this.source_filters)
    {
      if (this.source_filters.hasOwnProperty(iter151))
      {
        iter151 = this.source_filters[iter151];
        output.writeI32(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entity_uuids !== null && this.entity_uuids !== undefined) {
    output.writeFieldBegin('entity_uuids', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.entity_uuids.length);
    for (var iter152 in this.entity_uuids)
    {
      if (this.entity_uuids.hasOwnProperty(iter152))
      {
        iter152 = this.entity_uuids[iter152];
        output.writeString(iter152);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contact_uids !== null && this.contact_uids !== undefined) {
    output.writeFieldBegin('contact_uids', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.contact_uids.length);
    for (var iter153 in this.contact_uids)
    {
      if (this.contact_uids.hasOwnProperty(iter153))
      {
        iter153 = this.contact_uids[iter153];
        output.writeString(iter153);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetNetworkDetailsRequest = module.exports.GetNetworkDetailsRequest = function(args) {
  this.owner_entity_uuids = null;
  if (args) {
    if (args.owner_entity_uuids !== undefined && args.owner_entity_uuids !== null) {
      this.owner_entity_uuids = Thrift.copyList(args.owner_entity_uuids, [null]);
    }
  }
};
GetNetworkDetailsRequest.prototype = {};
GetNetworkDetailsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size154 = 0;
        var _rtmp3158;
        this.owner_entity_uuids = [];
        var _etype157 = 0;
        _rtmp3158 = input.readListBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = input.readString();
          this.owner_entity_uuids.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetNetworkDetailsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetNetworkDetailsRequest');
  if (this.owner_entity_uuids !== null && this.owner_entity_uuids !== undefined) {
    output.writeFieldBegin('owner_entity_uuids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.owner_entity_uuids.length);
    for (var iter161 in this.owner_entity_uuids)
    {
      if (this.owner_entity_uuids.hasOwnProperty(iter161))
      {
        iter161 = this.owner_entity_uuids[iter161];
        output.writeString(iter161);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NetworkDetails = module.exports.NetworkDetails = function(args) {
  this.owner_entity_uuid = null;
  this.total_contact_count = null;
  this.onsite_contact_count = null;
  this.offsite_contact_count = null;
  if (args) {
    if (args.owner_entity_uuid !== undefined && args.owner_entity_uuid !== null) {
      this.owner_entity_uuid = args.owner_entity_uuid;
    }
    if (args.total_contact_count !== undefined && args.total_contact_count !== null) {
      this.total_contact_count = args.total_contact_count;
    }
    if (args.onsite_contact_count !== undefined && args.onsite_contact_count !== null) {
      this.onsite_contact_count = args.onsite_contact_count;
    }
    if (args.offsite_contact_count !== undefined && args.offsite_contact_count !== null) {
      this.offsite_contact_count = args.offsite_contact_count;
    }
  }
};
NetworkDetails.prototype = {};
NetworkDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.owner_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.total_contact_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.onsite_contact_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.offsite_contact_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NetworkDetails.prototype.write = function(output) {
  output.writeStructBegin('NetworkDetails');
  if (this.owner_entity_uuid !== null && this.owner_entity_uuid !== undefined) {
    output.writeFieldBegin('owner_entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.owner_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.total_contact_count !== null && this.total_contact_count !== undefined) {
    output.writeFieldBegin('total_contact_count', Thrift.Type.I32, 2);
    output.writeI32(this.total_contact_count);
    output.writeFieldEnd();
  }
  if (this.onsite_contact_count !== null && this.onsite_contact_count !== undefined) {
    output.writeFieldBegin('onsite_contact_count', Thrift.Type.I32, 3);
    output.writeI32(this.onsite_contact_count);
    output.writeFieldEnd();
  }
  if (this.offsite_contact_count !== null && this.offsite_contact_count !== undefined) {
    output.writeFieldBegin('offsite_contact_count', Thrift.Type.I32, 4);
    output.writeI32(this.offsite_contact_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NetworkDetailsResponse = module.exports.NetworkDetailsResponse = function(args) {
  this.network_details = null;
  if (args) {
    if (args.network_details !== undefined && args.network_details !== null) {
      this.network_details = Thrift.copyList(args.network_details, [ttypes.NetworkDetails]);
    }
  }
};
NetworkDetailsResponse.prototype = {};
NetworkDetailsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size162 = 0;
        var _rtmp3166;
        this.network_details = [];
        var _etype165 = 0;
        _rtmp3166 = input.readListBegin();
        _etype165 = _rtmp3166.etype;
        _size162 = _rtmp3166.size;
        for (var _i167 = 0; _i167 < _size162; ++_i167)
        {
          var elem168 = null;
          elem168 = new ttypes.NetworkDetails();
          elem168.read(input);
          this.network_details.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NetworkDetailsResponse.prototype.write = function(output) {
  output.writeStructBegin('NetworkDetailsResponse');
  if (this.network_details !== null && this.network_details !== undefined) {
    output.writeFieldBegin('network_details', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.network_details.length);
    for (var iter169 in this.network_details)
    {
      if (this.network_details.hasOwnProperty(iter169))
      {
        iter169 = this.network_details[iter169];
        iter169.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactOwner = module.exports.ContactOwner = function(args) {
  this.entity_uuid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
  }
};
ContactOwner.prototype = {};
ContactOwner.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactOwner.prototype.write = function(output) {
  output.writeStructBegin('ContactOwner');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaginatedContactOwners = module.exports.PaginatedContactOwners = function(args) {
  this.page_info = null;
  this.contact_owners = null;
  if (args) {
    if (args.page_info !== undefined && args.page_info !== null) {
      this.page_info = new shared_ttypes.BoundaryLimitPageInfo(args.page_info);
    }
    if (args.contact_owners !== undefined && args.contact_owners !== null) {
      this.contact_owners = Thrift.copyList(args.contact_owners, [ttypes.ContactOwner]);
    }
  }
};
PaginatedContactOwners.prototype = {};
PaginatedContactOwners.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page_info = new shared_ttypes.BoundaryLimitPageInfo();
        this.page_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size170 = 0;
        var _rtmp3174;
        this.contact_owners = [];
        var _etype173 = 0;
        _rtmp3174 = input.readListBegin();
        _etype173 = _rtmp3174.etype;
        _size170 = _rtmp3174.size;
        for (var _i175 = 0; _i175 < _size170; ++_i175)
        {
          var elem176 = null;
          elem176 = new ttypes.ContactOwner();
          elem176.read(input);
          this.contact_owners.push(elem176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaginatedContactOwners.prototype.write = function(output) {
  output.writeStructBegin('PaginatedContactOwners');
  if (this.page_info !== null && this.page_info !== undefined) {
    output.writeFieldBegin('page_info', Thrift.Type.STRUCT, 1);
    this.page_info.write(output);
    output.writeFieldEnd();
  }
  if (this.contact_owners !== null && this.contact_owners !== undefined) {
    output.writeFieldBegin('contact_owners', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.contact_owners.length);
    for (var iter177 in this.contact_owners)
    {
      if (this.contact_owners.hasOwnProperty(iter177))
      {
        iter177 = this.contact_owners[iter177];
        iter177.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetContactOwnersFilterParams = module.exports.GetContactOwnersFilterParams = function(args) {
  this.contact_entity_uuids = null;
  if (args) {
    if (args.contact_entity_uuids !== undefined && args.contact_entity_uuids !== null) {
      this.contact_entity_uuids = Thrift.copyList(args.contact_entity_uuids, [null]);
    }
  }
};
GetContactOwnersFilterParams.prototype = {};
GetContactOwnersFilterParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.contact_entity_uuids = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = input.readString();
          this.contact_entity_uuids.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetContactOwnersFilterParams.prototype.write = function(output) {
  output.writeStructBegin('GetContactOwnersFilterParams');
  if (this.contact_entity_uuids !== null && this.contact_entity_uuids !== undefined) {
    output.writeFieldBegin('contact_entity_uuids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.contact_entity_uuids.length);
    for (var iter185 in this.contact_entity_uuids)
    {
      if (this.contact_entity_uuids.hasOwnProperty(iter185))
      {
        iter185 = this.contact_entity_uuids[iter185];
        output.writeString(iter185);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetContactOwnersRequest = module.exports.GetContactOwnersRequest = function(args) {
  this.filter_params = null;
  this.pagination_params = null;
  if (args) {
    if (args.filter_params !== undefined && args.filter_params !== null) {
      this.filter_params = new ttypes.GetContactOwnersFilterParams(args.filter_params);
    }
    if (args.pagination_params !== undefined && args.pagination_params !== null) {
      this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams(args.pagination_params);
    }
  }
};
GetContactOwnersRequest.prototype = {};
GetContactOwnersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter_params = new ttypes.GetContactOwnersFilterParams();
        this.filter_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination_params = new shared_ttypes.BoundaryLimitPaginationParams();
        this.pagination_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetContactOwnersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetContactOwnersRequest');
  if (this.filter_params !== null && this.filter_params !== undefined) {
    output.writeFieldBegin('filter_params', Thrift.Type.STRUCT, 1);
    this.filter_params.write(output);
    output.writeFieldEnd();
  }
  if (this.pagination_params !== null && this.pagination_params !== undefined) {
    output.writeFieldBegin('pagination_params', Thrift.Type.STRUCT, 2);
    this.pagination_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BackendContactDetails = module.exports.BackendContactDetails = function(args) {
  this.contact_instance_uid = null;
  this.contact_uid = null;
  this.full_name = null;
  this.first_name = null;
  this.last_name = null;
  if (args) {
    if (args.contact_instance_uid !== undefined && args.contact_instance_uid !== null) {
      this.contact_instance_uid = args.contact_instance_uid;
    }
    if (args.contact_uid !== undefined && args.contact_uid !== null) {
      this.contact_uid = args.contact_uid;
    }
    if (args.full_name !== undefined && args.full_name !== null) {
      this.full_name = args.full_name;
    }
    if (args.first_name !== undefined && args.first_name !== null) {
      this.first_name = args.first_name;
    }
    if (args.last_name !== undefined && args.last_name !== null) {
      this.last_name = args.last_name;
    }
  }
};
BackendContactDetails.prototype = {};
BackendContactDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contact_instance_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contact_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.full_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.first_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.last_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BackendContactDetails.prototype.write = function(output) {
  output.writeStructBegin('BackendContactDetails');
  if (this.contact_instance_uid !== null && this.contact_instance_uid !== undefined) {
    output.writeFieldBegin('contact_instance_uid', Thrift.Type.STRING, 1);
    output.writeString(this.contact_instance_uid);
    output.writeFieldEnd();
  }
  if (this.contact_uid !== null && this.contact_uid !== undefined) {
    output.writeFieldBegin('contact_uid', Thrift.Type.STRING, 2);
    output.writeString(this.contact_uid);
    output.writeFieldEnd();
  }
  if (this.full_name !== null && this.full_name !== undefined) {
    output.writeFieldBegin('full_name', Thrift.Type.STRING, 3);
    output.writeString(this.full_name);
    output.writeFieldEnd();
  }
  if (this.first_name !== null && this.first_name !== undefined) {
    output.writeFieldBegin('first_name', Thrift.Type.STRING, 4);
    output.writeString(this.first_name);
    output.writeFieldEnd();
  }
  if (this.last_name !== null && this.last_name !== undefined) {
    output.writeFieldBegin('last_name', Thrift.Type.STRING, 5);
    output.writeString(this.last_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BackendContactDetailsResponse = module.exports.BackendContactDetailsResponse = function(args) {
  this.backend_contact_details = null;
  if (args) {
    if (args.backend_contact_details !== undefined && args.backend_contact_details !== null) {
      this.backend_contact_details = Thrift.copyList(args.backend_contact_details, [ttypes.BackendContactDetails]);
    }
  }
};
BackendContactDetailsResponse.prototype = {};
BackendContactDetailsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size186 = 0;
        var _rtmp3190;
        this.backend_contact_details = [];
        var _etype189 = 0;
        _rtmp3190 = input.readListBegin();
        _etype189 = _rtmp3190.etype;
        _size186 = _rtmp3190.size;
        for (var _i191 = 0; _i191 < _size186; ++_i191)
        {
          var elem192 = null;
          elem192 = new ttypes.BackendContactDetails();
          elem192.read(input);
          this.backend_contact_details.push(elem192);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BackendContactDetailsResponse.prototype.write = function(output) {
  output.writeStructBegin('BackendContactDetailsResponse');
  if (this.backend_contact_details !== null && this.backend_contact_details !== undefined) {
    output.writeFieldBegin('backend_contact_details', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.backend_contact_details.length);
    for (var iter193 in this.backend_contact_details)
    {
      if (this.backend_contact_details.hasOwnProperty(iter193))
      {
        iter193 = this.backend_contact_details[iter193];
        iter193.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BackendContactDetailsRequest = module.exports.BackendContactDetailsRequest = function(args) {
  this.contact_instance_uids = null;
  if (args) {
    if (args.contact_instance_uids !== undefined && args.contact_instance_uids !== null) {
      this.contact_instance_uids = Thrift.copyList(args.contact_instance_uids, [null]);
    }
  }
};
BackendContactDetailsRequest.prototype = {};
BackendContactDetailsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size194 = 0;
        var _rtmp3198;
        this.contact_instance_uids = [];
        var _etype197 = 0;
        _rtmp3198 = input.readListBegin();
        _etype197 = _rtmp3198.etype;
        _size194 = _rtmp3198.size;
        for (var _i199 = 0; _i199 < _size194; ++_i199)
        {
          var elem200 = null;
          elem200 = input.readString();
          this.contact_instance_uids.push(elem200);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BackendContactDetailsRequest.prototype.write = function(output) {
  output.writeStructBegin('BackendContactDetailsRequest');
  if (this.contact_instance_uids !== null && this.contact_instance_uids !== undefined) {
    output.writeFieldBegin('contact_instance_uids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.contact_instance_uids.length);
    for (var iter201 in this.contact_instance_uids)
    {
      if (this.contact_instance_uids.hasOwnProperty(iter201))
      {
        iter201 = this.contact_instance_uids[iter201];
        output.writeString(iter201);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


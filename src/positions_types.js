//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');
var eb_shared_ttypes = require('./eb_shared_types');


var ttypes = module.exports = {};
ttypes.PositionAgreement = {
  'AGREE' : 1,
  'DISAGREE' : 2,
  'UNSURE' : 3
};
var PositionChanged = module.exports.PositionChanged = function(args) {
  this.change_type = null;
  this.position_uid = null;
  this.author_entity_uuid = null;
  this.topic_uid = null;
  this.body = null;
  this.core = null;
  this.changed_at = null;
  if (args) {
    if (args.change_type !== undefined && args.change_type !== null) {
      this.change_type = args.change_type;
    }
    if (args.position_uid !== undefined && args.position_uid !== null) {
      this.position_uid = args.position_uid;
    }
    if (args.author_entity_uuid !== undefined && args.author_entity_uuid !== null) {
      this.author_entity_uuid = args.author_entity_uuid;
    }
    if (args.topic_uid !== undefined && args.topic_uid !== null) {
      this.topic_uid = args.topic_uid;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
    if (args.changed_at !== undefined && args.changed_at !== null) {
      this.changed_at = args.changed_at;
    }
  }
};
PositionChanged.prototype = {};
PositionChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.change_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.position_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.author_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.topic_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.core = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.changed_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PositionChanged.prototype.write = function(output) {
  output.writeStructBegin('PositionChanged');
  if (this.change_type !== null && this.change_type !== undefined) {
    output.writeFieldBegin('change_type', Thrift.Type.I32, 1);
    output.writeI32(this.change_type);
    output.writeFieldEnd();
  }
  if (this.position_uid !== null && this.position_uid !== undefined) {
    output.writeFieldBegin('position_uid', Thrift.Type.STRING, 2);
    output.writeString(this.position_uid);
    output.writeFieldEnd();
  }
  if (this.author_entity_uuid !== null && this.author_entity_uuid !== undefined) {
    output.writeFieldBegin('author_entity_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.author_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.topic_uid !== null && this.topic_uid !== undefined) {
    output.writeFieldBegin('topic_uid', Thrift.Type.STRING, 7);
    output.writeString(this.topic_uid);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 4);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.BOOL, 5);
    output.writeBool(this.core);
    output.writeFieldEnd();
  }
  if (this.changed_at !== null && this.changed_at !== undefined) {
    output.writeFieldBegin('changed_at', Thrift.Type.STRING, 6);
    output.writeString(this.changed_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PositionResponseCreated = module.exports.PositionResponseCreated = function(args) {
  this.entity_uuid = null;
  this.agreement = null;
  this.created_at = null;
  this.position_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.agreement !== undefined && args.agreement !== null) {
      this.agreement = args.agreement;
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    }
    if (args.position_uid !== undefined && args.position_uid !== null) {
      this.position_uid = args.position_uid;
    }
  }
};
PositionResponseCreated.prototype = {};
PositionResponseCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.agreement = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.position_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PositionResponseCreated.prototype.write = function(output) {
  output.writeStructBegin('PositionResponseCreated');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.agreement !== null && this.agreement !== undefined) {
    output.writeFieldBegin('agreement', Thrift.Type.I32, 3);
    output.writeI32(this.agreement);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 4);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.position_uid !== null && this.position_uid !== undefined) {
    output.writeFieldBegin('position_uid', Thrift.Type.STRING, 5);
    output.writeString(this.position_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PositionResponseDeleted = module.exports.PositionResponseDeleted = function(args) {
  this.entity_uuid = null;
  this.agreement = null;
  this.deleted_at = null;
  this.position_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.agreement !== undefined && args.agreement !== null) {
      this.agreement = args.agreement;
    }
    if (args.deleted_at !== undefined && args.deleted_at !== null) {
      this.deleted_at = args.deleted_at;
    }
    if (args.position_uid !== undefined && args.position_uid !== null) {
      this.position_uid = args.position_uid;
    }
  }
};
PositionResponseDeleted.prototype = {};
PositionResponseDeleted.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.agreement = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.deleted_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.position_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PositionResponseDeleted.prototype.write = function(output) {
  output.writeStructBegin('PositionResponseDeleted');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.agreement !== null && this.agreement !== undefined) {
    output.writeFieldBegin('agreement', Thrift.Type.I32, 3);
    output.writeI32(this.agreement);
    output.writeFieldEnd();
  }
  if (this.deleted_at !== null && this.deleted_at !== undefined) {
    output.writeFieldBegin('deleted_at', Thrift.Type.STRING, 4);
    output.writeString(this.deleted_at);
    output.writeFieldEnd();
  }
  if (this.position_uid !== null && this.position_uid !== undefined) {
    output.writeFieldBegin('position_uid', Thrift.Type.STRING, 5);
    output.writeString(this.position_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PositionResponseUpdated = module.exports.PositionResponseUpdated = function(args) {
  this.entity_uuid = null;
  this.agreement = null;
  this.updated_at = null;
  this.position_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.agreement !== undefined && args.agreement !== null) {
      this.agreement = args.agreement;
    }
    if (args.updated_at !== undefined && args.updated_at !== null) {
      this.updated_at = args.updated_at;
    }
    if (args.position_uid !== undefined && args.position_uid !== null) {
      this.position_uid = args.position_uid;
    }
  }
};
PositionResponseUpdated.prototype = {};
PositionResponseUpdated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.agreement = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.updated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.position_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PositionResponseUpdated.prototype.write = function(output) {
  output.writeStructBegin('PositionResponseUpdated');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.agreement !== null && this.agreement !== undefined) {
    output.writeFieldBegin('agreement', Thrift.Type.I32, 3);
    output.writeI32(this.agreement);
    output.writeFieldEnd();
  }
  if (this.updated_at !== null && this.updated_at !== undefined) {
    output.writeFieldBegin('updated_at', Thrift.Type.STRING, 4);
    output.writeString(this.updated_at);
    output.writeFieldEnd();
  }
  if (this.position_uid !== null && this.position_uid !== undefined) {
    output.writeFieldBegin('position_uid', Thrift.Type.STRING, 5);
    output.writeString(this.position_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


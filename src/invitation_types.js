//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');


var ttypes = module.exports = {};
ttypes.InvitationTypeName = {
  'TOPIC_COMPARE_INVITATION' : 1,
  'PAL_TOPIC_COMPARE_INVITATION' : 2,
  'JOIN_GROUP_INVITATION' : 3,
  'SIGN_PETITION_INVITATION' : 4
};
var InviteeUid = module.exports.InviteeUid = function(args) {
  this.entity_uuid = null;
  this.contact_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.contact_uid !== undefined && args.contact_uid !== null) {
      this.contact_uid = args.contact_uid;
    }
  }
};
InviteeUid.prototype = {};
InviteeUid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contact_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteeUid.prototype.write = function(output) {
  output.writeStructBegin('InviteeUid');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.contact_uid !== null && this.contact_uid !== undefined) {
    output.writeFieldBegin('contact_uid', Thrift.Type.STRING, 2);
    output.writeString(this.contact_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvitationTargetUid = module.exports.InvitationTargetUid = function(args) {
  this.group_uid = null;
  this.petition_uid = null;
  this.topic_uid = null;
  if (args) {
    if (args.group_uid !== undefined && args.group_uid !== null) {
      this.group_uid = args.group_uid;
    }
    if (args.petition_uid !== undefined && args.petition_uid !== null) {
      this.petition_uid = args.petition_uid;
    }
    if (args.topic_uid !== undefined && args.topic_uid !== null) {
      this.topic_uid = args.topic_uid;
    }
  }
};
InvitationTargetUid.prototype = {};
InvitationTargetUid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.petition_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.topic_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvitationTargetUid.prototype.write = function(output) {
  output.writeStructBegin('InvitationTargetUid');
  if (this.group_uid !== null && this.group_uid !== undefined) {
    output.writeFieldBegin('group_uid', Thrift.Type.STRING, 1);
    output.writeString(this.group_uid);
    output.writeFieldEnd();
  }
  if (this.petition_uid !== null && this.petition_uid !== undefined) {
    output.writeFieldBegin('petition_uid', Thrift.Type.STRING, 2);
    output.writeString(this.petition_uid);
    output.writeFieldEnd();
  }
  if (this.topic_uid !== null && this.topic_uid !== undefined) {
    output.writeFieldBegin('topic_uid', Thrift.Type.STRING, 3);
    output.writeString(this.topic_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invitation = module.exports.Invitation = function(args) {
  this.uid = null;
  this.created_at = null;
  this.updated_at = null;
  this.invitation_type_name = null;
  this.accepted_at = null;
  this.declined_at = null;
  this.deactivated_at = null;
  this.expired_at = null;
  this.invitation_target_uid = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    }
    if (args.updated_at !== undefined && args.updated_at !== null) {
      this.updated_at = args.updated_at;
    }
    if (args.invitation_type_name !== undefined && args.invitation_type_name !== null) {
      this.invitation_type_name = args.invitation_type_name;
    }
    if (args.accepted_at !== undefined && args.accepted_at !== null) {
      this.accepted_at = args.accepted_at;
    }
    if (args.declined_at !== undefined && args.declined_at !== null) {
      this.declined_at = args.declined_at;
    }
    if (args.deactivated_at !== undefined && args.deactivated_at !== null) {
      this.deactivated_at = args.deactivated_at;
    }
    if (args.expired_at !== undefined && args.expired_at !== null) {
      this.expired_at = args.expired_at;
    }
    if (args.invitation_target_uid !== undefined && args.invitation_target_uid !== null) {
      this.invitation_target_uid = new ttypes.InvitationTargetUid(args.invitation_target_uid);
    }
  }
};
Invitation.prototype = {};
Invitation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.updated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.invitation_type_name = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accepted_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.declined_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.deactivated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.expired_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitation_target_uid = new ttypes.InvitationTargetUid();
        this.invitation_target_uid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invitation.prototype.write = function(output) {
  output.writeStructBegin('Invitation');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 3);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.updated_at !== null && this.updated_at !== undefined) {
    output.writeFieldBegin('updated_at', Thrift.Type.STRING, 4);
    output.writeString(this.updated_at);
    output.writeFieldEnd();
  }
  if (this.invitation_type_name !== null && this.invitation_type_name !== undefined) {
    output.writeFieldBegin('invitation_type_name', Thrift.Type.I32, 5);
    output.writeI32(this.invitation_type_name);
    output.writeFieldEnd();
  }
  if (this.accepted_at !== null && this.accepted_at !== undefined) {
    output.writeFieldBegin('accepted_at', Thrift.Type.STRING, 6);
    output.writeString(this.accepted_at);
    output.writeFieldEnd();
  }
  if (this.declined_at !== null && this.declined_at !== undefined) {
    output.writeFieldBegin('declined_at', Thrift.Type.STRING, 7);
    output.writeString(this.declined_at);
    output.writeFieldEnd();
  }
  if (this.deactivated_at !== null && this.deactivated_at !== undefined) {
    output.writeFieldBegin('deactivated_at', Thrift.Type.STRING, 8);
    output.writeString(this.deactivated_at);
    output.writeFieldEnd();
  }
  if (this.expired_at !== null && this.expired_at !== undefined) {
    output.writeFieldBegin('expired_at', Thrift.Type.STRING, 9);
    output.writeString(this.expired_at);
    output.writeFieldEnd();
  }
  if (this.invitation_target_uid !== null && this.invitation_target_uid !== undefined) {
    output.writeFieldBegin('invitation_target_uid', Thrift.Type.STRUCT, 10);
    this.invitation_target_uid.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvitationConversion = module.exports.InvitationConversion = function(args) {
  this.uid = null;
  this.invitation_uid = null;
  this.converter_entity_uuid = null;
  this.created_at = null;
  this.updated_at = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.invitation_uid !== undefined && args.invitation_uid !== null) {
      this.invitation_uid = args.invitation_uid;
    }
    if (args.converter_entity_uuid !== undefined && args.converter_entity_uuid !== null) {
      this.converter_entity_uuid = args.converter_entity_uuid;
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    }
    if (args.updated_at !== undefined && args.updated_at !== null) {
      this.updated_at = args.updated_at;
    }
  }
};
InvitationConversion.prototype = {};
InvitationConversion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.converter_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.updated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvitationConversion.prototype.write = function(output) {
  output.writeStructBegin('InvitationConversion');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.invitation_uid !== null && this.invitation_uid !== undefined) {
    output.writeFieldBegin('invitation_uid', Thrift.Type.STRING, 2);
    output.writeString(this.invitation_uid);
    output.writeFieldEnd();
  }
  if (this.converter_entity_uuid !== null && this.converter_entity_uuid !== undefined) {
    output.writeFieldBegin('converter_entity_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.converter_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 4);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.updated_at !== null && this.updated_at !== undefined) {
    output.writeFieldBegin('updated_at', Thrift.Type.STRING, 5);
    output.writeString(this.updated_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


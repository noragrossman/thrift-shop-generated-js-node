//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');


var ttypes = module.exports = {};
var FacebookAccountLinked = module.exports.FacebookAccountLinked = function(args) {
  this.entity_uuid = null;
  this.access_token = null;
  this.facebook_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.access_token !== undefined && args.access_token !== null) {
      this.access_token = args.access_token;
    }
    if (args.facebook_uid !== undefined && args.facebook_uid !== null) {
      this.facebook_uid = args.facebook_uid;
    }
  }
};
FacebookAccountLinked.prototype = {};
FacebookAccountLinked.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.access_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.facebook_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookAccountLinked.prototype.write = function(output) {
  output.writeStructBegin('FacebookAccountLinked');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.access_token !== null && this.access_token !== undefined) {
    output.writeFieldBegin('access_token', Thrift.Type.STRING, 2);
    output.writeString(this.access_token);
    output.writeFieldEnd();
  }
  if (this.facebook_uid !== null && this.facebook_uid !== undefined) {
    output.writeFieldBegin('facebook_uid', Thrift.Type.STRING, 3);
    output.writeString(this.facebook_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CausesAccountLinked = module.exports.CausesAccountLinked = function(args) {
  this.entity_uuid = null;
  this.causes_id = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.causes_id !== undefined && args.causes_id !== null) {
      this.causes_id = args.causes_id;
    }
  }
};
CausesAccountLinked.prototype = {};
CausesAccountLinked.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.causes_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CausesAccountLinked.prototype.write = function(output) {
  output.writeStructBegin('CausesAccountLinked');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.causes_id !== null && this.causes_id !== undefined) {
    output.writeFieldBegin('causes_id', Thrift.Type.I32, 2);
    output.writeI32(this.causes_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


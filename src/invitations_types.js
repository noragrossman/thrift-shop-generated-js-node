//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var eb_shared_ttypes = require('./eb_shared_types');
var contact_types_ttypes = require('./contact_types_types');
var invitation_ttypes = require('./invitation_types');
var shared_ttypes = require('./shared_types');


var ttypes = module.exports = {};
var Invitee = module.exports.Invitee = function(args) {
  this.entity_uuid = null;
  this.email_address = null;
  this.phone_number = null;
  this.causes_user_uid = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.email_address !== undefined && args.email_address !== null) {
      this.email_address = args.email_address;
    }
    if (args.phone_number !== undefined && args.phone_number !== null) {
      this.phone_number = args.phone_number;
    }
    if (args.causes_user_uid !== undefined && args.causes_user_uid !== null) {
      this.causes_user_uid = args.causes_user_uid;
    }
  }
};
Invitee.prototype = {};
Invitee.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.causes_user_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invitee.prototype.write = function(output) {
  output.writeStructBegin('Invitee');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.email_address !== null && this.email_address !== undefined) {
    output.writeFieldBegin('email_address', Thrift.Type.STRING, 2);
    output.writeString(this.email_address);
    output.writeFieldEnd();
  }
  if (this.phone_number !== null && this.phone_number !== undefined) {
    output.writeFieldBegin('phone_number', Thrift.Type.STRING, 4);
    output.writeString(this.phone_number);
    output.writeFieldEnd();
  }
  if (this.causes_user_uid !== null && this.causes_user_uid !== undefined) {
    output.writeFieldBegin('causes_user_uid', Thrift.Type.STRING, 3);
    output.writeString(this.causes_user_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvitationCreated = module.exports.InvitationCreated = function(args) {
  this.invitation_uid = null;
  this.invitee = null;
  this.inviter_entity_uuid = null;
  this.contact_instance_uid = null;
  this.contact_uid = null;
  this.invitation_type_name = null;
  this.target_type = null;
  this.target_uid = null;
  this.invitation_created_at = null;
  this.invitation_type = null;
  if (args) {
    if (args.invitation_uid !== undefined && args.invitation_uid !== null) {
      this.invitation_uid = args.invitation_uid;
    }
    if (args.invitee !== undefined && args.invitee !== null) {
      this.invitee = new ttypes.Invitee(args.invitee);
    }
    if (args.inviter_entity_uuid !== undefined && args.inviter_entity_uuid !== null) {
      this.inviter_entity_uuid = args.inviter_entity_uuid;
    }
    if (args.contact_instance_uid !== undefined && args.contact_instance_uid !== null) {
      this.contact_instance_uid = args.contact_instance_uid;
    }
    if (args.contact_uid !== undefined && args.contact_uid !== null) {
      this.contact_uid = args.contact_uid;
    }
    if (args.invitation_type_name !== undefined && args.invitation_type_name !== null) {
      this.invitation_type_name = args.invitation_type_name;
    }
    if (args.target_type !== undefined && args.target_type !== null) {
      this.target_type = args.target_type;
    }
    if (args.target_uid !== undefined && args.target_uid !== null) {
      this.target_uid = args.target_uid;
    }
    if (args.invitation_created_at !== undefined && args.invitation_created_at !== null) {
      this.invitation_created_at = args.invitation_created_at;
    }
    if (args.invitation_type !== undefined && args.invitation_type !== null) {
      this.invitation_type = args.invitation_type;
    }
  }
};
InvitationCreated.prototype = {};
InvitationCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitee = new ttypes.Invitee();
        this.invitee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.inviter_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.contact_instance_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.contact_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_type_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.target_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.target_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.invitation_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvitationCreated.prototype.write = function(output) {
  output.writeStructBegin('InvitationCreated');
  if (this.invitation_uid !== null && this.invitation_uid !== undefined) {
    output.writeFieldBegin('invitation_uid', Thrift.Type.STRING, 1);
    output.writeString(this.invitation_uid);
    output.writeFieldEnd();
  }
  if (this.invitee !== null && this.invitee !== undefined) {
    output.writeFieldBegin('invitee', Thrift.Type.STRUCT, 2);
    this.invitee.write(output);
    output.writeFieldEnd();
  }
  if (this.inviter_entity_uuid !== null && this.inviter_entity_uuid !== undefined) {
    output.writeFieldBegin('inviter_entity_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.inviter_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.contact_instance_uid !== null && this.contact_instance_uid !== undefined) {
    output.writeFieldBegin('contact_instance_uid', Thrift.Type.STRING, 4);
    output.writeString(this.contact_instance_uid);
    output.writeFieldEnd();
  }
  if (this.contact_uid !== null && this.contact_uid !== undefined) {
    output.writeFieldBegin('contact_uid', Thrift.Type.STRING, 10);
    output.writeString(this.contact_uid);
    output.writeFieldEnd();
  }
  if (this.invitation_type_name !== null && this.invitation_type_name !== undefined) {
    output.writeFieldBegin('invitation_type_name', Thrift.Type.STRING, 5);
    output.writeString(this.invitation_type_name);
    output.writeFieldEnd();
  }
  if (this.target_type !== null && this.target_type !== undefined) {
    output.writeFieldBegin('target_type', Thrift.Type.STRING, 6);
    output.writeString(this.target_type);
    output.writeFieldEnd();
  }
  if (this.target_uid !== null && this.target_uid !== undefined) {
    output.writeFieldBegin('target_uid', Thrift.Type.STRING, 7);
    output.writeString(this.target_uid);
    output.writeFieldEnd();
  }
  if (this.invitation_created_at !== null && this.invitation_created_at !== undefined) {
    output.writeFieldBegin('invitation_created_at', Thrift.Type.STRING, 8);
    output.writeString(this.invitation_created_at);
    output.writeFieldEnd();
  }
  if (this.invitation_type !== null && this.invitation_type !== undefined) {
    output.writeFieldBegin('invitation_type', Thrift.Type.I32, 9);
    output.writeI32(this.invitation_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvitationAccepted = module.exports.InvitationAccepted = function(args) {
  this.invitation_uid = null;
  this.invitee_entity_uuid = null;
  this.inviter_entity_uuid = null;
  this.invitation_accepted_at = null;
  this.invitation_conversion_uid = null;
  if (args) {
    if (args.invitation_uid !== undefined && args.invitation_uid !== null) {
      this.invitation_uid = args.invitation_uid;
    }
    if (args.invitee_entity_uuid !== undefined && args.invitee_entity_uuid !== null) {
      this.invitee_entity_uuid = args.invitee_entity_uuid;
    }
    if (args.inviter_entity_uuid !== undefined && args.inviter_entity_uuid !== null) {
      this.inviter_entity_uuid = args.inviter_entity_uuid;
    }
    if (args.invitation_accepted_at !== undefined && args.invitation_accepted_at !== null) {
      this.invitation_accepted_at = args.invitation_accepted_at;
    }
    if (args.invitation_conversion_uid !== undefined && args.invitation_conversion_uid !== null) {
      this.invitation_conversion_uid = args.invitation_conversion_uid;
    }
  }
};
InvitationAccepted.prototype = {};
InvitationAccepted.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.invitee_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.inviter_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_accepted_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_conversion_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvitationAccepted.prototype.write = function(output) {
  output.writeStructBegin('InvitationAccepted');
  if (this.invitation_uid !== null && this.invitation_uid !== undefined) {
    output.writeFieldBegin('invitation_uid', Thrift.Type.STRING, 1);
    output.writeString(this.invitation_uid);
    output.writeFieldEnd();
  }
  if (this.invitee_entity_uuid !== null && this.invitee_entity_uuid !== undefined) {
    output.writeFieldBegin('invitee_entity_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.invitee_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.inviter_entity_uuid !== null && this.inviter_entity_uuid !== undefined) {
    output.writeFieldBegin('inviter_entity_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.inviter_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.invitation_accepted_at !== null && this.invitation_accepted_at !== undefined) {
    output.writeFieldBegin('invitation_accepted_at', Thrift.Type.STRING, 4);
    output.writeString(this.invitation_accepted_at);
    output.writeFieldEnd();
  }
  if (this.invitation_conversion_uid !== null && this.invitation_conversion_uid !== undefined) {
    output.writeFieldBegin('invitation_conversion_uid', Thrift.Type.STRING, 5);
    output.writeString(this.invitation_conversion_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvitationDeactivated = module.exports.InvitationDeactivated = function(args) {
  this.invitation_uid = null;
  this.invitee_entity_uuid = null;
  this.inviter_entity_uuid = null;
  this.invitation_deactivated_at = null;
  if (args) {
    if (args.invitation_uid !== undefined && args.invitation_uid !== null) {
      this.invitation_uid = args.invitation_uid;
    }
    if (args.invitee_entity_uuid !== undefined && args.invitee_entity_uuid !== null) {
      this.invitee_entity_uuid = args.invitee_entity_uuid;
    }
    if (args.inviter_entity_uuid !== undefined && args.inviter_entity_uuid !== null) {
      this.inviter_entity_uuid = args.inviter_entity_uuid;
    }
    if (args.invitation_deactivated_at !== undefined && args.invitation_deactivated_at !== null) {
      this.invitation_deactivated_at = args.invitation_deactivated_at;
    }
  }
};
InvitationDeactivated.prototype = {};
InvitationDeactivated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.invitee_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.inviter_entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_deactivated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvitationDeactivated.prototype.write = function(output) {
  output.writeStructBegin('InvitationDeactivated');
  if (this.invitation_uid !== null && this.invitation_uid !== undefined) {
    output.writeFieldBegin('invitation_uid', Thrift.Type.STRING, 1);
    output.writeString(this.invitation_uid);
    output.writeFieldEnd();
  }
  if (this.invitee_entity_uuid !== null && this.invitee_entity_uuid !== undefined) {
    output.writeFieldBegin('invitee_entity_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.invitee_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.inviter_entity_uuid !== null && this.inviter_entity_uuid !== undefined) {
    output.writeFieldBegin('inviter_entity_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.inviter_entity_uuid);
    output.writeFieldEnd();
  }
  if (this.invitation_deactivated_at !== null && this.invitation_deactivated_at !== undefined) {
    output.writeFieldBegin('invitation_deactivated_at', Thrift.Type.STRING, 4);
    output.writeString(this.invitation_deactivated_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvitationConversionChanged = module.exports.InvitationConversionChanged = function(args) {
  this.change_type = null;
  this.changed_at = null;
  this.invitation_conversion = null;
  this.invitation_conversion_uid = null;
  if (args) {
    if (args.change_type !== undefined && args.change_type !== null) {
      this.change_type = args.change_type;
    }
    if (args.changed_at !== undefined && args.changed_at !== null) {
      this.changed_at = args.changed_at;
    }
    if (args.invitation_conversion !== undefined && args.invitation_conversion !== null) {
      this.invitation_conversion = new invitation_ttypes.InvitationConversion(args.invitation_conversion);
    }
    if (args.invitation_conversion_uid !== undefined && args.invitation_conversion_uid !== null) {
      this.invitation_conversion_uid = args.invitation_conversion_uid;
    }
  }
};
InvitationConversionChanged.prototype = {};
InvitationConversionChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.change_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.changed_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitation_conversion = new invitation_ttypes.InvitationConversion();
        this.invitation_conversion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.invitation_conversion_uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvitationConversionChanged.prototype.write = function(output) {
  output.writeStructBegin('InvitationConversionChanged');
  if (this.change_type !== null && this.change_type !== undefined) {
    output.writeFieldBegin('change_type', Thrift.Type.I32, 1);
    output.writeI32(this.change_type);
    output.writeFieldEnd();
  }
  if (this.changed_at !== null && this.changed_at !== undefined) {
    output.writeFieldBegin('changed_at', Thrift.Type.STRING, 2);
    output.writeString(this.changed_at);
    output.writeFieldEnd();
  }
  if (this.invitation_conversion !== null && this.invitation_conversion !== undefined) {
    output.writeFieldBegin('invitation_conversion', Thrift.Type.STRUCT, 3);
    this.invitation_conversion.write(output);
    output.writeFieldEnd();
  }
  if (this.invitation_conversion_uid !== null && this.invitation_conversion_uid !== undefined) {
    output.writeFieldBegin('invitation_conversion_uid', Thrift.Type.STRING, 4);
    output.writeString(this.invitation_conversion_uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


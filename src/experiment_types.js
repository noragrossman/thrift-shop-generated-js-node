//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var contact_types_ttypes = require('./contact_types_types');
var shared_ttypes = require('./shared_types');


var ttypes = module.exports = {};
var Assignment = module.exports.Assignment = function(args) {
  this.entity_uuid = null;
  this.experiment_name = null;
  this.assigned_bucket = null;
  this.treatment = null;
  this.overridden = null;
  this.assigned_at = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.experiment_name !== undefined && args.experiment_name !== null) {
      this.experiment_name = args.experiment_name;
    }
    if (args.assigned_bucket !== undefined && args.assigned_bucket !== null) {
      this.assigned_bucket = args.assigned_bucket;
    }
    if (args.treatment !== undefined && args.treatment !== null) {
      this.treatment = Thrift.copyMap(args.treatment, [null]);
    }
    if (args.overridden !== undefined && args.overridden !== null) {
      this.overridden = args.overridden;
    }
    if (args.assigned_at !== undefined && args.assigned_at !== null) {
      this.assigned_at = args.assigned_at;
    }
  }
};
Assignment.prototype = {};
Assignment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.experiment_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.assigned_bucket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.treatment = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.treatment[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.overridden = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.assigned_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Assignment.prototype.write = function(output) {
  output.writeStructBegin('Assignment');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 6);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.experiment_name !== null && this.experiment_name !== undefined) {
    output.writeFieldBegin('experiment_name', Thrift.Type.STRING, 7);
    output.writeString(this.experiment_name);
    output.writeFieldEnd();
  }
  if (this.assigned_bucket !== null && this.assigned_bucket !== undefined) {
    output.writeFieldBegin('assigned_bucket', Thrift.Type.STRING, 8);
    output.writeString(this.assigned_bucket);
    output.writeFieldEnd();
  }
  if (this.treatment !== null && this.treatment !== undefined) {
    output.writeFieldBegin('treatment', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.treatment));
    for (var kiter8 in this.treatment)
    {
      if (this.treatment.hasOwnProperty(kiter8))
      {
        var viter9 = this.treatment[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.overridden !== null && this.overridden !== undefined) {
    output.writeFieldBegin('overridden', Thrift.Type.BOOL, 10);
    output.writeBool(this.overridden);
    output.writeFieldEnd();
  }
  if (this.assigned_at !== null && this.assigned_at !== undefined) {
    output.writeFieldBegin('assigned_at', Thrift.Type.STRING, 12);
    output.writeString(this.assigned_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AssignmentRequest = module.exports.AssignmentRequest = function(args) {
  this.entity_uuid = null;
  this.experiment_names = null;
  this.overrides = null;
  if (args) {
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.experiment_names !== undefined && args.experiment_names !== null) {
      this.experiment_names = Thrift.copyList(args.experiment_names, [null]);
    }
    if (args.overrides !== undefined && args.overrides !== null) {
      this.overrides = Thrift.copyMap(args.overrides, [null]);
    }
  }
};
AssignmentRequest.prototype = {};
AssignmentRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.experiment_names = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString();
          this.experiment_names.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size17 = 0;
        var _rtmp321;
        this.overrides = {};
        var _ktype18 = 0;
        var _vtype19 = 0;
        _rtmp321 = input.readMapBegin();
        _ktype18 = _rtmp321.ktype;
        _vtype19 = _rtmp321.vtype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          var key23 = null;
          var val24 = null;
          key23 = input.readString();
          val24 = input.readString();
          this.overrides[key23] = val24;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AssignmentRequest.prototype.write = function(output) {
  output.writeStructBegin('AssignmentRequest');
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.experiment_names !== null && this.experiment_names !== undefined) {
    output.writeFieldBegin('experiment_names', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.experiment_names.length);
    for (var iter25 in this.experiment_names)
    {
      if (this.experiment_names.hasOwnProperty(iter25))
      {
        iter25 = this.experiment_names[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.overrides !== null && this.overrides !== undefined) {
    output.writeFieldBegin('overrides', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.overrides));
    for (var kiter26 in this.overrides)
    {
      if (this.overrides.hasOwnProperty(kiter26))
      {
        var viter27 = this.overrides[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AssignmentResponse = module.exports.AssignmentResponse = function(args) {
  this.assignments = null;
  if (args) {
    if (args.assignments !== undefined && args.assignments !== null) {
      this.assignments = Thrift.copyList(args.assignments, [ttypes.Assignment]);
    }
  }
};
AssignmentResponse.prototype = {};
AssignmentResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.assignments = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new ttypes.Assignment();
          elem34.read(input);
          this.assignments.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AssignmentResponse.prototype.write = function(output) {
  output.writeStructBegin('AssignmentResponse');
  if (this.assignments !== null && this.assignments !== undefined) {
    output.writeFieldBegin('assignments', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.assignments.length);
    for (var iter35 in this.assignments)
    {
      if (this.assignments.hasOwnProperty(iter35))
      {
        iter35 = this.assignments[iter35];
        iter35.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BulkAssignmentRequest = module.exports.BulkAssignmentRequest = function(args) {
  this.entity_uuids = null;
  this.experiment_names = null;
  if (args) {
    if (args.entity_uuids !== undefined && args.entity_uuids !== null) {
      this.entity_uuids = Thrift.copyList(args.entity_uuids, [null]);
    }
    if (args.experiment_names !== undefined && args.experiment_names !== null) {
      this.experiment_names = Thrift.copyList(args.experiment_names, [null]);
    }
  }
};
BulkAssignmentRequest.prototype = {};
BulkAssignmentRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.entity_uuids = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = input.readString();
          this.entity_uuids.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size43 = 0;
        var _rtmp347;
        this.experiment_names = [];
        var _etype46 = 0;
        _rtmp347 = input.readListBegin();
        _etype46 = _rtmp347.etype;
        _size43 = _rtmp347.size;
        for (var _i48 = 0; _i48 < _size43; ++_i48)
        {
          var elem49 = null;
          elem49 = input.readString();
          this.experiment_names.push(elem49);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BulkAssignmentRequest.prototype.write = function(output) {
  output.writeStructBegin('BulkAssignmentRequest');
  if (this.entity_uuids !== null && this.entity_uuids !== undefined) {
    output.writeFieldBegin('entity_uuids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.entity_uuids.length);
    for (var iter50 in this.entity_uuids)
    {
      if (this.entity_uuids.hasOwnProperty(iter50))
      {
        iter50 = this.entity_uuids[iter50];
        output.writeString(iter50);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experiment_names !== null && this.experiment_names !== undefined) {
    output.writeFieldBegin('experiment_names', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.experiment_names.length);
    for (var iter51 in this.experiment_names)
    {
      if (this.experiment_names.hasOwnProperty(iter51))
      {
        iter51 = this.experiment_names[iter51];
        output.writeString(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Bucket = module.exports.Bucket = function(args) {
  this.name = null;
  this.percentage = null;
  this.treatment = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.percentage !== undefined && args.percentage !== null) {
      this.percentage = args.percentage;
    }
    if (args.treatment !== undefined && args.treatment !== null) {
      this.treatment = Thrift.copyMap(args.treatment, [null]);
    }
  }
};
Bucket.prototype = {};
Bucket.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.percentage = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size52 = 0;
        var _rtmp356;
        this.treatment = {};
        var _ktype53 = 0;
        var _vtype54 = 0;
        _rtmp356 = input.readMapBegin();
        _ktype53 = _rtmp356.ktype;
        _vtype54 = _rtmp356.vtype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var key58 = null;
          var val59 = null;
          key58 = input.readString();
          val59 = input.readString();
          this.treatment[key58] = val59;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Bucket.prototype.write = function(output) {
  output.writeStructBegin('Bucket');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.percentage !== null && this.percentage !== undefined) {
    output.writeFieldBegin('percentage', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.percentage);
    output.writeFieldEnd();
  }
  if (this.treatment !== null && this.treatment !== undefined) {
    output.writeFieldBegin('treatment', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.treatment));
    for (var kiter60 in this.treatment)
    {
      if (this.treatment.hasOwnProperty(kiter60))
      {
        var viter61 = this.treatment[kiter60];
        output.writeString(kiter60);
        output.writeString(viter61);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Experiment = module.exports.Experiment = function(args) {
  this.name = null;
  this.buckets = null;
  this.winning_variant = null;
  this.control = null;
  this.creator_email = null;
  this.description = null;
  this.start_at = null;
  this.end_at = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.buckets !== undefined && args.buckets !== null) {
      this.buckets = Thrift.copyList(args.buckets, [ttypes.Bucket]);
    }
    if (args.winning_variant !== undefined && args.winning_variant !== null) {
      this.winning_variant = args.winning_variant;
    }
    if (args.control !== undefined && args.control !== null) {
      this.control = args.control;
    }
    if (args.creator_email !== undefined && args.creator_email !== null) {
      this.creator_email = args.creator_email;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.start_at !== undefined && args.start_at !== null) {
      this.start_at = args.start_at;
    }
    if (args.end_at !== undefined && args.end_at !== null) {
      this.end_at = args.end_at;
    }
  }
};
Experiment.prototype = {};
Experiment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.buckets = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = new ttypes.Bucket();
          elem68.read(input);
          this.buckets.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.winning_variant = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.control = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.creator_email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.start_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.end_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Experiment.prototype.write = function(output) {
  output.writeStructBegin('Experiment');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.buckets !== null && this.buckets !== undefined) {
    output.writeFieldBegin('buckets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.buckets.length);
    for (var iter69 in this.buckets)
    {
      if (this.buckets.hasOwnProperty(iter69))
      {
        iter69 = this.buckets[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.winning_variant !== null && this.winning_variant !== undefined) {
    output.writeFieldBegin('winning_variant', Thrift.Type.STRING, 3);
    output.writeString(this.winning_variant);
    output.writeFieldEnd();
  }
  if (this.control !== null && this.control !== undefined) {
    output.writeFieldBegin('control', Thrift.Type.STRING, 4);
    output.writeString(this.control);
    output.writeFieldEnd();
  }
  if (this.creator_email !== null && this.creator_email !== undefined) {
    output.writeFieldBegin('creator_email', Thrift.Type.STRING, 5);
    output.writeString(this.creator_email);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.start_at !== null && this.start_at !== undefined) {
    output.writeFieldBegin('start_at', Thrift.Type.STRING, 7);
    output.writeString(this.start_at);
    output.writeFieldEnd();
  }
  if (this.end_at !== null && this.end_at !== undefined) {
    output.writeFieldBegin('end_at', Thrift.Type.STRING, 8);
    output.writeString(this.end_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExperimentsRequest = module.exports.ExperimentsRequest = function(args) {
  this.include_expired = true;
  if (args) {
    if (args.include_expired !== undefined && args.include_expired !== null) {
      this.include_expired = args.include_expired;
    }
  }
};
ExperimentsRequest.prototype = {};
ExperimentsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.include_expired = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentsRequest.prototype.write = function(output) {
  output.writeStructBegin('ExperimentsRequest');
  if (this.include_expired !== null && this.include_expired !== undefined) {
    output.writeFieldBegin('include_expired', Thrift.Type.BOOL, 1);
    output.writeBool(this.include_expired);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExperimentsResponse = module.exports.ExperimentsResponse = function(args) {
  this.experiments = null;
  if (args) {
    if (args.experiments !== undefined && args.experiments !== null) {
      this.experiments = Thrift.copyList(args.experiments, [ttypes.Experiment]);
    }
  }
};
ExperimentsResponse.prototype = {};
ExperimentsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.experiments = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new ttypes.Experiment();
          elem76.read(input);
          this.experiments.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentsResponse.prototype.write = function(output) {
  output.writeStructBegin('ExperimentsResponse');
  if (this.experiments !== null && this.experiments !== undefined) {
    output.writeFieldBegin('experiments', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.experiments.length);
    for (var iter77 in this.experiments)
    {
      if (this.experiments.hasOwnProperty(iter77))
      {
        iter77 = this.experiments[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BucketDetail = module.exports.BucketDetail = function(args) {
  this.bucket = null;
  this.assigned_count = null;
  this.last_assigned_at = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = new ttypes.Bucket(args.bucket);
    }
    if (args.assigned_count !== undefined && args.assigned_count !== null) {
      this.assigned_count = args.assigned_count;
    }
    if (args.last_assigned_at !== undefined && args.last_assigned_at !== null) {
      this.last_assigned_at = args.last_assigned_at;
    }
  }
};
BucketDetail.prototype = {};
BucketDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bucket = new ttypes.Bucket();
        this.bucket.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.assigned_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.last_assigned_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BucketDetail.prototype.write = function(output) {
  output.writeStructBegin('BucketDetail');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.STRUCT, 1);
    this.bucket.write(output);
    output.writeFieldEnd();
  }
  if (this.assigned_count !== null && this.assigned_count !== undefined) {
    output.writeFieldBegin('assigned_count', Thrift.Type.I32, 2);
    output.writeI32(this.assigned_count);
    output.writeFieldEnd();
  }
  if (this.last_assigned_at !== null && this.last_assigned_at !== undefined) {
    output.writeFieldBegin('last_assigned_at', Thrift.Type.STRING, 3);
    output.writeString(this.last_assigned_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AssignmentOverride = module.exports.AssignmentOverride = function(args) {
  this.experiment_name = null;
  this.entity_uuid = null;
  this.bucket_name = null;
  this.assigned_at = null;
  if (args) {
    if (args.experiment_name !== undefined && args.experiment_name !== null) {
      this.experiment_name = args.experiment_name;
    }
    if (args.entity_uuid !== undefined && args.entity_uuid !== null) {
      this.entity_uuid = args.entity_uuid;
    }
    if (args.bucket_name !== undefined && args.bucket_name !== null) {
      this.bucket_name = args.bucket_name;
    }
    if (args.assigned_at !== undefined && args.assigned_at !== null) {
      this.assigned_at = args.assigned_at;
    }
  }
};
AssignmentOverride.prototype = {};
AssignmentOverride.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.experiment_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.entity_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bucket_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.assigned_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AssignmentOverride.prototype.write = function(output) {
  output.writeStructBegin('AssignmentOverride');
  if (this.experiment_name !== null && this.experiment_name !== undefined) {
    output.writeFieldBegin('experiment_name', Thrift.Type.STRING, 1);
    output.writeString(this.experiment_name);
    output.writeFieldEnd();
  }
  if (this.entity_uuid !== null && this.entity_uuid !== undefined) {
    output.writeFieldBegin('entity_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.entity_uuid);
    output.writeFieldEnd();
  }
  if (this.bucket_name !== null && this.bucket_name !== undefined) {
    output.writeFieldBegin('bucket_name', Thrift.Type.STRING, 3);
    output.writeString(this.bucket_name);
    output.writeFieldEnd();
  }
  if (this.assigned_at !== null && this.assigned_at !== undefined) {
    output.writeFieldBegin('assigned_at', Thrift.Type.STRING, 4);
    output.writeString(this.assigned_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExperimentDetail = module.exports.ExperimentDetail = function(args) {
  this.experiment = null;
  this.bucket_details = null;
  this.overrides = null;
  this.created_at = null;
  this.updated_at = null;
  if (args) {
    if (args.experiment !== undefined && args.experiment !== null) {
      this.experiment = new ttypes.Experiment(args.experiment);
    }
    if (args.bucket_details !== undefined && args.bucket_details !== null) {
      this.bucket_details = Thrift.copyList(args.bucket_details, [ttypes.BucketDetail]);
    }
    if (args.overrides !== undefined && args.overrides !== null) {
      this.overrides = Thrift.copyList(args.overrides, [ttypes.AssignmentOverride]);
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    }
    if (args.updated_at !== undefined && args.updated_at !== null) {
      this.updated_at = args.updated_at;
    }
  }
};
ExperimentDetail.prototype = {};
ExperimentDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.experiment = new ttypes.Experiment();
        this.experiment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.bucket_details = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = new ttypes.BucketDetail();
          elem84.read(input);
          this.bucket_details.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size85 = 0;
        var _rtmp389;
        this.overrides = [];
        var _etype88 = 0;
        _rtmp389 = input.readListBegin();
        _etype88 = _rtmp389.etype;
        _size85 = _rtmp389.size;
        for (var _i90 = 0; _i90 < _size85; ++_i90)
        {
          var elem91 = null;
          elem91 = new ttypes.AssignmentOverride();
          elem91.read(input);
          this.overrides.push(elem91);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.updated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentDetail.prototype.write = function(output) {
  output.writeStructBegin('ExperimentDetail');
  if (this.experiment !== null && this.experiment !== undefined) {
    output.writeFieldBegin('experiment', Thrift.Type.STRUCT, 1);
    this.experiment.write(output);
    output.writeFieldEnd();
  }
  if (this.bucket_details !== null && this.bucket_details !== undefined) {
    output.writeFieldBegin('bucket_details', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.bucket_details.length);
    for (var iter92 in this.bucket_details)
    {
      if (this.bucket_details.hasOwnProperty(iter92))
      {
        iter92 = this.bucket_details[iter92];
        iter92.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.overrides !== null && this.overrides !== undefined) {
    output.writeFieldBegin('overrides', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.overrides.length);
    for (var iter93 in this.overrides)
    {
      if (this.overrides.hasOwnProperty(iter93))
      {
        iter93 = this.overrides[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 4);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.updated_at !== null && this.updated_at !== undefined) {
    output.writeFieldBegin('updated_at', Thrift.Type.STRING, 5);
    output.writeString(this.updated_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExperimentDetailRequest = module.exports.ExperimentDetailRequest = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ExperimentDetailRequest.prototype = {};
ExperimentDetailRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentDetailRequest.prototype.write = function(output) {
  output.writeStructBegin('ExperimentDetailRequest');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateExperimentRequest = module.exports.CreateExperimentRequest = function(args) {
  this.experiment = null;
  if (args) {
    if (args.experiment !== undefined && args.experiment !== null) {
      this.experiment = new ttypes.Experiment(args.experiment);
    }
  }
};
CreateExperimentRequest.prototype = {};
CreateExperimentRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.experiment = new ttypes.Experiment();
        this.experiment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateExperimentRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateExperimentRequest');
  if (this.experiment !== null && this.experiment !== undefined) {
    output.writeFieldBegin('experiment', Thrift.Type.STRUCT, 1);
    this.experiment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateExperimentRequest = module.exports.UpdateExperimentRequest = function(args) {
  this.description = null;
  this.start_at = null;
  this.end_at = null;
  this.winning_variant = null;
  this.name = null;
  if (args) {
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.start_at !== undefined && args.start_at !== null) {
      this.start_at = args.start_at;
    }
    if (args.end_at !== undefined && args.end_at !== null) {
      this.end_at = args.end_at;
    }
    if (args.winning_variant !== undefined && args.winning_variant !== null) {
      this.winning_variant = args.winning_variant;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
UpdateExperimentRequest.prototype = {};
UpdateExperimentRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.start_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.end_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.winning_variant = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateExperimentRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateExperimentRequest');
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 1);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.start_at !== null && this.start_at !== undefined) {
    output.writeFieldBegin('start_at', Thrift.Type.STRING, 2);
    output.writeString(this.start_at);
    output.writeFieldEnd();
  }
  if (this.end_at !== null && this.end_at !== undefined) {
    output.writeFieldBegin('end_at', Thrift.Type.STRING, 3);
    output.writeString(this.end_at);
    output.writeFieldEnd();
  }
  if (this.winning_variant !== null && this.winning_variant !== undefined) {
    output.writeFieldBegin('winning_variant', Thrift.Type.STRING, 4);
    output.writeString(this.winning_variant);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteExperimentRequest = module.exports.DeleteExperimentRequest = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
DeleteExperimentRequest.prototype = {};
DeleteExperimentRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteExperimentRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteExperimentRequest');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateTreatmentRequest = module.exports.CreateTreatmentRequest = function(args) {
  this.experiment_name = null;
  this.bucket_name = null;
  this.treatment = null;
  if (args) {
    if (args.experiment_name !== undefined && args.experiment_name !== null) {
      this.experiment_name = args.experiment_name;
    }
    if (args.bucket_name !== undefined && args.bucket_name !== null) {
      this.bucket_name = args.bucket_name;
    }
    if (args.treatment !== undefined && args.treatment !== null) {
      this.treatment = Thrift.copyMap(args.treatment, [null]);
    }
  }
};
CreateTreatmentRequest.prototype = {};
CreateTreatmentRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.experiment_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bucket_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size94 = 0;
        var _rtmp398;
        this.treatment = {};
        var _ktype95 = 0;
        var _vtype96 = 0;
        _rtmp398 = input.readMapBegin();
        _ktype95 = _rtmp398.ktype;
        _vtype96 = _rtmp398.vtype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var key100 = null;
          var val101 = null;
          key100 = input.readString();
          val101 = input.readString();
          this.treatment[key100] = val101;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateTreatmentRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateTreatmentRequest');
  if (this.experiment_name !== null && this.experiment_name !== undefined) {
    output.writeFieldBegin('experiment_name', Thrift.Type.STRING, 1);
    output.writeString(this.experiment_name);
    output.writeFieldEnd();
  }
  if (this.bucket_name !== null && this.bucket_name !== undefined) {
    output.writeFieldBegin('bucket_name', Thrift.Type.STRING, 2);
    output.writeString(this.bucket_name);
    output.writeFieldEnd();
  }
  if (this.treatment !== null && this.treatment !== undefined) {
    output.writeFieldBegin('treatment', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.treatment));
    for (var kiter102 in this.treatment)
    {
      if (this.treatment.hasOwnProperty(kiter102))
      {
        var viter103 = this.treatment[kiter102];
        output.writeString(kiter102);
        output.writeString(viter103);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DEFAULT_BUCKET = 'default';
